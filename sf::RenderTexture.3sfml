.TH "sf::RenderTexture" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::RenderTexture \- Target for off-screen 2D rendering into a texture\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/RenderTexture\&.hpp>\fP
.PP
Inherits \fBsf::RenderTarget\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRenderTexture\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "virtual \fB~RenderTexture\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "bool \fBcreate\fP (unsigned int width, unsigned int height, bool depthBuffer)"
.br
.RI "Create the render-texture\&. "
.ti -1c
.RI "bool \fBcreate\fP (unsigned int width, unsigned int height, const \fBContextSettings\fP &settings=\fBContextSettings\fP())"
.br
.RI "Create the render-texture\&. "
.ti -1c
.RI "void \fBsetSmooth\fP (bool smooth)"
.br
.RI "Enable or disable texture smoothing\&. "
.ti -1c
.RI "bool \fBisSmooth\fP () const"
.br
.RI "Tell whether the smooth filtering is enabled or not\&. "
.ti -1c
.RI "void \fBsetRepeated\fP (bool repeated)"
.br
.RI "Enable or disable texture repeating\&. "
.ti -1c
.RI "bool \fBisRepeated\fP () const"
.br
.RI "Tell whether the texture is repeated or not\&. "
.ti -1c
.RI "bool \fBgenerateMipmap\fP ()"
.br
.RI "Generate a mipmap using the current texture data\&. "
.ti -1c
.RI "bool \fBsetActive\fP (bool active=true)"
.br
.RI "Activate or deactivate the render-texture for rendering\&. "
.ti -1c
.RI "void \fBdisplay\fP ()"
.br
.RI "Update the contents of the target texture\&. "
.ti -1c
.RI "virtual \fBVector2u\fP \fBgetSize\fP () const"
.br
.RI "Return the size of the rendering region of the texture\&. "
.ti -1c
.RI "virtual bool \fBisSrgb\fP () const"
.br
.RI "Tell if the render-texture will use sRGB encoding when drawing on it\&. "
.ti -1c
.RI "const \fBTexture\fP & \fBgetTexture\fP () const"
.br
.RI "Get a read-only reference to the target texture\&. "
.ti -1c
.RI "void \fBclear\fP (const \fBColor\fP &color=\fBColor\fP(0, 0, 0, 255))"
.br
.RI "Clear the entire target with a single color\&. "
.ti -1c
.RI "void \fBsetView\fP (const \fBView\fP &view)"
.br
.RI "Change the current active view\&. "
.ti -1c
.RI "const \fBView\fP & \fBgetView\fP () const"
.br
.RI "Get the view currently in use in the render target\&. "
.ti -1c
.RI "const \fBView\fP & \fBgetDefaultView\fP () const"
.br
.RI "Get the default view of the render target\&. "
.ti -1c
.RI "\fBIntRect\fP \fBgetViewport\fP (const \fBView\fP &view) const"
.br
.RI "Get the viewport of a view, applied to this render target\&. "
.ti -1c
.RI "\fBVector2f\fP \fBmapPixelToCoords\fP (const \fBVector2i\fP &point) const"
.br
.RI "Convert a point from target coordinates to world coordinates, using the current view\&. "
.ti -1c
.RI "\fBVector2f\fP \fBmapPixelToCoords\fP (const \fBVector2i\fP &point, const \fBView\fP &view) const"
.br
.RI "Convert a point from target coordinates to world coordinates\&. "
.ti -1c
.RI "\fBVector2i\fP \fBmapCoordsToPixel\fP (const \fBVector2f\fP &point) const"
.br
.RI "Convert a point from world coordinates to target coordinates, using the current view\&. "
.ti -1c
.RI "\fBVector2i\fP \fBmapCoordsToPixel\fP (const \fBVector2f\fP &point, const \fBView\fP &view) const"
.br
.RI "Convert a point from world coordinates to target coordinates\&. "
.ti -1c
.RI "void \fBdraw\fP (const \fBDrawable\fP &drawable, const \fBRenderStates\fP &states=\fBRenderStates::Default\fP)"
.br
.RI "Draw a drawable object to the render target\&. "
.ti -1c
.RI "void \fBdraw\fP (const \fBVertex\fP *vertices, std::size_t vertexCount, \fBPrimitiveType\fP type, const \fBRenderStates\fP &states=\fBRenderStates::Default\fP)"
.br
.RI "Draw primitives defined by an array of vertices\&. "
.ti -1c
.RI "void \fBdraw\fP (const \fBVertexBuffer\fP &vertexBuffer, const \fBRenderStates\fP &states=\fBRenderStates::Default\fP)"
.br
.RI "Draw primitives defined by a vertex buffer\&. "
.ti -1c
.RI "void \fBdraw\fP (const \fBVertexBuffer\fP &vertexBuffer, std::size_t firstVertex, std::size_t vertexCount, const \fBRenderStates\fP &states=\fBRenderStates::Default\fP)"
.br
.RI "Draw primitives defined by a vertex buffer\&. "
.ti -1c
.RI "void \fBpushGLStates\fP ()"
.br
.RI "Save the current OpenGL render states and matrices\&. "
.ti -1c
.RI "void \fBpopGLStates\fP ()"
.br
.RI "Restore the previously saved OpenGL render states and matrices\&. "
.ti -1c
.RI "void \fBresetGLStates\fP ()"
.br
.RI "Reset the internal OpenGL states so that the target is ready for drawing\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static unsigned int \fBgetMaximumAntialiasingLevel\fP ()"
.br
.RI "Get the maximum anti-aliasing level supported by the system\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialize\fP ()"
.br
.RI "Performs the common initialization step after creation\&. "
.in -1c
.SH "Detailed Description"
.PP 
Target for off-screen 2D rendering into a texture\&. 

\fBsf::RenderTexture\fP is the little brother of \fBsf::RenderWindow\fP\&.
.PP
It implements the same 2D drawing and OpenGL-related functions (see their base class \fBsf::RenderTarget\fP for more details), the difference is that the result is stored in an off-screen texture rather than being show in a window\&.
.PP
Rendering to a texture can be useful in a variety of situations: 
.PD 0
.IP "\(bu" 1
precomputing a complex static texture (like a level's background from multiple tiles) 
.IP "\(bu" 1
applying post-effects to the whole scene with shaders 
.IP "\(bu" 1
creating a sprite from a 3D object rendered with OpenGL 
.IP "\(bu" 1
etc\&.
.PP
Usage example:
.PP
.PP
.nf
// Create a new render\-window
sf::RenderWindow window(sf::VideoMode(800, 600), "SFML window");

// Create a new render\-texture
sf::RenderTexture texture;
if (!texture\&.create(500, 500))
    return \-1;

// The main loop
while (window\&.isOpen())
{
   // Event processing
   // \&.\&.\&.

   // Clear the whole texture with red color
   texture\&.clear(sf::Color::Red);

   // Draw stuff to the texture
   texture\&.draw(sprite);  // sprite is a sf::Sprite
   texture\&.draw(shape);   // shape is a sf::Shape
   texture\&.draw(text);    // text is a sf::Text

   // We're done drawing to the texture
   texture\&.display();

   // Now we start rendering to the window, clear it first
   window\&.clear();

   // Draw the texture
   sf::Sprite sprite(texture\&.getTexture());
   window\&.draw(sprite);

   // End the current frame and display its contents on screen
   window\&.display();
}
.fi
.PP
.PP
Like \fBsf::RenderWindow\fP, \fBsf::RenderTexture\fP is still able to render direct OpenGL stuff\&. It is even possible to mix together OpenGL calls and regular SFML drawing commands\&. If you need a depth buffer for 3D rendering, don't forget to request it when calling \fBRenderTexture::create\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBsf::RenderTarget\fP, \fBsf::RenderWindow\fP, \fBsf::View\fP, \fBsf::Texture\fP 
.RE
.PP

.PP
Definition at line \fB48\fP of file \fBRenderTexture\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::RenderTexture::RenderTexture ()"

.PP
Default constructor\&. Constructs an empty, invalid render-texture\&. You must call create to have a valid render-texture\&.
.PP
\fBSee also\fP
.RS 4
\fBcreate\fP 
.RE
.PP

.SS "virtual sf::RenderTexture::~RenderTexture ()\fR [virtual]\fP"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void sf::RenderTarget::clear (const \fBColor\fP & color = \fR\fBColor\fP(0, 0, 0, 255)\fP)\fR [inherited]\fP"

.PP
Clear the entire target with a single color\&. This function is usually called once every frame, to clear the previous contents of the target\&.
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP Fill color to use to clear the render target 
.RE
.PP

.SS "bool sf::RenderTexture::create (unsigned int width, unsigned int height, bool depthBuffer)"

.PP
Create the render-texture\&. Before calling this function, the render-texture is in an invalid state, thus it is mandatory to call it before doing anything with the render-texture\&. The last parameter, \fIdepthBuffer\fP, is useful if you want to use the render-texture for 3D OpenGL rendering that requires a depth buffer\&. Otherwise it is unnecessary, and you should leave this parameter to false (which is its default value)\&.
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP Width of the render-texture 
.br
\fIheight\fP Height of the render-texture 
.br
\fIdepthBuffer\fP Do you want this render-texture to have a depth buffer?
.RE
.PP
\fBReturns\fP
.RS 4
True if creation has been successful
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBcreate(unsigned int, unsigned int, const ContextSettings&)\fP instead\&.
.RE
.PP

.SS "bool sf::RenderTexture::create (unsigned int width, unsigned int height, const \fBContextSettings\fP & settings = \fR\fBContextSettings\fP()\fP)"

.PP
Create the render-texture\&. Before calling this function, the render-texture is in an invalid state, thus it is mandatory to call it before doing anything with the render-texture\&. The last parameter, \fIsettings\fP, is useful if you want to enable multi-sampling or use the render-texture for OpenGL rendering that requires a depth or stencil buffer\&. Otherwise it is unnecessary, and you should leave this parameter at its default value\&.
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP Width of the render-texture 
.br
\fIheight\fP Height of the render-texture 
.br
\fIsettings\fP Additional settings for the underlying OpenGL texture and context
.RE
.PP
\fBReturns\fP
.RS 4
True if creation has been successful 
.RE
.PP

.SS "void sf::RenderTexture::display ()"

.PP
Update the contents of the target texture\&. This function updates the target texture with what has been drawn so far\&. Like for windows, calling this function is mandatory at the end of rendering\&. Not calling it may leave the texture in an undefined state\&. 
.SS "void sf::RenderTarget::draw (const \fBDrawable\fP & drawable, const \fBRenderStates\fP & states = \fR\fBRenderStates::Default\fP\fP)\fR [inherited]\fP"

.PP
Draw a drawable object to the render target\&. 
.PP
\fBParameters\fP
.RS 4
\fIdrawable\fP Object to draw 
.br
\fIstates\fP Render states to use for drawing 
.RE
.PP

.SS "void sf::RenderTarget::draw (const \fBVertex\fP * vertices, std::size_t vertexCount, \fBPrimitiveType\fP type, const \fBRenderStates\fP & states = \fR\fBRenderStates::Default\fP\fP)\fR [inherited]\fP"

.PP
Draw primitives defined by an array of vertices\&. 
.PP
\fBParameters\fP
.RS 4
\fIvertices\fP Pointer to the vertices 
.br
\fIvertexCount\fP Number of vertices in the array 
.br
\fItype\fP Type of primitives to draw 
.br
\fIstates\fP Render states to use for drawing 
.RE
.PP

.SS "void sf::RenderTarget::draw (const \fBVertexBuffer\fP & vertexBuffer, const \fBRenderStates\fP & states = \fR\fBRenderStates::Default\fP\fP)\fR [inherited]\fP"

.PP
Draw primitives defined by a vertex buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIvertexBuffer\fP \fBVertex\fP buffer 
.br
\fIstates\fP Render states to use for drawing 
.RE
.PP

.SS "void sf::RenderTarget::draw (const \fBVertexBuffer\fP & vertexBuffer, std::size_t firstVertex, std::size_t vertexCount, const \fBRenderStates\fP & states = \fR\fBRenderStates::Default\fP\fP)\fR [inherited]\fP"

.PP
Draw primitives defined by a vertex buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIvertexBuffer\fP \fBVertex\fP buffer 
.br
\fIfirstVertex\fP Index of the first vertex to render 
.br
\fIvertexCount\fP Number of vertices to render 
.br
\fIstates\fP Render states to use for drawing 
.RE
.PP

.SS "bool sf::RenderTexture::generateMipmap ()"

.PP
Generate a mipmap using the current texture data\&. This function is similar to \fBTexture::generateMipmap\fP and operates on the texture used as the target for drawing\&. Be aware that any draw operation may modify the base level image data\&. For this reason, calling this function only makes sense after all drawing is completed and display has been called\&. Not calling display after subsequent drawing will lead to undefined behavior if a mipmap had been previously generated\&.
.PP
\fBReturns\fP
.RS 4
True if mipmap generation was successful, false if unsuccessful 
.RE
.PP

.SS "const \fBView\fP & sf::RenderTarget::getDefaultView () const\fR [inherited]\fP"

.PP
Get the default view of the render target\&. The default view has the initial size of the render target, and never changes after the target has been created\&.
.PP
\fBReturns\fP
.RS 4
The default view of the render target
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetView\fP, \fBgetView\fP 
.RE
.PP

.SS "static unsigned int sf::RenderTexture::getMaximumAntialiasingLevel ()\fR [static]\fP"

.PP
Get the maximum anti-aliasing level supported by the system\&. 
.PP
\fBReturns\fP
.RS 4
The maximum anti-aliasing level supported by the system 
.RE
.PP

.SS "virtual \fBVector2u\fP sf::RenderTexture::getSize () const\fR [virtual]\fP"

.PP
Return the size of the rendering region of the texture\&. The returned value is the size that you passed to the create function\&.
.PP
\fBReturns\fP
.RS 4
Size in pixels 
.RE
.PP

.PP
Implements \fBsf::RenderTarget\fP\&.
.SS "const \fBTexture\fP & sf::RenderTexture::getTexture () const"

.PP
Get a read-only reference to the target texture\&. After drawing to the render-texture and calling Display, you can retrieve the updated texture using this function, and draw it using a sprite (for example)\&. The internal \fBsf::Texture\fP of a render-texture is always the same instance, so that it is possible to call this function once and keep a reference to the texture even after it is modified\&.
.PP
\fBReturns\fP
.RS 4
Const reference to the texture 
.RE
.PP

.SS "const \fBView\fP & sf::RenderTarget::getView () const\fR [inherited]\fP"

.PP
Get the view currently in use in the render target\&. 
.PP
\fBReturns\fP
.RS 4
The view object that is currently used
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetView\fP, \fBgetDefaultView\fP 
.RE
.PP

.SS "\fBIntRect\fP sf::RenderTarget::getViewport (const \fBView\fP & view) const\fR [inherited]\fP"

.PP
Get the viewport of a view, applied to this render target\&. The viewport is defined in the view as a ratio, this function simply applies this ratio to the current dimensions of the render target to calculate the pixels rectangle that the viewport actually covers in the target\&.
.PP
\fBParameters\fP
.RS 4
\fIview\fP The view for which we want to compute the viewport
.RE
.PP
\fBReturns\fP
.RS 4
Viewport rectangle, expressed in pixels 
.RE
.PP

.SS "void sf::RenderTarget::initialize ()\fR [protected]\fP, \fR [inherited]\fP"

.PP
Performs the common initialization step after creation\&. The derived classes must call this function after the target is created and ready for drawing\&. 
.SS "bool sf::RenderTexture::isRepeated () const"

.PP
Tell whether the texture is repeated or not\&. 
.PP
\fBReturns\fP
.RS 4
True if texture is repeated
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetRepeated\fP 
.RE
.PP

.SS "bool sf::RenderTexture::isSmooth () const"

.PP
Tell whether the smooth filtering is enabled or not\&. 
.PP
\fBReturns\fP
.RS 4
True if texture smoothing is enabled
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSmooth\fP 
.RE
.PP

.SS "virtual bool sf::RenderTexture::isSrgb () const\fR [virtual]\fP"

.PP
Tell if the render-texture will use sRGB encoding when drawing on it\&. You can request sRGB encoding for a render-texture by having the sRgbCapable flag set for the context parameter of \fBcreate()\fP method
.PP
\fBReturns\fP
.RS 4
True if the render-texture use sRGB encoding, false otherwise 
.RE
.PP

.PP
Reimplemented from \fBsf::RenderTarget\fP\&.
.SS "\fBVector2i\fP sf::RenderTarget::mapCoordsToPixel (const \fBVector2f\fP & point) const\fR [inherited]\fP"

.PP
Convert a point from world coordinates to target coordinates, using the current view\&. This function is an overload of the mapCoordsToPixel function that implicitly uses the current view\&. It is equivalent to: 
.PP
.nf
target\&.mapCoordsToPixel(point, target\&.getView());

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP Point to convert
.RE
.PP
\fBReturns\fP
.RS 4
The converted point, in target coordinates (pixels)
.RE
.PP
\fBSee also\fP
.RS 4
\fBmapPixelToCoords\fP 
.RE
.PP

.SS "\fBVector2i\fP sf::RenderTarget::mapCoordsToPixel (const \fBVector2f\fP & point, const \fBView\fP & view) const\fR [inherited]\fP"

.PP
Convert a point from world coordinates to target coordinates\&. This function finds the pixel of the render target that matches the given 2D point\&. In other words, it goes through the same process as the graphics card, to compute the final position of a rendered point\&.
.PP
Initially, both coordinate systems (world units and target pixels) match perfectly\&. But if you define a custom view or resize your render target, this assertion is not true anymore, i\&.e\&. a point located at (150, 75) in your 2D world may map to the pixel (10, 50) of your render target -- if the view is translated by (140, 25)\&.
.PP
This version uses a custom view for calculations, see the other overload of the function if you want to use the current view of the render target\&.
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP Point to convert 
.br
\fIview\fP The view to use for converting the point
.RE
.PP
\fBReturns\fP
.RS 4
The converted point, in target coordinates (pixels)
.RE
.PP
\fBSee also\fP
.RS 4
\fBmapPixelToCoords\fP 
.RE
.PP

.SS "\fBVector2f\fP sf::RenderTarget::mapPixelToCoords (const \fBVector2i\fP & point) const\fR [inherited]\fP"

.PP
Convert a point from target coordinates to world coordinates, using the current view\&. This function is an overload of the mapPixelToCoords function that implicitly uses the current view\&. It is equivalent to: 
.PP
.nf
target\&.mapPixelToCoords(point, target\&.getView());

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP Pixel to convert
.RE
.PP
\fBReturns\fP
.RS 4
The converted point, in 'world' coordinates
.RE
.PP
\fBSee also\fP
.RS 4
\fBmapCoordsToPixel\fP 
.RE
.PP

.SS "\fBVector2f\fP sf::RenderTarget::mapPixelToCoords (const \fBVector2i\fP & point, const \fBView\fP & view) const\fR [inherited]\fP"

.PP
Convert a point from target coordinates to world coordinates\&. This function finds the 2D position that matches the given pixel of the render target\&. In other words, it does the inverse of what the graphics card does, to find the initial position of a rendered pixel\&.
.PP
Initially, both coordinate systems (world units and target pixels) match perfectly\&. But if you define a custom view or resize your render target, this assertion is not true anymore, i\&.e\&. a point located at (10, 50) in your render target may map to the point (150, 75) in your 2D world -- if the view is translated by (140, 25)\&.
.PP
For render-windows, this function is typically used to find which point (or object) is located below the mouse cursor\&.
.PP
This version uses a custom view for calculations, see the other overload of the function if you want to use the current view of the render target\&.
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP Pixel to convert 
.br
\fIview\fP The view to use for converting the point
.RE
.PP
\fBReturns\fP
.RS 4
The converted point, in 'world' units
.RE
.PP
\fBSee also\fP
.RS 4
\fBmapCoordsToPixel\fP 
.RE
.PP

.SS "void sf::RenderTarget::popGLStates ()\fR [inherited]\fP"

.PP
Restore the previously saved OpenGL render states and matrices\&. See the description of pushGLStates to get a detailed description of these functions\&.
.PP
\fBSee also\fP
.RS 4
\fBpushGLStates\fP 
.RE
.PP

.SS "void sf::RenderTarget::pushGLStates ()\fR [inherited]\fP"

.PP
Save the current OpenGL render states and matrices\&. This function can be used when you mix SFML drawing and direct OpenGL rendering\&. Combined with popGLStates, it ensures that: 
.PD 0
.IP "\(bu" 1
SFML's internal states are not messed up by your OpenGL code 
.IP "\(bu" 1
your OpenGL states are not modified by a call to a SFML function
.PP
More specifically, it must be used around code that calls Draw functions\&. Example: 
.PP
.nf
// OpenGL code here\&.\&.\&.
window\&.pushGLStates();
window\&.draw(\&.\&.\&.);
window\&.draw(\&.\&.\&.);
window\&.popGLStates();
// OpenGL code here\&.\&.\&.

.fi
.PP
.PP
Note that this function is quite expensive: it saves all the possible OpenGL states and matrices, even the ones you don't care about\&. Therefore it should be used wisely\&. It is provided for convenience, but the best results will be achieved if you handle OpenGL states yourself (because you know which states have really changed, and need to be saved and restored)\&. Take a look at the resetGLStates function if you do so\&.
.PP
\fBSee also\fP
.RS 4
\fBpopGLStates\fP 
.RE
.PP

.SS "void sf::RenderTarget::resetGLStates ()\fR [inherited]\fP"

.PP
Reset the internal OpenGL states so that the target is ready for drawing\&. This function can be used when you mix SFML drawing and direct OpenGL rendering, if you choose not to use pushGLStates/popGLStates\&. It makes sure that all OpenGL states needed by SFML are set, so that subsequent \fBdraw()\fP calls will work as expected\&.
.PP
Example: 
.PP
.nf
// OpenGL code here\&.\&.\&.
glPushAttrib(\&.\&.\&.);
window\&.resetGLStates();
window\&.draw(\&.\&.\&.);
window\&.draw(\&.\&.\&.);
glPopAttrib(\&.\&.\&.);
// OpenGL code here\&.\&.\&.

.fi
.PP
 
.SS "bool sf::RenderTexture::setActive (bool active = \fRtrue\fP)\fR [virtual]\fP"

.PP
Activate or deactivate the render-texture for rendering\&. This function makes the render-texture's context current for future OpenGL rendering operations (so you shouldn't care about it if you're not doing direct OpenGL stuff)\&. Only one context can be current in a thread, so if you want to draw OpenGL geometry to another render target (like a \fBRenderWindow\fP) don't forget to activate it again\&.
.PP
\fBParameters\fP
.RS 4
\fIactive\fP True to activate, false to deactivate
.RE
.PP
\fBReturns\fP
.RS 4
True if operation was successful, false otherwise 
.RE
.PP

.PP
Reimplemented from \fBsf::RenderTarget\fP\&.
.SS "void sf::RenderTexture::setRepeated (bool repeated)"

.PP
Enable or disable texture repeating\&. This function is similar to \fBTexture::setRepeated\fP\&. This parameter is disabled by default\&.
.PP
\fBParameters\fP
.RS 4
\fIrepeated\fP True to enable repeating, false to disable it
.RE
.PP
\fBSee also\fP
.RS 4
\fBisRepeated\fP 
.RE
.PP

.SS "void sf::RenderTexture::setSmooth (bool smooth)"

.PP
Enable or disable texture smoothing\&. This function is similar to \fBTexture::setSmooth\fP\&. This parameter is disabled by default\&.
.PP
\fBParameters\fP
.RS 4
\fIsmooth\fP True to enable smoothing, false to disable it
.RE
.PP
\fBSee also\fP
.RS 4
\fBisSmooth\fP 
.RE
.PP

.SS "void sf::RenderTarget::setView (const \fBView\fP & view)\fR [inherited]\fP"

.PP
Change the current active view\&. The view is like a 2D camera, it controls which part of the 2D scene is visible, and how it is viewed in the render target\&. The new view will affect everything that is drawn, until another view is set\&. The render target keeps its own copy of the view object, so it is not necessary to keep the original one alive after calling this function\&. To restore the original view of the target, you can pass the result of \fBgetDefaultView()\fP to this function\&.
.PP
\fBParameters\fP
.RS 4
\fIview\fP New view to use
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetView\fP, \fBgetDefaultView\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
