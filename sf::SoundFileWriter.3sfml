.TH "sf::SoundFileWriter" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::SoundFileWriter \- Abstract base class for sound file encoding\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Audio/SoundFileWriter\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoundFileWriter\fP ()"
.br
.RI "Virtual destructor\&. "
.ti -1c
.RI "virtual bool \fBopen\fP (const std::string &filename, unsigned int sampleRate, unsigned int channelCount)=0"
.br
.RI "Open a sound file for writing\&. "
.ti -1c
.RI "virtual void \fBwrite\fP (const Int16 *samples, Uint64 count)=0"
.br
.RI "Write audio samples to the open file\&. "
.in -1c
.SH "Detailed Description"
.PP 
Abstract base class for sound file encoding\&. 

This class allows users to write audio file formats not natively supported by SFML, and thus extend the set of supported writable audio formats\&.
.PP
A valid sound file writer must override the open and write functions, as well as providing a static check function; the latter is used by SFML to find a suitable writer for a given filename\&.
.PP
To register a new writer, use the \fBsf::SoundFileFactory::registerWriter\fP template function\&.
.PP
Usage example: 
.PP
.nf
class MySoundFileWriter : public sf::SoundFileWriter
{
public:

    static bool check(const std::string& filename)
    {
        // typically, check the extension
        // return true if the writer can handle the format
    }

    virtual bool open(const std::string& filename, unsigned int sampleRate, unsigned int channelCount)
    {
        // open the file 'filename' for writing,
        // write the given sample rate and channel count to the file header
        // return true on success
    }

    virtual void write(const sf::Int16* samples, sf::Uint64 count)
    {
        // write 'count' samples stored at address 'samples',
        // convert them (for example to normalized float) if the format requires it
    }
};

sf::SoundFileFactory::registerWriter<MySoundFileWriter>();

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::OutputSoundFile\fP, \fBsf::SoundFileFactory\fP, \fBsf::SoundFileReader\fP 
.RE
.PP

.PP
Definition at line \fB41\fP of file \fBSoundFileWriter\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual sf::SoundFileWriter::~SoundFileWriter ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Virtual destructor\&. 
.PP
Definition at line \fB49\fP of file \fBSoundFileWriter\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual bool sf::SoundFileWriter::open (const std::string & filename, unsigned int sampleRate, unsigned int channelCount)\fR [pure virtual]\fP"

.PP
Open a sound file for writing\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path of the file to open 
.br
\fIsampleRate\fP Sample rate of the sound 
.br
\fIchannelCount\fP Number of channels of the sound
.RE
.PP
\fBReturns\fP
.RS 4
True if the file was successfully opened 
.RE
.PP

.SS "virtual void sf::SoundFileWriter::write (const Int16 * samples, Uint64 count)\fR [pure virtual]\fP"

.PP
Write audio samples to the open file\&. 
.PP
\fBParameters\fP
.RS 4
\fIsamples\fP Pointer to the sample array to write 
.br
\fIcount\fP Number of samples to write 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
