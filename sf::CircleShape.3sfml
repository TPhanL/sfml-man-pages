.TH "sf::CircleShape" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::CircleShape \- Specialized shape representing a circle\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/CircleShape\&.hpp>\fP
.PP
Inherits \fBsf::Shape\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCircleShape\fP (float radius=0, std::size_t pointCount=30)"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "void \fBsetRadius\fP (float radius)"
.br
.RI "Set the radius of the circle\&. "
.ti -1c
.RI "float \fBgetRadius\fP () const"
.br
.RI "Get the radius of the circle\&. "
.ti -1c
.RI "void \fBsetPointCount\fP (std::size_t count)"
.br
.RI "Set the number of points of the circle\&. "
.ti -1c
.RI "virtual std::size_t \fBgetPointCount\fP () const"
.br
.RI "Get the number of points of the circle\&. "
.ti -1c
.RI "virtual \fBVector2f\fP \fBgetPoint\fP (std::size_t index) const"
.br
.RI "Get a point of the circle\&. "
.ti -1c
.RI "void \fBsetTexture\fP (const \fBTexture\fP *texture, bool resetRect=false)"
.br
.RI "Change the source texture of the shape\&. "
.ti -1c
.RI "void \fBsetTextureRect\fP (const \fBIntRect\fP &rect)"
.br
.RI "Set the sub-rectangle of the texture that the shape will display\&. "
.ti -1c
.RI "void \fBsetFillColor\fP (const \fBColor\fP &color)"
.br
.RI "Set the fill color of the shape\&. "
.ti -1c
.RI "void \fBsetOutlineColor\fP (const \fBColor\fP &color)"
.br
.RI "Set the outline color of the shape\&. "
.ti -1c
.RI "void \fBsetOutlineThickness\fP (float thickness)"
.br
.RI "Set the thickness of the shape's outline\&. "
.ti -1c
.RI "const \fBTexture\fP * \fBgetTexture\fP () const"
.br
.RI "Get the source texture of the shape\&. "
.ti -1c
.RI "const \fBIntRect\fP & \fBgetTextureRect\fP () const"
.br
.RI "Get the sub-rectangle of the texture displayed by the shape\&. "
.ti -1c
.RI "const \fBColor\fP & \fBgetFillColor\fP () const"
.br
.RI "Get the fill color of the shape\&. "
.ti -1c
.RI "const \fBColor\fP & \fBgetOutlineColor\fP () const"
.br
.RI "Get the outline color of the shape\&. "
.ti -1c
.RI "float \fBgetOutlineThickness\fP () const"
.br
.RI "Get the outline thickness of the shape\&. "
.ti -1c
.RI "\fBFloatRect\fP \fBgetLocalBounds\fP () const"
.br
.RI "Get the local bounding rectangle of the entity\&. "
.ti -1c
.RI "\fBFloatRect\fP \fBgetGlobalBounds\fP () const"
.br
.RI "Get the global (non-minimal) bounding rectangle of the entity\&. "
.ti -1c
.RI "void \fBsetPosition\fP (float x, float y)"
.br
.RI "set the position of the object "
.ti -1c
.RI "void \fBsetPosition\fP (const \fBVector2f\fP &position)"
.br
.RI "set the position of the object "
.ti -1c
.RI "void \fBsetRotation\fP (float angle)"
.br
.RI "set the orientation of the object "
.ti -1c
.RI "void \fBsetScale\fP (float factorX, float factorY)"
.br
.RI "set the scale factors of the object "
.ti -1c
.RI "void \fBsetScale\fP (const \fBVector2f\fP &factors)"
.br
.RI "set the scale factors of the object "
.ti -1c
.RI "void \fBsetOrigin\fP (float x, float y)"
.br
.RI "set the local origin of the object "
.ti -1c
.RI "void \fBsetOrigin\fP (const \fBVector2f\fP &origin)"
.br
.RI "set the local origin of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetPosition\fP () const"
.br
.RI "get the position of the object "
.ti -1c
.RI "float \fBgetRotation\fP () const"
.br
.RI "get the orientation of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetScale\fP () const"
.br
.RI "get the current scale of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetOrigin\fP () const"
.br
.RI "get the local origin of the object "
.ti -1c
.RI "void \fBmove\fP (float offsetX, float offsetY)"
.br
.RI "Move the object by a given offset\&. "
.ti -1c
.RI "void \fBmove\fP (const \fBVector2f\fP &offset)"
.br
.RI "Move the object by a given offset\&. "
.ti -1c
.RI "void \fBrotate\fP (float angle)"
.br
.RI "Rotate the object\&. "
.ti -1c
.RI "void \fBscale\fP (float factorX, float factorY)"
.br
.RI "Scale the object\&. "
.ti -1c
.RI "void \fBscale\fP (const \fBVector2f\fP &factor)"
.br
.RI "Scale the object\&. "
.ti -1c
.RI "const \fBTransform\fP & \fBgetTransform\fP () const"
.br
.RI "get the combined transform of the object "
.ti -1c
.RI "const \fBTransform\fP & \fBgetInverseTransform\fP () const"
.br
.RI "get the inverse of the combined transform of the object "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.RI "Recompute the internal geometry of the shape\&. "
.in -1c
.SH "Detailed Description"
.PP 
Specialized shape representing a circle\&. 

This class inherits all the functions of \fBsf::Transformable\fP (position, rotation, scale, bounds, \&.\&.\&.) as well as the functions of \fBsf::Shape\fP (outline, color, texture, \&.\&.\&.)\&.
.PP
Usage example: 
.PP
.nf
sf::CircleShape circle;
circle\&.setRadius(150);
circle\&.setOutlineColor(sf::Color::Red);
circle\&.setOutlineThickness(5);
circle\&.setPosition(10, 20);
\&.\&.\&.
window\&.draw(circle);

.fi
.PP
.PP
Since the graphics card can't draw perfect circles, we have to fake them with multiple triangles connected to each other\&. The 'points count' property of \fBsf::CircleShape\fP defines how many of these triangles to use, and therefore defines the quality of the circle\&.
.PP
The number of points can also be used for another purpose; with small numbers you can create any regular polygon shape: equilateral triangle, square, pentagon, hexagon, \&.\&.\&.
.PP
\fBSee also\fP
.RS 4
\fBsf::Shape\fP, \fBsf::RectangleShape\fP, \fBsf::ConvexShape\fP 
.RE
.PP

.PP
Definition at line \fB41\fP of file \fBCircleShape\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::CircleShape::CircleShape (float radius = \fR0\fP, std::size_t pointCount = \fR30\fP)\fR [explicit]\fP"

.PP
Default constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIradius\fP Radius of the circle 
.br
\fIpointCount\fP Number of points composing the circle 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "const \fBColor\fP & sf::Shape::getFillColor () const\fR [inherited]\fP"

.PP
Get the fill color of the shape\&. 
.PP
\fBReturns\fP
.RS 4
Fill color of the shape
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetFillColor\fP 
.RE
.PP

.SS "\fBFloatRect\fP sf::Shape::getGlobalBounds () const\fR [inherited]\fP"

.PP
Get the global (non-minimal) bounding rectangle of the entity\&. The returned rectangle is in global coordinates, which means that it takes into account the transformations (translation, rotation, scale, \&.\&.\&.) that are applied to the entity\&. In other words, this function returns the bounds of the shape in the global 2D world's coordinate system\&.
.PP
This function does not necessarily return the \fIminimal\fP bounding rectangle\&. It merely ensures that the returned rectangle covers all the vertices (but possibly more)\&. This allows for a fast approximation of the bounds as a first check; you may want to use more precise checks on top of that\&.
.PP
\fBReturns\fP
.RS 4
Global bounding rectangle of the entity 
.RE
.PP

.SS "const \fBTransform\fP & sf::Transformable::getInverseTransform () const\fR [inherited]\fP"

.PP
get the inverse of the combined transform of the object 
.PP
\fBReturns\fP
.RS 4
Inverse of the combined transformations applied to the object
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetTransform\fP 
.RE
.PP

.SS "\fBFloatRect\fP sf::Shape::getLocalBounds () const\fR [inherited]\fP"

.PP
Get the local bounding rectangle of the entity\&. The returned rectangle is in local coordinates, which means that it ignores the transformations (translation, rotation, scale, \&.\&.\&.) that are applied to the entity\&. In other words, this function returns the bounds of the entity in the entity's coordinate system\&.
.PP
\fBReturns\fP
.RS 4
Local bounding rectangle of the entity 
.RE
.PP

.SS "const \fBVector2f\fP & sf::Transformable::getOrigin () const\fR [inherited]\fP"

.PP
get the local origin of the object 
.PP
\fBReturns\fP
.RS 4
Current origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetOrigin\fP 
.RE
.PP

.SS "const \fBColor\fP & sf::Shape::getOutlineColor () const\fR [inherited]\fP"

.PP
Get the outline color of the shape\&. 
.PP
\fBReturns\fP
.RS 4
Outline color of the shape
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetOutlineColor\fP 
.RE
.PP

.SS "float sf::Shape::getOutlineThickness () const\fR [inherited]\fP"

.PP
Get the outline thickness of the shape\&. 
.PP
\fBReturns\fP
.RS 4
Outline thickness of the shape
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetOutlineThickness\fP 
.RE
.PP

.SS "virtual \fBVector2f\fP sf::CircleShape::getPoint (std::size_t index) const\fR [virtual]\fP"

.PP
Get a point of the circle\&. The returned point is in local coordinates, that is, the shape's transforms (position, rotation, scale) are not taken into account\&. The result is undefined if \fIindex\fP is out of the valid range\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the point to get, in range [0 \&.\&. \fBgetPointCount()\fP - 1]
.RE
.PP
\fBReturns\fP
.RS 4
index-th point of the shape 
.RE
.PP

.PP
Implements \fBsf::Shape\fP\&.
.SS "virtual std::size_t sf::CircleShape::getPointCount () const\fR [virtual]\fP"

.PP
Get the number of points of the circle\&. 
.PP
\fBReturns\fP
.RS 4
Number of points of the circle
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPointCount\fP 
.RE
.PP

.PP
Implements \fBsf::Shape\fP\&.
.SS "const \fBVector2f\fP & sf::Transformable::getPosition () const\fR [inherited]\fP"

.PP
get the position of the object 
.PP
\fBReturns\fP
.RS 4
Current position
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "float sf::CircleShape::getRadius () const"

.PP
Get the radius of the circle\&. 
.PP
\fBReturns\fP
.RS 4
Radius of the circle
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetRadius\fP 
.RE
.PP

.SS "float sf::Transformable::getRotation () const\fR [inherited]\fP"

.PP
get the orientation of the object The rotation is always in the range [0, 360]\&.
.PP
\fBReturns\fP
.RS 4
Current rotation, in degrees
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetRotation\fP 
.RE
.PP

.SS "const \fBVector2f\fP & sf::Transformable::getScale () const\fR [inherited]\fP"

.PP
get the current scale of the object 
.PP
\fBReturns\fP
.RS 4
Current scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "const \fBTexture\fP * sf::Shape::getTexture () const\fR [inherited]\fP"

.PP
Get the source texture of the shape\&. If the shape has no source texture, a NULL pointer is returned\&. The returned pointer is const, which means that you can't modify the texture when you retrieve it with this function\&.
.PP
\fBReturns\fP
.RS 4
Pointer to the shape's texture
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTexture\fP 
.RE
.PP

.SS "const \fBIntRect\fP & sf::Shape::getTextureRect () const\fR [inherited]\fP"

.PP
Get the sub-rectangle of the texture displayed by the shape\&. 
.PP
\fBReturns\fP
.RS 4
\fBTexture\fP rectangle of the shape
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTextureRect\fP 
.RE
.PP

.SS "const \fBTransform\fP & sf::Transformable::getTransform () const\fR [inherited]\fP"

.PP
get the combined transform of the object 
.PP
\fBReturns\fP
.RS 4
\fBTransform\fP combining the position/rotation/scale/origin of the object
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetInverseTransform\fP 
.RE
.PP

.SS "void sf::Transformable::move (const \fBVector2f\fP & offset)\fR [inherited]\fP"

.PP
Move the object by a given offset\&. This function adds to the current position of the object, unlike setPosition which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
object\&.setPosition(object\&.getPosition() + offset);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIoffset\fP Offset
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::move (float offsetX, float offsetY)\fR [inherited]\fP"

.PP
Move the object by a given offset\&. This function adds to the current position of the object, unlike setPosition which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f pos = object\&.getPosition();
object\&.setPosition(pos\&.x + offsetX, pos\&.y + offsetY);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIoffsetX\fP X offset 
.br
\fIoffsetY\fP Y offset
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::rotate (float angle)\fR [inherited]\fP"

.PP
Rotate the object\&. This function adds to the current rotation of the object, unlike setRotation which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
object\&.setRotation(object\&.getRotation() + angle);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIangle\fP Angle of rotation, in degrees 
.RE
.PP

.SS "void sf::Transformable::scale (const \fBVector2f\fP & factor)\fR [inherited]\fP"

.PP
Scale the object\&. This function multiplies the current scale of the object, unlike setScale which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f scale = object\&.getScale();
object\&.setScale(scale\&.x * factor\&.x, scale\&.y * factor\&.y);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIfactor\fP Scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "void sf::Transformable::scale (float factorX, float factorY)\fR [inherited]\fP"

.PP
Scale the object\&. This function multiplies the current scale of the object, unlike setScale which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f scale = object\&.getScale();
object\&.setScale(scale\&.x * factorX, scale\&.y * factorY);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIfactorX\fP Horizontal scale factor 
.br
\fIfactorY\fP Vertical scale factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "void sf::Shape::setFillColor (const \fBColor\fP & color)\fR [inherited]\fP"

.PP
Set the fill color of the shape\&. This color is modulated (multiplied) with the shape's texture if any\&. It can be used to colorize the shape, or change its global opacity\&. You can use \fBsf::Color::Transparent\fP to make the inside of the shape transparent, and have the outline alone\&. By default, the shape's fill color is opaque white\&.
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP New color of the shape
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetFillColor\fP, \fBsetOutlineColor\fP 
.RE
.PP

.SS "void sf::Transformable::setOrigin (const \fBVector2f\fP & origin)\fR [inherited]\fP"

.PP
set the local origin of the object The origin of an object defines the center point for all transformations (position, scale, rotation)\&. The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation)\&. The default origin of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIorigin\fP New origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOrigin\fP 
.RE
.PP

.SS "void sf::Transformable::setOrigin (float x, float y)\fR [inherited]\fP"

.PP
set the local origin of the object The origin of an object defines the center point for all transformations (position, scale, rotation)\&. The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation)\&. The default origin of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP X coordinate of the new origin 
.br
\fIy\fP Y coordinate of the new origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOrigin\fP 
.RE
.PP

.SS "void sf::Shape::setOutlineColor (const \fBColor\fP & color)\fR [inherited]\fP"

.PP
Set the outline color of the shape\&. By default, the shape's outline color is opaque white\&.
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP New outline color of the shape
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOutlineColor\fP, \fBsetFillColor\fP 
.RE
.PP

.SS "void sf::Shape::setOutlineThickness (float thickness)\fR [inherited]\fP"

.PP
Set the thickness of the shape's outline\&. Note that negative values are allowed (so that the outline expands towards the center of the shape), and using zero disables the outline\&. By default, the outline thickness is 0\&.
.PP
\fBParameters\fP
.RS 4
\fIthickness\fP New outline thickness
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOutlineThickness\fP 
.RE
.PP

.SS "void sf::CircleShape::setPointCount (std::size_t count)"

.PP
Set the number of points of the circle\&. 
.PP
\fBParameters\fP
.RS 4
\fIcount\fP New number of points of the circle
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetPointCount\fP 
.RE
.PP

.SS "void sf::Transformable::setPosition (const \fBVector2f\fP & position)\fR [inherited]\fP"

.PP
set the position of the object This function completely overwrites the previous position\&. See the move function to apply an offset based on the previous position instead\&. The default position of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP New position
.RE
.PP
\fBSee also\fP
.RS 4
\fBmove\fP, \fBgetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::setPosition (float x, float y)\fR [inherited]\fP"

.PP
set the position of the object This function completely overwrites the previous position\&. See the move function to apply an offset based on the previous position instead\&. The default position of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP X coordinate of the new position 
.br
\fIy\fP Y coordinate of the new position
.RE
.PP
\fBSee also\fP
.RS 4
\fBmove\fP, \fBgetPosition\fP 
.RE
.PP

.SS "void sf::CircleShape::setRadius (float radius)"

.PP
Set the radius of the circle\&. 
.PP
\fBParameters\fP
.RS 4
\fIradius\fP New radius of the circle
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetRadius\fP 
.RE
.PP

.SS "void sf::Transformable::setRotation (float angle)\fR [inherited]\fP"

.PP
set the orientation of the object This function completely overwrites the previous rotation\&. See the rotate function to add an angle based on the previous rotation instead\&. The default rotation of a transformable object is 0\&.
.PP
\fBParameters\fP
.RS 4
\fIangle\fP New rotation, in degrees
.RE
.PP
\fBSee also\fP
.RS 4
\fBrotate\fP, \fBgetRotation\fP 
.RE
.PP

.SS "void sf::Transformable::setScale (const \fBVector2f\fP & factors)\fR [inherited]\fP"

.PP
set the scale factors of the object This function completely overwrites the previous scale\&. See the scale function to add a factor based on the previous scale instead\&. The default scale of a transformable object is (1, 1)\&.
.PP
\fBParameters\fP
.RS 4
\fIfactors\fP New scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBscale\fP, \fBgetScale\fP 
.RE
.PP

.SS "void sf::Transformable::setScale (float factorX, float factorY)\fR [inherited]\fP"

.PP
set the scale factors of the object This function completely overwrites the previous scale\&. See the scale function to add a factor based on the previous scale instead\&. The default scale of a transformable object is (1, 1)\&.
.PP
\fBParameters\fP
.RS 4
\fIfactorX\fP New horizontal scale factor 
.br
\fIfactorY\fP New vertical scale factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBscale\fP, \fBgetScale\fP 
.RE
.PP

.SS "void sf::Shape::setTexture (const \fBTexture\fP * texture, bool resetRect = \fRfalse\fP)\fR [inherited]\fP"

.PP
Change the source texture of the shape\&. The \fItexture\fP argument refers to a texture that must exist as long as the shape uses it\&. Indeed, the shape doesn't store its own copy of the texture, but rather keeps a pointer to the one that you passed to this function\&. If the source texture is destroyed and the shape tries to use it, the behavior is undefined\&. \fItexture\fP can be NULL to disable texturing\&. If \fIresetRect\fP is true, the TextureRect property of the shape is automatically adjusted to the size of the new texture\&. If it is false, the texture rect is left unchanged\&.
.PP
\fBParameters\fP
.RS 4
\fItexture\fP New texture 
.br
\fIresetRect\fP Should the texture rect be reset to the size of the new texture?
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetTexture\fP, \fBsetTextureRect\fP 
.RE
.PP

.SS "void sf::Shape::setTextureRect (const \fBIntRect\fP & rect)\fR [inherited]\fP"

.PP
Set the sub-rectangle of the texture that the shape will display\&. The texture rect is useful when you don't want to display the whole texture, but rather a part of it\&. By default, the texture rect covers the entire texture\&.
.PP
\fBParameters\fP
.RS 4
\fIrect\fP Rectangle defining the region of the texture to display
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetTextureRect\fP, \fBsetTexture\fP 
.RE
.PP

.SS "void sf::Shape::update ()\fR [protected]\fP, \fR [inherited]\fP"

.PP
Recompute the internal geometry of the shape\&. This function must be called by the derived class everytime the shape's points change (i\&.e\&. the result of either getPointCount or getPoint is different)\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
