.TH "sf::Color" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Color \- Utility class for manipulating RGBA colors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/Color\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBColor\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBColor\fP (Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha=255)"
.br
.RI "Construct the color from its 4 RGBA components\&. "
.ti -1c
.RI "\fBColor\fP (Uint32 color)"
.br
.RI "Construct the color from 32-bit unsigned integer\&. "
.ti -1c
.RI "Uint32 \fBtoInteger\fP () const"
.br
.RI "Retrieve the color as a 32-bit unsigned integer\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "Uint8 \fBr\fP"
.br
.RI "Red component\&. "
.ti -1c
.RI "Uint8 \fBg\fP"
.br
.RI "Green component\&. "
.ti -1c
.RI "Uint8 \fBb\fP"
.br
.RI "Blue component\&. "
.ti -1c
.RI "Uint8 \fBa\fP"
.br
.RI "Alpha (opacity) component\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const \fBColor\fP \fBBlack\fP"
.br
.RI "Black predefined color\&. "
.ti -1c
.RI "static const \fBColor\fP \fBWhite\fP"
.br
.RI "White predefined color\&. "
.ti -1c
.RI "static const \fBColor\fP \fBRed\fP"
.br
.RI "Red predefined color\&. "
.ti -1c
.RI "static const \fBColor\fP \fBGreen\fP"
.br
.RI "Green predefined color\&. "
.ti -1c
.RI "static const \fBColor\fP \fBBlue\fP"
.br
.RI "Blue predefined color\&. "
.ti -1c
.RI "static const \fBColor\fP \fBYellow\fP"
.br
.RI "Yellow predefined color\&. "
.ti -1c
.RI "static const \fBColor\fP \fBMagenta\fP"
.br
.RI "Magenta predefined color\&. "
.ti -1c
.RI "static const \fBColor\fP \fBCyan\fP"
.br
.RI "Cyan predefined color\&. "
.ti -1c
.RI "static const \fBColor\fP \fBTransparent\fP"
.br
.RI "Transparent (black) predefined color\&. "
.in -1c
.SS "Related Symbols"
(Note that these are not member symbols\&.) 
.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (const \fBColor\fP &left, const \fBColor\fP &right)"
.br
.RI "Overload of the == operator\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBColor\fP &left, const \fBColor\fP &right)"
.br
.RI "Overload of the != operator\&. "
.ti -1c
.RI "\fBColor\fP \fBoperator+\fP (const \fBColor\fP &left, const \fBColor\fP &right)"
.br
.RI "Overload of the binary + operator\&. "
.ti -1c
.RI "\fBColor\fP \fBoperator\-\fP (const \fBColor\fP &left, const \fBColor\fP &right)"
.br
.RI "Overload of the binary - operator\&. "
.ti -1c
.RI "\fBColor\fP \fBoperator*\fP (const \fBColor\fP &left, const \fBColor\fP &right)"
.br
.RI "Overload of the binary * operator\&. "
.ti -1c
.RI "\fBColor\fP & \fBoperator+=\fP (\fBColor\fP &left, const \fBColor\fP &right)"
.br
.RI "Overload of the binary += operator\&. "
.ti -1c
.RI "\fBColor\fP & \fBoperator\-=\fP (\fBColor\fP &left, const \fBColor\fP &right)"
.br
.RI "Overload of the binary -= operator\&. "
.ti -1c
.RI "\fBColor\fP & \fBoperator*=\fP (\fBColor\fP &left, const \fBColor\fP &right)"
.br
.RI "Overload of the binary *= operator\&. "
.in -1c
.SH "Detailed Description"
.PP 
Utility class for manipulating RGBA colors\&. 

\fBsf::Color\fP is a simple color class composed of 4 components:
.PP
.PD 0
.IP "\(bu" 1
Red 
.IP "\(bu" 1
Green 
.IP "\(bu" 1
Blue 
.IP "\(bu" 1
Alpha (opacity)
.PP
Each component is a public member, an unsigned integer in the range [0, 255]\&. Thus, colors can be constructed and manipulated very easily:
.PP
.PP
.nf
sf::Color color(255, 0, 0); // red
color\&.r = 0;                // make it black
color\&.b = 128;              // make it dark blue
.fi
.PP
.PP
The fourth component of colors, named 'alpha', represents the opacity of the color\&. A color with an alpha value of 255 will be fully opaque, while an alpha value of 0 will make a color fully transparent, whatever the value of the other components is\&.
.PP
The most common colors are already defined as static variables: 
.PP
.nf
sf::Color black       = sf::Color::Black;
sf::Color white       = sf::Color::White;
sf::Color red         = sf::Color::Red;
sf::Color green       = sf::Color::Green;
sf::Color blue        = sf::Color::Blue;
sf::Color yellow      = sf::Color::Yellow;
sf::Color magenta     = sf::Color::Magenta;
sf::Color cyan        = sf::Color::Cyan;
sf::Color transparent = sf::Color::Transparent;

.fi
.PP
.PP
Colors can also be added and modulated (multiplied) using the overloaded operators + and *\&. 
.PP
Definition at line \fB40\fP of file \fBColor\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Color::Color ()"

.PP
Default constructor\&. Constructs an opaque black color\&. It is equivalent to \fBsf::Color(0, 0, 0, 255)\fP\&. 
.SS "sf::Color::Color (Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha = \fR255\fP)"

.PP
Construct the color from its 4 RGBA components\&. 
.PP
\fBParameters\fP
.RS 4
\fIred\fP Red component (in the range [0, 255]) 
.br
\fIgreen\fP Green component (in the range [0, 255]) 
.br
\fIblue\fP Blue component (in the range [0, 255]) 
.br
\fIalpha\fP Alpha (opacity) component (in the range [0, 255]) 
.RE
.PP

.SS "sf::Color::Color (Uint32 color)\fR [explicit]\fP"

.PP
Construct the color from 32-bit unsigned integer\&. 
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP Number containing the RGBA components (in that order) 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "Uint32 sf::Color::toInteger () const"

.PP
Retrieve the color as a 32-bit unsigned integer\&. 
.PP
\fBReturns\fP
.RS 4
\fBColor\fP represented as a 32-bit unsigned integer 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "bool operator!= (const \fBColor\fP & left, const \fBColor\fP & right)\fR [related]\fP"

.PP
Overload of the != operator\&. This operator compares two colors and check if they are different\&.
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand 
.br
\fIright\fP Right operand
.RE
.PP
\fBReturns\fP
.RS 4
True if colors are different, false if they are equal 
.RE
.PP

.SS "\fBColor\fP operator* (const \fBColor\fP & left, const \fBColor\fP & right)\fR [related]\fP"

.PP
Overload of the binary * operator\&. This operator returns the component-wise multiplication (also called 'modulation') of two colors\&. Components are then divided by 255 so that the result is still in the range [0, 255]\&.
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand 
.br
\fIright\fP Right operand
.RE
.PP
\fBReturns\fP
.RS 4
Result of \fIleft\fP * \fIright\fP 
.RE
.PP

.SS "\fBColor\fP & operator*= (\fBColor\fP & left, const \fBColor\fP & right)\fR [related]\fP"

.PP
Overload of the binary *= operator\&. This operator returns the component-wise multiplication (also called 'modulation') of two colors, and assigns the result to the left operand\&. Components are then divided by 255 so that the result is still in the range [0, 255]\&.
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand 
.br
\fIright\fP Right operand
.RE
.PP
\fBReturns\fP
.RS 4
Reference to \fIleft\fP 
.RE
.PP

.SS "\fBColor\fP operator+ (const \fBColor\fP & left, const \fBColor\fP & right)\fR [related]\fP"

.PP
Overload of the binary + operator\&. This operator returns the component-wise sum of two colors\&. Components that exceed 255 are clamped to 255\&.
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand 
.br
\fIright\fP Right operand
.RE
.PP
\fBReturns\fP
.RS 4
Result of \fIleft\fP + \fIright\fP 
.RE
.PP

.SS "\fBColor\fP & operator+= (\fBColor\fP & left, const \fBColor\fP & right)\fR [related]\fP"

.PP
Overload of the binary += operator\&. This operator computes the component-wise sum of two colors, and assigns the result to the left operand\&. Components that exceed 255 are clamped to 255\&.
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand 
.br
\fIright\fP Right operand
.RE
.PP
\fBReturns\fP
.RS 4
Reference to \fIleft\fP 
.RE
.PP

.SS "\fBColor\fP operator\- (const \fBColor\fP & left, const \fBColor\fP & right)\fR [related]\fP"

.PP
Overload of the binary - operator\&. This operator returns the component-wise subtraction of two colors\&. Components below 0 are clamped to 0\&.
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand 
.br
\fIright\fP Right operand
.RE
.PP
\fBReturns\fP
.RS 4
Result of \fIleft\fP - \fIright\fP 
.RE
.PP

.SS "\fBColor\fP & operator\-= (\fBColor\fP & left, const \fBColor\fP & right)\fR [related]\fP"

.PP
Overload of the binary -= operator\&. This operator computes the component-wise subtraction of two colors, and assigns the result to the left operand\&. Components below 0 are clamped to 0\&.
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand 
.br
\fIright\fP Right operand
.RE
.PP
\fBReturns\fP
.RS 4
Reference to \fIleft\fP 
.RE
.PP

.SS "bool operator== (const \fBColor\fP & left, const \fBColor\fP & right)\fR [related]\fP"

.PP
Overload of the == operator\&. This operator compares two colors and check if they are equal\&.
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand 
.br
\fIright\fP Right operand
.RE
.PP
\fBReturns\fP
.RS 4
True if colors are equal, false if they are different 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "Uint8 sf::Color::a"

.PP
Alpha (opacity) component\&. 
.PP
Definition at line \fB99\fP of file \fBColor\&.hpp\fP\&.
.SS "Uint8 sf::Color::b"

.PP
Blue component\&. 
.PP
Definition at line \fB98\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::Black\fR [static]\fP"

.PP
Black predefined color\&. 
.PP
Definition at line \fB83\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::Blue\fR [static]\fP"

.PP
Blue predefined color\&. 
.PP
Definition at line \fB87\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::Cyan\fR [static]\fP"

.PP
Cyan predefined color\&. 
.PP
Definition at line \fB90\fP of file \fBColor\&.hpp\fP\&.
.SS "Uint8 sf::Color::g"

.PP
Green component\&. 
.PP
Definition at line \fB97\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::Green\fR [static]\fP"

.PP
Green predefined color\&. 
.PP
Definition at line \fB86\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::Magenta\fR [static]\fP"

.PP
Magenta predefined color\&. 
.PP
Definition at line \fB89\fP of file \fBColor\&.hpp\fP\&.
.SS "Uint8 sf::Color::r"

.PP
Red component\&. 
.PP
Definition at line \fB96\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::Red\fR [static]\fP"

.PP
Red predefined color\&. 
.PP
Definition at line \fB85\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::Transparent\fR [static]\fP"

.PP
Transparent (black) predefined color\&. 
.PP
Definition at line \fB91\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::White\fR [static]\fP"

.PP
White predefined color\&. 
.PP
Definition at line \fB84\fP of file \fBColor\&.hpp\fP\&.
.SS "const \fBColor\fP sf::Color::Yellow\fR [static]\fP"

.PP
Yellow predefined color\&. 
.PP
Definition at line \fB88\fP of file \fBColor\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
