.TH "sf::TcpSocket" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::TcpSocket \- Specialized socket using the TCP protocol\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Network/TcpSocket\&.hpp>\fP
.PP
Inherits \fBsf::Socket\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBStatus\fP { \fBDone\fP, \fBNotReady\fP, \fBPartial\fP, \fBDisconnected\fP, \fBError\fP }"
.br
.RI "Status codes that may be returned by socket functions\&. "
.ti -1c
.RI "enum { \fBAnyPort\fP = 0 }"
.br
.RI "Some special values used by sockets\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTcpSocket\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "unsigned short \fBgetLocalPort\fP () const"
.br
.RI "Get the port to which the socket is bound locally\&. "
.ti -1c
.RI "\fBIpAddress\fP \fBgetRemoteAddress\fP () const"
.br
.RI "Get the address of the connected peer\&. "
.ti -1c
.RI "unsigned short \fBgetRemotePort\fP () const"
.br
.RI "Get the port of the connected peer to which the socket is connected\&. "
.ti -1c
.RI "\fBStatus\fP \fBconnect\fP (const \fBIpAddress\fP &remoteAddress, unsigned short remotePort, \fBTime\fP timeout=\fBTime::Zero\fP)"
.br
.RI "Connect the socket to a remote peer\&. "
.ti -1c
.RI "void \fBdisconnect\fP ()"
.br
.RI "Disconnect the socket from its remote peer\&. "
.ti -1c
.RI "\fBStatus\fP \fBsend\fP (const void *data, std::size_t size)"
.br
.RI "Send raw data to the remote peer\&. "
.ti -1c
.RI "\fBStatus\fP \fBsend\fP (const void *data, std::size_t size, std::size_t &sent)"
.br
.RI "Send raw data to the remote peer\&. "
.ti -1c
.RI "\fBStatus\fP \fBreceive\fP (void *data, std::size_t size, std::size_t &received)"
.br
.RI "Receive raw data from the remote peer\&. "
.ti -1c
.RI "\fBStatus\fP \fBsend\fP (\fBPacket\fP &packet)"
.br
.RI "Send a formatted packet of data to the remote peer\&. "
.ti -1c
.RI "\fBStatus\fP \fBreceive\fP (\fBPacket\fP &packet)"
.br
.RI "Receive a formatted packet of data from the remote peer\&. "
.ti -1c
.RI "void \fBsetBlocking\fP (bool blocking)"
.br
.RI "Set the blocking state of the socket\&. "
.ti -1c
.RI "bool \fBisBlocking\fP () const"
.br
.RI "Tell whether the socket is in blocking or non-blocking mode\&. "
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum \fBType\fP { \fBTcp\fP, \fBUdp\fP }"
.br
.RI "Types of protocols that the socket can use\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "SocketHandle \fBgetHandle\fP () const"
.br
.RI "Return the internal handle of the socket\&. "
.ti -1c
.RI "void \fBcreate\fP ()"
.br
.RI "Create the internal representation of the socket\&. "
.ti -1c
.RI "void \fBcreate\fP (SocketHandle handle)"
.br
.RI "Create the internal representation of the socket from a socket handle\&. "
.ti -1c
.RI "void \fBclose\fP ()"
.br
.RI "Close the socket gracefully\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBTcpListener\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Specialized socket using the TCP protocol\&. 

TCP is a connected protocol, which means that a TCP socket can only communicate with the host it is connected to\&.
.PP
It can't send or receive anything if it is not connected\&.
.PP
The TCP protocol is reliable but adds a slight overhead\&. It ensures that your data will always be received in order and without errors (no data corrupted, lost or duplicated)\&.
.PP
When a socket is connected to a remote host, you can retrieve informations about this host with the getRemoteAddress and getRemotePort functions\&. You can also get the local port to which the socket is bound (which is automatically chosen when the socket is connected), with the getLocalPort function\&.
.PP
Sending and receiving data can use either the low-level or the high-level functions\&. The low-level functions process a raw sequence of bytes, and cannot ensure that one call to Send will exactly match one call to Receive at the other end of the socket\&.
.PP
The high-level interface uses packets (see \fBsf::Packet\fP), which are easier to use and provide more safety regarding the data that is exchanged\&. You can look at the \fBsf::Packet\fP class to get more details about how they work\&.
.PP
The socket is automatically disconnected when it is destroyed, but if you want to explicitly close the connection while the socket instance is still alive, you can call disconnect\&.
.PP
Usage example: 
.PP
.nf
// \-\-\-\-\- The client \-\-\-\-\-

// Create a socket and connect it to 192\&.168\&.1\&.50 on port 55001
sf::TcpSocket socket;
socket\&.connect("192\&.168\&.1\&.50", 55001);

// Send a message to the connected host
std::string message = "Hi, I am a client";
socket\&.send(message\&.c_str(), message\&.size() + 1);

// Receive an answer from the server
char buffer[1024];
std::size_t received = 0;
socket\&.receive(buffer, sizeof(buffer), received);
std::cout << "The server said: " << buffer << std::endl;

// \-\-\-\-\- The server \-\-\-\-\-

// Create a listener to wait for incoming connections on port 55001
sf::TcpListener listener;
listener\&.listen(55001);

// Wait for a connection
sf::TcpSocket socket;
listener\&.accept(socket);
std::cout << "New client connected: " << socket\&.getRemoteAddress() << std::endl;

// Receive a message from the client
char buffer[1024];
std::size_t received = 0;
socket\&.receive(buffer, sizeof(buffer), received);
std::cout << "The client said: " << buffer << std::endl;

// Send an answer
std::string message = "Welcome, client";
socket\&.send(message\&.c_str(), message\&.size() + 1);

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Socket\fP, \fBsf::UdpSocket\fP, \fBsf::Packet\fP 
.RE
.PP

.PP
Definition at line \fB46\fP of file \fBTcpSocket\&.hpp\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "anonymous enum\fR [inherited]\fP"

.PP
Some special values used by sockets\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAnyPort \fP\fP
Special value that tells the system to pick any available port\&. 
.PP
Definition at line \fB66\fP of file \fBSocket\&.hpp\fP\&.
.SS "enum \fBsf::Socket::Status\fP\fR [inherited]\fP"

.PP
Status codes that may be returned by socket functions\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDone \fP\fP
The socket has sent / received the data\&. 
.TP
\fB\fINotReady \fP\fP
The socket is not ready to send / receive data yet\&. 
.TP
\fB\fIPartial \fP\fP
The socket sent a part of the data\&. 
.TP
\fB\fIDisconnected \fP\fP
The TCP socket has been disconnected\&. 
.TP
\fB\fIError \fP\fP
An unexpected error happened\&. 
.PP
Definition at line \fB53\fP of file \fBSocket\&.hpp\fP\&.
.SS "enum \fBsf::Socket::Type\fP\fR [protected]\fP, \fR [inherited]\fP"

.PP
Types of protocols that the socket can use\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITcp \fP\fP
TCP protocol\&. 
.TP
\fB\fIUdp \fP\fP
UDP protocol\&. 
.PP
Definition at line \fB114\fP of file \fBSocket\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::TcpSocket::TcpSocket ()"

.PP
Default constructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void sf::Socket::close ()\fR [protected]\fP, \fR [inherited]\fP"

.PP
Close the socket gracefully\&. This function can only be accessed by derived classes\&. 
.SS "\fBStatus\fP sf::TcpSocket::connect (const \fBIpAddress\fP & remoteAddress, unsigned short remotePort, \fBTime\fP timeout = \fR\fBTime::Zero\fP\fP)"

.PP
Connect the socket to a remote peer\&. In blocking mode, this function may take a while, especially if the remote peer is not reachable\&. The last parameter allows you to stop trying to connect after a given timeout\&. If the socket is already connected, the connection is forcibly disconnected before attempting to connect again\&.
.PP
\fBParameters\fP
.RS 4
\fIremoteAddress\fP Address of the remote peer 
.br
\fIremotePort\fP Port of the remote peer 
.br
\fItimeout\fP Optional maximum time to wait
.RE
.PP
\fBReturns\fP
.RS 4
Status code
.RE
.PP
\fBSee also\fP
.RS 4
\fBdisconnect\fP 
.RE
.PP

.SS "void sf::Socket::create ()\fR [protected]\fP, \fR [inherited]\fP"

.PP
Create the internal representation of the socket\&. This function can only be accessed by derived classes\&. 
.SS "void sf::Socket::create (SocketHandle handle)\fR [protected]\fP, \fR [inherited]\fP"

.PP
Create the internal representation of the socket from a socket handle\&. This function can only be accessed by derived classes\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP OS-specific handle of the socket to wrap 
.RE
.PP

.SS "void sf::TcpSocket::disconnect ()"

.PP
Disconnect the socket from its remote peer\&. This function gracefully closes the connection\&. If the socket is not connected, this function has no effect\&.
.PP
\fBSee also\fP
.RS 4
\fBconnect\fP 
.RE
.PP

.SS "SocketHandle sf::Socket::getHandle () const\fR [protected]\fP, \fR [inherited]\fP"

.PP
Return the internal handle of the socket\&. The returned handle may be invalid if the socket was not created yet (or already destroyed)\&. This function can only be accessed by derived classes\&.
.PP
\fBReturns\fP
.RS 4
The internal (OS-specific) handle of the socket 
.RE
.PP

.SS "unsigned short sf::TcpSocket::getLocalPort () const"

.PP
Get the port to which the socket is bound locally\&. If the socket is not connected, this function returns 0\&.
.PP
\fBReturns\fP
.RS 4
Port to which the socket is bound
.RE
.PP
\fBSee also\fP
.RS 4
\fBconnect\fP, \fBgetRemotePort\fP 
.RE
.PP

.SS "\fBIpAddress\fP sf::TcpSocket::getRemoteAddress () const"

.PP
Get the address of the connected peer\&. If the socket is not connected, this function returns \fBsf::IpAddress::None\fP\&.
.PP
\fBReturns\fP
.RS 4
Address of the remote peer
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetRemotePort\fP 
.RE
.PP

.SS "unsigned short sf::TcpSocket::getRemotePort () const"

.PP
Get the port of the connected peer to which the socket is connected\&. If the socket is not connected, this function returns 0\&.
.PP
\fBReturns\fP
.RS 4
Remote port to which the socket is connected
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetRemoteAddress\fP 
.RE
.PP

.SS "bool sf::Socket::isBlocking () const\fR [inherited]\fP"

.PP
Tell whether the socket is in blocking or non-blocking mode\&. 
.PP
\fBReturns\fP
.RS 4
True if the socket is blocking, false otherwise
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetBlocking\fP 
.RE
.PP

.SS "\fBStatus\fP sf::TcpSocket::receive (\fBPacket\fP & packet)"

.PP
Receive a formatted packet of data from the remote peer\&. In blocking mode, this function will wait until the whole packet has been received\&. This function will fail if the socket is not connected\&.
.PP
\fBParameters\fP
.RS 4
\fIpacket\fP \fBPacket\fP to fill with the received data
.RE
.PP
\fBReturns\fP
.RS 4
Status code
.RE
.PP
\fBSee also\fP
.RS 4
\fBsend\fP 
.RE
.PP

.SS "\fBStatus\fP sf::TcpSocket::receive (void * data, std::size_t size, std::size_t & received)"

.PP
Receive raw data from the remote peer\&. In blocking mode, this function will wait until some bytes are actually received\&. This function will fail if the socket is not connected\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to the array to fill with the received bytes 
.br
\fIsize\fP Maximum number of bytes that can be received 
.br
\fIreceived\fP This variable is filled with the actual number of bytes received
.RE
.PP
\fBReturns\fP
.RS 4
Status code
.RE
.PP
\fBSee also\fP
.RS 4
\fBsend\fP 
.RE
.PP

.SS "\fBStatus\fP sf::TcpSocket::send (const void * data, std::size_t size)"

.PP
Send raw data to the remote peer\&. To be able to handle partial sends over non-blocking sockets, use the \fBsend(const void*, std::size_t, std::size_t&)\fP overload instead\&. This function will fail if the socket is not connected\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to the sequence of bytes to send 
.br
\fIsize\fP Number of bytes to send
.RE
.PP
\fBReturns\fP
.RS 4
Status code
.RE
.PP
\fBSee also\fP
.RS 4
\fBreceive\fP 
.RE
.PP

.SS "\fBStatus\fP sf::TcpSocket::send (const void * data, std::size_t size, std::size_t & sent)"

.PP
Send raw data to the remote peer\&. This function will fail if the socket is not connected\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to the sequence of bytes to send 
.br
\fIsize\fP Number of bytes to send 
.br
\fIsent\fP The number of bytes sent will be written here
.RE
.PP
\fBReturns\fP
.RS 4
Status code
.RE
.PP
\fBSee also\fP
.RS 4
\fBreceive\fP 
.RE
.PP

.SS "\fBStatus\fP sf::TcpSocket::send (\fBPacket\fP & packet)"

.PP
Send a formatted packet of data to the remote peer\&. In non-blocking mode, if this function returns \fBsf::Socket::Partial\fP, you \fImust\fP retry sending the same unmodified packet before sending anything else in order to guarantee the packet arrives at the remote peer uncorrupted\&. This function will fail if the socket is not connected\&.
.PP
\fBParameters\fP
.RS 4
\fIpacket\fP \fBPacket\fP to send
.RE
.PP
\fBReturns\fP
.RS 4
Status code
.RE
.PP
\fBSee also\fP
.RS 4
\fBreceive\fP 
.RE
.PP

.SS "void sf::Socket::setBlocking (bool blocking)\fR [inherited]\fP"

.PP
Set the blocking state of the socket\&. In blocking mode, calls will not return until they have completed their task\&. For example, a call to Receive in blocking mode won't return until some data was actually received\&. In non-blocking mode, calls will always return immediately, using the return code to signal whether there was data available or not\&. By default, all sockets are blocking\&.
.PP
\fBParameters\fP
.RS 4
\fIblocking\fP True to set the socket as blocking, false for non-blocking
.RE
.PP
\fBSee also\fP
.RS 4
\fBisBlocking\fP 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "friend class \fBTcpListener\fP\fR [friend]\fP"

.PP
Definition at line \fB213\fP of file \fBTcpSocket\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
