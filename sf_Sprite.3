.TH "sf::Sprite" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Sprite \- \fBDrawable\fP representation of a texture, with its own transformations, color, etc\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/Sprite\&.hpp>\fP
.PP
Inherits \fBsf::Drawable\fP, and \fBsf::Transformable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSprite\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBSprite\fP (const \fBTexture\fP &texture)"
.br
.RI "Construct the sprite from a source texture\&. "
.ti -1c
.RI "\fBSprite\fP (const \fBTexture\fP &texture, const \fBIntRect\fP &rectangle)"
.br
.RI "Construct the sprite from a sub-rectangle of a source texture\&. "
.ti -1c
.RI "void \fBsetTexture\fP (const \fBTexture\fP &texture, bool resetRect=false)"
.br
.RI "Change the source texture of the sprite\&. "
.ti -1c
.RI "void \fBsetTextureRect\fP (const \fBIntRect\fP &rectangle)"
.br
.RI "Set the sub-rectangle of the texture that the sprite will display\&. "
.ti -1c
.RI "void \fBsetColor\fP (const \fBColor\fP &color)"
.br
.RI "Set the global color of the sprite\&. "
.ti -1c
.RI "const \fBTexture\fP * \fBgetTexture\fP () const"
.br
.RI "Get the source texture of the sprite\&. "
.ti -1c
.RI "const \fBIntRect\fP & \fBgetTextureRect\fP () const"
.br
.RI "Get the sub-rectangle of the texture displayed by the sprite\&. "
.ti -1c
.RI "const \fBColor\fP & \fBgetColor\fP () const"
.br
.RI "Get the global color of the sprite\&. "
.ti -1c
.RI "\fBFloatRect\fP \fBgetLocalBounds\fP () const"
.br
.RI "Get the local bounding rectangle of the entity\&. "
.ti -1c
.RI "\fBFloatRect\fP \fBgetGlobalBounds\fP () const"
.br
.RI "Get the global bounding rectangle of the entity\&. "
.ti -1c
.RI "void \fBsetPosition\fP (float x, float y)"
.br
.RI "set the position of the object "
.ti -1c
.RI "void \fBsetPosition\fP (const \fBVector2f\fP &position)"
.br
.RI "set the position of the object "
.ti -1c
.RI "void \fBsetRotation\fP (float angle)"
.br
.RI "set the orientation of the object "
.ti -1c
.RI "void \fBsetScale\fP (float factorX, float factorY)"
.br
.RI "set the scale factors of the object "
.ti -1c
.RI "void \fBsetScale\fP (const \fBVector2f\fP &factors)"
.br
.RI "set the scale factors of the object "
.ti -1c
.RI "void \fBsetOrigin\fP (float x, float y)"
.br
.RI "set the local origin of the object "
.ti -1c
.RI "void \fBsetOrigin\fP (const \fBVector2f\fP &origin)"
.br
.RI "set the local origin of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetPosition\fP () const"
.br
.RI "get the position of the object "
.ti -1c
.RI "float \fBgetRotation\fP () const"
.br
.RI "get the orientation of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetScale\fP () const"
.br
.RI "get the current scale of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetOrigin\fP () const"
.br
.RI "get the local origin of the object "
.ti -1c
.RI "void \fBmove\fP (float offsetX, float offsetY)"
.br
.RI "Move the object by a given offset\&. "
.ti -1c
.RI "void \fBmove\fP (const \fBVector2f\fP &offset)"
.br
.RI "Move the object by a given offset\&. "
.ti -1c
.RI "void \fBrotate\fP (float angle)"
.br
.RI "Rotate the object\&. "
.ti -1c
.RI "void \fBscale\fP (float factorX, float factorY)"
.br
.RI "Scale the object\&. "
.ti -1c
.RI "void \fBscale\fP (const \fBVector2f\fP &factor)"
.br
.RI "Scale the object\&. "
.ti -1c
.RI "const \fBTransform\fP & \fBgetTransform\fP () const"
.br
.RI "get the combined transform of the object "
.ti -1c
.RI "const \fBTransform\fP & \fBgetInverseTransform\fP () const"
.br
.RI "get the inverse of the combined transform of the object "
.in -1c
.SH "Detailed Description"
.PP 
\fBDrawable\fP representation of a texture, with its own transformations, color, etc\&. 

\fBsf::Sprite\fP is a drawable class that allows to easily display a texture (or a part of it) on a render target\&.
.PP
It inherits all the functions from \fBsf::Transformable\fP: position, rotation, scale, origin\&. It also adds sprite-specific properties such as the texture to use, the part of it to display, and some convenience functions to change the overall color of the sprite, or to get its bounding rectangle\&.
.PP
\fBsf::Sprite\fP works in combination with the \fBsf::Texture\fP class, which loads and provides the pixel data of a given texture\&.
.PP
The separation of \fBsf::Sprite\fP and \fBsf::Texture\fP allows more flexibility and better performances: indeed a \fBsf::Texture\fP is a heavy resource, and any operation on it is slow (often too slow for real-time applications)\&. On the other side, a \fBsf::Sprite\fP is a lightweight object which can use the pixel data of a \fBsf::Texture\fP and draw it with its own transformation/color/blending attributes\&.
.PP
It is important to note that the \fBsf::Sprite\fP instance doesn't copy the texture that it uses, it only keeps a reference to it\&. Thus, a \fBsf::Texture\fP must not be destroyed while it is used by a \fBsf::Sprite\fP (i\&.e\&. never write a function that uses a local \fBsf::Texture\fP instance for creating a sprite)\&.
.PP
See also the note on coordinates and undistorted rendering in \fBsf::Transformable\fP\&.
.PP
Usage example: 
.PP
.nf
// Declare and load a texture
sf::Texture texture;
texture\&.loadFromFile("texture\&.png");

// Create a sprite
sf::Sprite sprite;
sprite\&.setTexture(texture);
sprite\&.setTextureRect(sf::IntRect(10, 10, 50, 30));
sprite\&.setColor(sf::Color(255, 255, 255, 200));
sprite\&.setPosition(100, 25);

// Draw it
window\&.draw(sprite);

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Texture\fP, \fBsf::Transformable\fP 
.RE
.PP

.PP
Definition at line \fB47\fP of file \fBSprite\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Sprite::Sprite ()"

.PP
Default constructor\&. Creates an empty sprite with no source texture\&. 
.SS "sf::Sprite::Sprite (const \fBTexture\fP & texture)\fR [explicit]\fP"

.PP
Construct the sprite from a source texture\&. 
.PP
\fBParameters\fP
.RS 4
\fItexture\fP Source texture
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTexture\fP 
.RE
.PP

.SS "sf::Sprite::Sprite (const \fBTexture\fP & texture, const \fBIntRect\fP & rectangle)"

.PP
Construct the sprite from a sub-rectangle of a source texture\&. 
.PP
\fBParameters\fP
.RS 4
\fItexture\fP Source texture 
.br
\fIrectangle\fP Sub-rectangle of the texture to assign to the sprite
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTexture\fP, \fBsetTextureRect\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "const \fBColor\fP & sf::Sprite::getColor () const"

.PP
Get the global color of the sprite\&. 
.PP
\fBReturns\fP
.RS 4
Global color of the sprite
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetColor\fP 
.RE
.PP

.SS "\fBFloatRect\fP sf::Sprite::getGlobalBounds () const"

.PP
Get the global bounding rectangle of the entity\&. The returned rectangle is in global coordinates, which means that it takes into account the transformations (translation, rotation, scale, \&.\&.\&.) that are applied to the entity\&. In other words, this function returns the bounds of the sprite in the global 2D world's coordinate system\&.
.PP
\fBReturns\fP
.RS 4
Global bounding rectangle of the entity 
.RE
.PP

.SS "const \fBTransform\fP & sf::Transformable::getInverseTransform () const\fR [inherited]\fP"

.PP
get the inverse of the combined transform of the object 
.PP
\fBReturns\fP
.RS 4
Inverse of the combined transformations applied to the object
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetTransform\fP 
.RE
.PP

.SS "\fBFloatRect\fP sf::Sprite::getLocalBounds () const"

.PP
Get the local bounding rectangle of the entity\&. The returned rectangle is in local coordinates, which means that it ignores the transformations (translation, rotation, scale, \&.\&.\&.) that are applied to the entity\&. In other words, this function returns the bounds of the entity in the entity's coordinate system\&.
.PP
\fBReturns\fP
.RS 4
Local bounding rectangle of the entity 
.RE
.PP

.SS "const \fBVector2f\fP & sf::Transformable::getOrigin () const\fR [inherited]\fP"

.PP
get the local origin of the object 
.PP
\fBReturns\fP
.RS 4
Current origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetOrigin\fP 
.RE
.PP

.SS "const \fBVector2f\fP & sf::Transformable::getPosition () const\fR [inherited]\fP"

.PP
get the position of the object 
.PP
\fBReturns\fP
.RS 4
Current position
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "float sf::Transformable::getRotation () const\fR [inherited]\fP"

.PP
get the orientation of the object The rotation is always in the range [0, 360]\&.
.PP
\fBReturns\fP
.RS 4
Current rotation, in degrees
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetRotation\fP 
.RE
.PP

.SS "const \fBVector2f\fP & sf::Transformable::getScale () const\fR [inherited]\fP"

.PP
get the current scale of the object 
.PP
\fBReturns\fP
.RS 4
Current scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "const \fBTexture\fP * sf::Sprite::getTexture () const"

.PP
Get the source texture of the sprite\&. If the sprite has no source texture, a NULL pointer is returned\&. The returned pointer is const, which means that you can't modify the texture when you retrieve it with this function\&.
.PP
\fBReturns\fP
.RS 4
Pointer to the sprite's texture
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTexture\fP 
.RE
.PP

.SS "const \fBIntRect\fP & sf::Sprite::getTextureRect () const"

.PP
Get the sub-rectangle of the texture displayed by the sprite\&. 
.PP
\fBReturns\fP
.RS 4
\fBTexture\fP rectangle of the sprite
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTextureRect\fP 
.RE
.PP

.SS "const \fBTransform\fP & sf::Transformable::getTransform () const\fR [inherited]\fP"

.PP
get the combined transform of the object 
.PP
\fBReturns\fP
.RS 4
\fBTransform\fP combining the position/rotation/scale/origin of the object
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetInverseTransform\fP 
.RE
.PP

.SS "void sf::Transformable::move (const \fBVector2f\fP & offset)\fR [inherited]\fP"

.PP
Move the object by a given offset\&. This function adds to the current position of the object, unlike setPosition which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
object\&.setPosition(object\&.getPosition() + offset);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIoffset\fP Offset
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::move (float offsetX, float offsetY)\fR [inherited]\fP"

.PP
Move the object by a given offset\&. This function adds to the current position of the object, unlike setPosition which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f pos = object\&.getPosition();
object\&.setPosition(pos\&.x + offsetX, pos\&.y + offsetY);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIoffsetX\fP X offset 
.br
\fIoffsetY\fP Y offset
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::rotate (float angle)\fR [inherited]\fP"

.PP
Rotate the object\&. This function adds to the current rotation of the object, unlike setRotation which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
object\&.setRotation(object\&.getRotation() + angle);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIangle\fP Angle of rotation, in degrees 
.RE
.PP

.SS "void sf::Transformable::scale (const \fBVector2f\fP & factor)\fR [inherited]\fP"

.PP
Scale the object\&. This function multiplies the current scale of the object, unlike setScale which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f scale = object\&.getScale();
object\&.setScale(scale\&.x * factor\&.x, scale\&.y * factor\&.y);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIfactor\fP Scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "void sf::Transformable::scale (float factorX, float factorY)\fR [inherited]\fP"

.PP
Scale the object\&. This function multiplies the current scale of the object, unlike setScale which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f scale = object\&.getScale();
object\&.setScale(scale\&.x * factorX, scale\&.y * factorY);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIfactorX\fP Horizontal scale factor 
.br
\fIfactorY\fP Vertical scale factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "void sf::Sprite::setColor (const \fBColor\fP & color)"

.PP
Set the global color of the sprite\&. This color is modulated (multiplied) with the sprite's texture\&. It can be used to colorize the sprite, or change its global opacity\&. By default, the sprite's color is opaque white\&.
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP New color of the sprite
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetColor\fP 
.RE
.PP

.SS "void sf::Transformable::setOrigin (const \fBVector2f\fP & origin)\fR [inherited]\fP"

.PP
set the local origin of the object The origin of an object defines the center point for all transformations (position, scale, rotation)\&. The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation)\&. The default origin of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIorigin\fP New origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOrigin\fP 
.RE
.PP

.SS "void sf::Transformable::setOrigin (float x, float y)\fR [inherited]\fP"

.PP
set the local origin of the object The origin of an object defines the center point for all transformations (position, scale, rotation)\&. The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation)\&. The default origin of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP X coordinate of the new origin 
.br
\fIy\fP Y coordinate of the new origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOrigin\fP 
.RE
.PP

.SS "void sf::Transformable::setPosition (const \fBVector2f\fP & position)\fR [inherited]\fP"

.PP
set the position of the object This function completely overwrites the previous position\&. See the move function to apply an offset based on the previous position instead\&. The default position of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP New position
.RE
.PP
\fBSee also\fP
.RS 4
\fBmove\fP, \fBgetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::setPosition (float x, float y)\fR [inherited]\fP"

.PP
set the position of the object This function completely overwrites the previous position\&. See the move function to apply an offset based on the previous position instead\&. The default position of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP X coordinate of the new position 
.br
\fIy\fP Y coordinate of the new position
.RE
.PP
\fBSee also\fP
.RS 4
\fBmove\fP, \fBgetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::setRotation (float angle)\fR [inherited]\fP"

.PP
set the orientation of the object This function completely overwrites the previous rotation\&. See the rotate function to add an angle based on the previous rotation instead\&. The default rotation of a transformable object is 0\&.
.PP
\fBParameters\fP
.RS 4
\fIangle\fP New rotation, in degrees
.RE
.PP
\fBSee also\fP
.RS 4
\fBrotate\fP, \fBgetRotation\fP 
.RE
.PP

.SS "void sf::Transformable::setScale (const \fBVector2f\fP & factors)\fR [inherited]\fP"

.PP
set the scale factors of the object This function completely overwrites the previous scale\&. See the scale function to add a factor based on the previous scale instead\&. The default scale of a transformable object is (1, 1)\&.
.PP
\fBParameters\fP
.RS 4
\fIfactors\fP New scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBscale\fP, \fBgetScale\fP 
.RE
.PP

.SS "void sf::Transformable::setScale (float factorX, float factorY)\fR [inherited]\fP"

.PP
set the scale factors of the object This function completely overwrites the previous scale\&. See the scale function to add a factor based on the previous scale instead\&. The default scale of a transformable object is (1, 1)\&.
.PP
\fBParameters\fP
.RS 4
\fIfactorX\fP New horizontal scale factor 
.br
\fIfactorY\fP New vertical scale factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBscale\fP, \fBgetScale\fP 
.RE
.PP

.SS "void sf::Sprite::setTexture (const \fBTexture\fP & texture, bool resetRect = \fRfalse\fP)"

.PP
Change the source texture of the sprite\&. The \fItexture\fP argument refers to a texture that must exist as long as the sprite uses it\&. Indeed, the sprite doesn't store its own copy of the texture, but rather keeps a pointer to the one that you passed to this function\&. If the source texture is destroyed and the sprite tries to use it, the behavior is undefined\&. If \fIresetRect\fP is true, the TextureRect property of the sprite is automatically adjusted to the size of the new texture\&. If it is false, the texture rect is left unchanged\&.
.PP
\fBParameters\fP
.RS 4
\fItexture\fP New texture 
.br
\fIresetRect\fP Should the texture rect be reset to the size of the new texture?
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetTexture\fP, \fBsetTextureRect\fP 
.RE
.PP

.SS "void sf::Sprite::setTextureRect (const \fBIntRect\fP & rectangle)"

.PP
Set the sub-rectangle of the texture that the sprite will display\&. The texture rect is useful when you don't want to display the whole texture, but rather a part of it\&. By default, the texture rect covers the entire texture\&.
.PP
\fBParameters\fP
.RS 4
\fIrectangle\fP Rectangle defining the region of the texture to display
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetTextureRect\fP, \fBsetTexture\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
