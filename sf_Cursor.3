.TH "sf::Cursor" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Cursor \- \fBCursor\fP defines the appearance of a system cursor\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Window/Cursor\&.hpp>\fP
.PP
Inherits \fBsf::NonCopyable\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBType\fP { \fBArrow\fP, \fBArrowWait\fP, \fBWait\fP, \fBText\fP, \fBHand\fP, \fBSizeHorizontal\fP, \fBSizeVertical\fP, \fBSizeTopLeftBottomRight\fP, \fBSizeBottomLeftTopRight\fP, \fBSizeLeft\fP, \fBSizeRight\fP, \fBSizeTop\fP, \fBSizeBottom\fP, \fBSizeTopLeft\fP, \fBSizeBottomRight\fP, \fBSizeBottomLeft\fP, \fBSizeTopRight\fP, \fBSizeAll\fP, \fBCross\fP, \fBHelp\fP, \fBNotAllowed\fP }"
.br
.RI "Enumeration of the native system cursor types\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCursor\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fB~Cursor\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "bool \fBloadFromPixels\fP (const Uint8 *pixels, \fBVector2u\fP size, \fBVector2u\fP hotspot)"
.br
.RI "Create a cursor with the provided image\&. "
.ti -1c
.RI "bool \fBloadFromSystem\fP (\fBType\fP type)"
.br
.RI "Create a native system cursor\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBWindowBase\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBCursor\fP defines the appearance of a system cursor\&. 


.PP
\fBWarning\fP
.RS 4
Features related to \fBCursor\fP are not supported on iOS and Android\&.
.RE
.PP
This class abstracts the operating system resources associated with either a native system cursor or a custom cursor\&.
.PP
After loading the cursor the graphical appearance with either \fBloadFromPixels()\fP or \fBloadFromSystem()\fP, the cursor can be changed with \fBsf::Window::setMouseCursor()\fP\&.
.PP
The behaviour is undefined if the cursor is destroyed while in use by the window\&.
.PP
Usage example: 
.PP
.nf
sf::Window window;

// \&.\&.\&. create window as usual \&.\&.\&.

sf::Cursor cursor;
if (cursor\&.loadFromSystem(sf::Cursor::Hand))
    window\&.setMouseCursor(cursor);

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Window::setMouseCursor\fP 
.RE
.PP

.PP
Definition at line \fB46\fP of file \fBCursor\&.hpp\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBsf::Cursor::Type\fP"

.PP
Enumeration of the native system cursor types\&. Refer to the following table to determine which cursor is available on which platform\&.
.PP
Type   Linux   Mac OS X   Windows    \fBsf::Cursor::Arrow\fP   yes   yes   yes    \fBsf::Cursor::ArrowWait\fP   no   no   yes    \fBsf::Cursor::Wait\fP   yes   no   yes    \fBsf::Cursor::Text\fP   yes   yes   yes    \fBsf::Cursor::Hand\fP   yes   yes   yes    \fBsf::Cursor::SizeHorizontal\fP   yes   yes   yes    \fBsf::Cursor::SizeVertical\fP   yes   yes   yes    \fBsf::Cursor::SizeTopLeftBottomRight\fP   no   yes*   yes    \fBsf::Cursor::SizeBottomLeftTopRight\fP   no   yes*   yes    \fBsf::Cursor::SizeLeft\fP   yes   yes**   yes**    \fBsf::Cursor::SizeRight\fP   yes   yes**   yes**    \fBsf::Cursor::SizeTop\fP   yes   yes**   yes**    \fBsf::Cursor::SizeBottom\fP   yes   yes**   yes**    \fBsf::Cursor::SizeTopLeft\fP   yes   yes**   yes**    \fBsf::Cursor::SizeTopRight\fP   yes   yes**   yes**    \fBsf::Cursor::SizeBottomLeft\fP   yes   yes**   yes**    \fBsf::Cursor::SizeBottomRight\fP   yes   yes**   yes**    \fBsf::Cursor::SizeAll\fP   yes   no   yes    \fBsf::Cursor::Cross\fP   yes   yes   yes    \fBsf::Cursor::Help\fP   yes   yes*   yes    \fBsf::Cursor::NotAllowed\fP   yes   yes   yes   
.PP
.IP "\(bu" 2
These cursor types are undocumented so may not be available on all versions, but have been tested on 10\&.13
.PP
.PP
** On Windows and macOS, double-headed arrows are used 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIArrow \fP\fP
Arrow cursor (default) 
.TP
\fB\fIArrowWait \fP\fP
Busy arrow cursor\&. 
.TP
\fB\fIWait \fP\fP
Busy cursor\&. 
.TP
\fB\fIText \fP\fP
I-beam, cursor when hovering over a field allowing text entry\&. 
.TP
\fB\fIHand \fP\fP
Pointing hand cursor\&. 
.TP
\fB\fISizeHorizontal \fP\fP
Horizontal double arrow cursor\&. 
.TP
\fB\fISizeVertical \fP\fP
Vertical double arrow cursor\&. 
.TP
\fB\fISizeTopLeftBottomRight \fP\fP
Double arrow cursor going from top-left to bottom-right\&. 
.TP
\fB\fISizeBottomLeftTopRight \fP\fP
Double arrow cursor going from bottom-left to top-right\&. 
.TP
\fB\fISizeLeft \fP\fP
Left arrow cursor on Linux, same as SizeHorizontal on other platforms\&. 
.TP
\fB\fISizeRight \fP\fP
Right arrow cursor on Linux, same as SizeHorizontal on other platforms\&. 
.TP
\fB\fISizeTop \fP\fP
Up arrow cursor on Linux, same as SizeVertical on other platforms\&. 
.TP
\fB\fISizeBottom \fP\fP
Down arrow cursor on Linux, same as SizeVertical on other platforms\&. 
.TP
\fB\fISizeTopLeft \fP\fP
Top-left arrow cursor on Linux, same as SizeTopLeftBottomRight on other platforms\&. 
.TP
\fB\fISizeBottomRight \fP\fP
Bottom-right arrow cursor on Linux, same as SizeTopLeftBottomRight on other platforms\&. 
.TP
\fB\fISizeBottomLeft \fP\fP
Bottom-left arrow cursor on Linux, same as SizeBottomLeftTopRight on other platforms\&. 
.TP
\fB\fISizeTopRight \fP\fP
Top-right arrow cursor on Linux, same as SizeBottomLeftTopRight on other platforms\&. 
.TP
\fB\fISizeAll \fP\fP
Combination of SizeHorizontal and SizeVertical\&. 
.TP
\fB\fICross \fP\fP
Crosshair cursor\&. 
.TP
\fB\fIHelp \fP\fP
Help cursor\&. 
.TP
\fB\fINotAllowed \fP\fP
Action not allowed cursor\&. 
.PP
Definition at line \fB86\fP of file \fBCursor\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Cursor::Cursor ()"

.PP
Default constructor\&. This constructor doesn't actually create the cursor; initially the new instance is invalid and must not be used until either \fBloadFromPixels()\fP or \fBloadFromSystem()\fP is called and successfully created a cursor\&. 
.SS "sf::Cursor::~Cursor ()"

.PP
Destructor\&. This destructor releases the system resources associated with this cursor, if any\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool sf::Cursor::loadFromPixels (const Uint8 * pixels, \fBVector2u\fP size, \fBVector2u\fP hotspot)"

.PP
Create a cursor with the provided image\&. \fIpixels\fP must be an array of \fIwidth\fP by \fIheight\fP pixels in 32-bit RGBA format\&. If not, this will cause undefined behavior\&.
.PP
If \fIpixels\fP is null or either \fIwidth\fP or \fIheight\fP are 0, the current cursor is left unchanged and the function will return false\&.
.PP
In addition to specifying the pixel data, you can also specify the location of the hotspot of the cursor\&. The hotspot is the pixel coordinate within the cursor image which will be located exactly where the mouse pointer position is\&. Any mouse actions that are performed will return the window/screen location of the hotspot\&.
.PP
\fBWarning\fP
.RS 4
On Unix platforms which do not support colored cursors, the pixels are mapped into a monochrome bitmap: pixels with an alpha channel to 0 are transparent, black if the RGB channel are close to zero, and white otherwise\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIpixels\fP Array of pixels of the image 
.br
\fIsize\fP Width and height of the image 
.br
\fIhotspot\fP (x,y) location of the hotspot 
.RE
.PP
\fBReturns\fP
.RS 4
true if the cursor was successfully loaded; false otherwise 
.RE
.PP

.SS "bool sf::Cursor::loadFromSystem (\fBType\fP type)"

.PP
Create a native system cursor\&. Refer to the list of cursor available on each system (see \fBsf::Cursor::Type\fP) to know whether a given cursor is expected to load successfully or is not supported by the operating system\&.
.PP
\fBParameters\fP
.RS 4
\fItype\fP Native system cursor type 
.RE
.PP
\fBReturns\fP
.RS 4
true if and only if the corresponding cursor is natively supported by the operating system; false otherwise 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "friend class \fBWindowBase\fP\fR [friend]\fP"

.PP
Definition at line \fB183\fP of file \fBCursor\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
