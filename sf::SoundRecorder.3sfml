.TH "sf::SoundRecorder" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::SoundRecorder \- Abstract base class for capturing sound data\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Audio/SoundRecorder\&.hpp>\fP
.PP
Inherits \fBsf::AlResource\fP\&.
.PP
Inherited by \fBsf::SoundBufferRecorder\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoundRecorder\fP ()"
.br
.RI "destructor "
.ti -1c
.RI "bool \fBstart\fP (unsigned int sampleRate=44100)"
.br
.RI "Start the capture\&. "
.ti -1c
.RI "void \fBstop\fP ()"
.br
.RI "Stop the capture\&. "
.ti -1c
.RI "unsigned int \fBgetSampleRate\fP () const"
.br
.RI "Get the sample rate\&. "
.ti -1c
.RI "bool \fBsetDevice\fP (const std::string &name)"
.br
.RI "Set the audio capture device\&. "
.ti -1c
.RI "const std::string & \fBgetDevice\fP () const"
.br
.RI "Get the name of the current audio capture device\&. "
.ti -1c
.RI "void \fBsetChannelCount\fP (unsigned int channelCount)"
.br
.RI "Set the channel count of the audio capture device\&. "
.ti -1c
.RI "unsigned int \fBgetChannelCount\fP () const"
.br
.RI "Get the number of channels used by this recorder\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static std::vector< std::string > \fBgetAvailableDevices\fP ()"
.br
.RI "Get a list of the names of all available audio capture devices\&. "
.ti -1c
.RI "static std::string \fBgetDefaultDevice\fP ()"
.br
.RI "Get the name of the default audio capture device\&. "
.ti -1c
.RI "static bool \fBisAvailable\fP ()"
.br
.RI "Check if the system supports audio capture\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSoundRecorder\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "void \fBsetProcessingInterval\fP (\fBTime\fP interval)"
.br
.RI "Set the processing interval\&. "
.ti -1c
.RI "virtual bool \fBonStart\fP ()"
.br
.RI "Start capturing audio data\&. "
.ti -1c
.RI "virtual bool \fBonProcessSamples\fP (const Int16 *samples, std::size_t sampleCount)=0"
.br
.RI "Process a new chunk of recorded samples\&. "
.ti -1c
.RI "virtual void \fBonStop\fP ()"
.br
.RI "Stop capturing audio data\&. "
.in -1c
.SH "Detailed Description"
.PP 
Abstract base class for capturing sound data\&. 

\fBsf::SoundBuffer\fP provides a simple interface to access the audio recording capabilities of the computer (the microphone)\&.
.PP
As an abstract base class, it only cares about capturing sound samples, the task of making something useful with them is left to the derived class\&. Note that SFML provides a built-in specialization for saving the captured data to a sound buffer (see \fBsf::SoundBufferRecorder\fP)\&.
.PP
A derived class has only one virtual function to override: 
.PD 0
.IP "\(bu" 1
onProcessSamples provides the new chunks of audio samples while the capture happens
.PP
Moreover, two additional virtual functions can be overridden as well if necessary: 
.PD 0
.IP "\(bu" 1
onStart is called before the capture happens, to perform custom initializations 
.IP "\(bu" 1
onStop is called after the capture ends, to perform custom cleanup
.PP
A derived class can also control the frequency of the onProcessSamples calls, with the setProcessingInterval protected function\&. The default interval is chosen so that recording thread doesn't consume too much CPU, but it can be changed to a smaller value if you need to process the recorded data in real time, for example\&.
.PP
The audio capture feature may not be supported or activated on every platform, thus it is recommended to check its availability with the \fBisAvailable()\fP function\&. If it returns false, then any attempt to use an audio recorder will fail\&.
.PP
If you have multiple sound input devices connected to your computer (for example: microphone, external soundcard, webcam mic, \&.\&.\&.) you can get a list of all available devices through the \fBgetAvailableDevices()\fP function\&. You can then select a device by calling \fBsetDevice()\fP with the appropriate device\&. Otherwise the default capturing device will be used\&.
.PP
By default the recording is in 16-bit mono\&. Using the setChannelCount method you can change the number of channels used by the audio capture device to record\&. Note that you have to decide whether you want to record in mono or stereo before starting the recording\&.
.PP
It is important to note that the audio capture happens in a separate thread, so that it doesn't block the rest of the program\&. In particular, the onProcessSamples virtual function (but not onStart and not onStop) will be called from this separate thread\&. It is important to keep this in mind, because you may have to take care of synchronization issues if you share data between threads\&. Another thing to bear in mind is that you must call \fBstop()\fP in the destructor of your derived class, so that the recording thread finishes before your object is destroyed\&.
.PP
Usage example: 
.PP
.nf
class CustomRecorder : public sf::SoundRecorder
{
public:
    ~CustomRecorder()
    {
        // Make sure to stop the recording thread
        stop();
    }

private:
    virtual bool onStart() // optional
    {
        // Initialize whatever has to be done before the capture starts
        \&.\&.\&.

        // Return true to start playing
        return true;
    }

    virtual bool onProcessSamples(const sf::Int16* samples, std::size_t sampleCount)
    {
        // Do something with the new chunk of samples (store them, send them, \&.\&.\&.)
        \&.\&.\&.

        // Return true to continue playing
        return true;
    }

    virtual void onStop() // optional
    {
        // Clean up whatever has to be done after the capture ends
        \&.\&.\&.
    }
};

// Usage
if (CustomRecorder::isAvailable())
{
    CustomRecorder recorder;

    if (!recorder\&.start())
        return \-1;

    \&.\&.\&.
    recorder\&.stop();
}

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::SoundBufferRecorder\fP 
.RE
.PP

.PP
Definition at line \fB45\fP of file \fBSoundRecorder\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual sf::SoundRecorder::~SoundRecorder ()\fR [virtual]\fP"

.PP
destructor 
.SS "sf::SoundRecorder::SoundRecorder ()\fR [protected]\fP"

.PP
Default constructor\&. This constructor is only meant to be called by derived classes\&. 
.SH "Member Function Documentation"
.PP 
.SS "static std::vector< std::string > sf::SoundRecorder::getAvailableDevices ()\fR [static]\fP"

.PP
Get a list of the names of all available audio capture devices\&. This function returns a vector of strings, containing the names of all available audio capture devices\&.
.PP
\fBReturns\fP
.RS 4
A vector of strings containing the names 
.RE
.PP

.SS "unsigned int sf::SoundRecorder::getChannelCount () const"

.PP
Get the number of channels used by this recorder\&. Currently only mono and stereo are supported, so the value is either 1 (for mono) or 2 (for stereo)\&.
.PP
\fBReturns\fP
.RS 4
Number of channels
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetChannelCount\fP 
.RE
.PP

.SS "static std::string sf::SoundRecorder::getDefaultDevice ()\fR [static]\fP"

.PP
Get the name of the default audio capture device\&. This function returns the name of the default audio capture device\&. If none is available, an empty string is returned\&.
.PP
\fBReturns\fP
.RS 4
The name of the default audio capture device 
.RE
.PP

.SS "const std::string & sf::SoundRecorder::getDevice () const"

.PP
Get the name of the current audio capture device\&. 
.PP
\fBReturns\fP
.RS 4
The name of the current audio capture device 
.RE
.PP

.SS "unsigned int sf::SoundRecorder::getSampleRate () const"

.PP
Get the sample rate\&. The sample rate defines the number of audio samples captured per second\&. The higher, the better the quality (for example, 44100 samples/sec is CD quality)\&.
.PP
\fBReturns\fP
.RS 4
Sample rate, in samples per second 
.RE
.PP

.SS "static bool sf::SoundRecorder::isAvailable ()\fR [static]\fP"

.PP
Check if the system supports audio capture\&. This function should always be called before using the audio capture features\&. If it returns false, then any attempt to use \fBsf::SoundRecorder\fP or one of its derived classes will fail\&.
.PP
\fBReturns\fP
.RS 4
True if audio capture is supported, false otherwise 
.RE
.PP

.SS "virtual bool sf::SoundRecorder::onProcessSamples (const Int16 * samples, std::size_t sampleCount)\fR [protected]\fP, \fR [pure virtual]\fP"

.PP
Process a new chunk of recorded samples\&. This virtual function is called every time a new chunk of recorded data is available\&. The derived class can then do whatever it wants with it (storing it, playing it, sending it over the network, etc\&.)\&.
.PP
\fBParameters\fP
.RS 4
\fIsamples\fP Pointer to the new chunk of recorded samples 
.br
\fIsampleCount\fP Number of samples pointed by \fIsamples\fP 
.RE
.PP
\fBReturns\fP
.RS 4
True to continue the capture, or false to stop it 
.RE
.PP

.PP
Implemented in \fBsf::SoundBufferRecorder\fP\&.
.SS "virtual bool sf::SoundRecorder::onStart ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Start capturing audio data\&. This virtual function may be overridden by a derived class if something has to be done every time a new capture starts\&. If not, this function can be ignored; the default implementation does nothing\&.
.PP
\fBReturns\fP
.RS 4
True to start the capture, or false to abort it 
.RE
.PP

.PP
Reimplemented in \fBsf::SoundBufferRecorder\fP\&.
.SS "virtual void sf::SoundRecorder::onStop ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Stop capturing audio data\&. This virtual function may be overridden by a derived class if something has to be done every time the capture ends\&. If not, this function can be ignored; the default implementation does nothing\&. 
.PP
Reimplemented in \fBsf::SoundBufferRecorder\fP\&.
.SS "void sf::SoundRecorder::setChannelCount (unsigned int channelCount)"

.PP
Set the channel count of the audio capture device\&. This method allows you to specify the number of channels used for recording\&. Currently only 16-bit mono and 16-bit stereo are supported\&.
.PP
\fBParameters\fP
.RS 4
\fIchannelCount\fP Number of channels\&. Currently only mono (1) and stereo (2) are supported\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetChannelCount\fP 
.RE
.PP

.SS "bool sf::SoundRecorder::setDevice (const std::string & name)"

.PP
Set the audio capture device\&. This function sets the audio capture device to the device with the given \fIname\fP\&. It can be called on the fly (i\&.e: while recording)\&. If you do so while recording and opening the device fails, it stops the recording\&.
.PP
\fBParameters\fP
.RS 4
\fIname\fP The name of the audio capture device
.RE
.PP
\fBReturns\fP
.RS 4
True, if it was able to set the requested device
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetAvailableDevices\fP, \fBgetDefaultDevice\fP 
.RE
.PP

.SS "void sf::SoundRecorder::setProcessingInterval (\fBTime\fP interval)\fR [protected]\fP"

.PP
Set the processing interval\&. The processing interval controls the period between calls to the onProcessSamples function\&. You may want to use a small interval if you want to process the recorded data in real time, for example\&.
.PP
Note: this is only a hint, the actual period may vary\&. So don't rely on this parameter to implement precise timing\&.
.PP
The default processing interval is 100 ms\&.
.PP
\fBParameters\fP
.RS 4
\fIinterval\fP Processing interval 
.RE
.PP

.SS "bool sf::SoundRecorder::start (unsigned int sampleRate = \fR44100\fP)"

.PP
Start the capture\&. The \fIsampleRate\fP parameter defines the number of audio samples captured per second\&. The higher, the better the quality (for example, 44100 samples/sec is CD quality)\&. This function uses its own thread so that it doesn't block the rest of the program while the capture runs\&. Please note that only one capture can happen at the same time\&. You can select which capture device will be used, by passing the name to the \fBsetDevice()\fP method\&. If none was selected before, the default capture device will be used\&. You can get a list of the names of all available capture devices by calling \fBgetAvailableDevices()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIsampleRate\fP Desired capture rate, in number of samples per second
.RE
.PP
\fBReturns\fP
.RS 4
True, if start of capture was successful
.RE
.PP
\fBSee also\fP
.RS 4
\fBstop\fP, \fBgetAvailableDevices\fP 
.RE
.PP

.SS "void sf::SoundRecorder::stop ()"

.PP
Stop the capture\&. 
.PP
\fBSee also\fP
.RS 4
\fBstart\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
