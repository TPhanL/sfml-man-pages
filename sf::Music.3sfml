.TH "sf::Music" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Music \- Streamed music played from an audio file\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Audio/Music\&.hpp>\fP
.PP
Inherits \fBsf::SoundStream\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSpan\fP"
.br
.RI "Structure defining a time range using the template type\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBSpan\fP< \fBTime\fP > \fBTimeSpan\fP"
.br
.ti -1c
.RI "enum \fBStatus\fP { \fBStopped\fP, \fBPaused\fP, \fBPlaying\fP }"
.br
.RI "Enumeration of the sound source states\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMusic\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fB~Music\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "bool \fBopenFromFile\fP (const std::string &filename)"
.br
.RI "Open a music from an audio file\&. "
.ti -1c
.RI "bool \fBopenFromMemory\fP (const void *data, std::size_t sizeInBytes)"
.br
.RI "Open a music from an audio file in memory\&. "
.ti -1c
.RI "bool \fBopenFromStream\fP (\fBInputStream\fP &stream)"
.br
.RI "Open a music from an audio file in a custom stream\&. "
.ti -1c
.RI "\fBTime\fP \fBgetDuration\fP () const"
.br
.RI "Get the total duration of the music\&. "
.ti -1c
.RI "\fBTimeSpan\fP \fBgetLoopPoints\fP () const"
.br
.RI "Get the positions of the of the sound's looping sequence\&. "
.ti -1c
.RI "void \fBsetLoopPoints\fP (\fBTimeSpan\fP timePoints)"
.br
.RI "Sets the beginning and duration of the sound's looping sequence using \fBsf::Time\fP\&. "
.ti -1c
.RI "void \fBplay\fP ()"
.br
.RI "Start or resume playing the audio stream\&. "
.ti -1c
.RI "void \fBpause\fP ()"
.br
.RI "Pause the audio stream\&. "
.ti -1c
.RI "void \fBstop\fP ()"
.br
.RI "Stop playing the audio stream\&. "
.ti -1c
.RI "unsigned int \fBgetChannelCount\fP () const"
.br
.RI "Return the number of channels of the stream\&. "
.ti -1c
.RI "unsigned int \fBgetSampleRate\fP () const"
.br
.RI "Get the stream sample rate of the stream\&. "
.ti -1c
.RI "\fBStatus\fP \fBgetStatus\fP () const"
.br
.RI "Get the current status of the stream (stopped, paused, playing) "
.ti -1c
.RI "void \fBsetPlayingOffset\fP (\fBTime\fP timeOffset)"
.br
.RI "Change the current playing position of the stream\&. "
.ti -1c
.RI "\fBTime\fP \fBgetPlayingOffset\fP () const"
.br
.RI "Get the current playing position of the stream\&. "
.ti -1c
.RI "void \fBsetLoop\fP (bool loop)"
.br
.RI "Set whether or not the stream should loop after reaching the end\&. "
.ti -1c
.RI "bool \fBgetLoop\fP () const"
.br
.RI "Tell whether or not the stream is in loop mode\&. "
.ti -1c
.RI "void \fBsetPitch\fP (float pitch)"
.br
.RI "Set the pitch of the sound\&. "
.ti -1c
.RI "void \fBsetVolume\fP (float volume)"
.br
.RI "Set the volume of the sound\&. "
.ti -1c
.RI "void \fBsetPosition\fP (float x, float y, float z)"
.br
.RI "Set the 3D position of the sound in the audio scene\&. "
.ti -1c
.RI "void \fBsetPosition\fP (const \fBVector3f\fP &position)"
.br
.RI "Set the 3D position of the sound in the audio scene\&. "
.ti -1c
.RI "void \fBsetRelativeToListener\fP (bool relative)"
.br
.RI "Make the sound's position relative to the listener or absolute\&. "
.ti -1c
.RI "void \fBsetMinDistance\fP (float distance)"
.br
.RI "Set the minimum distance of the sound\&. "
.ti -1c
.RI "void \fBsetAttenuation\fP (float attenuation)"
.br
.RI "Set the attenuation factor of the sound\&. "
.ti -1c
.RI "float \fBgetPitch\fP () const"
.br
.RI "Get the pitch of the sound\&. "
.ti -1c
.RI "float \fBgetVolume\fP () const"
.br
.RI "Get the volume of the sound\&. "
.ti -1c
.RI "\fBVector3f\fP \fBgetPosition\fP () const"
.br
.RI "Get the 3D position of the sound in the audio scene\&. "
.ti -1c
.RI "bool \fBisRelativeToListener\fP () const"
.br
.RI "Tell whether the sound's position is relative to the listener or is absolute\&. "
.ti -1c
.RI "float \fBgetMinDistance\fP () const"
.br
.RI "Get the minimum distance of the sound\&. "
.ti -1c
.RI "float \fBgetAttenuation\fP () const"
.br
.RI "Get the attenuation factor of the sound\&. "
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum { \fBNoLoop\fP = -1 }"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBonGetData\fP (\fBChunk\fP &data)"
.br
.RI "Request a new chunk of audio samples from the stream source\&. "
.ti -1c
.RI "virtual void \fBonSeek\fP (\fBTime\fP timeOffset)"
.br
.RI "Change the current playing position in the stream source\&. "
.ti -1c
.RI "virtual Int64 \fBonLoop\fP ()"
.br
.RI "Change the current playing position in the stream source to the loop offset\&. "
.ti -1c
.RI "void \fBinitialize\fP (unsigned int channelCount, unsigned int sampleRate)"
.br
.RI "Define the audio stream parameters\&. "
.ti -1c
.RI "void \fBsetProcessingInterval\fP (\fBTime\fP interval)"
.br
.RI "Set the processing interval\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "unsigned int \fBm_source\fP"
.br
.RI "OpenAL source identifier\&. "
.in -1c
.SH "Detailed Description"
.PP 
Streamed music played from an audio file\&. 

Musics are sounds that are streamed rather than completely loaded in memory\&.
.PP
This is especially useful for compressed musics that usually take hundreds of MB when they are uncompressed: by streaming it instead of loading it entirely, you avoid saturating the memory and have almost no loading delay\&. This implies that the underlying resource (file, stream or memory buffer) must remain valid for the lifetime of the \fBsf::Music\fP object\&.
.PP
Apart from that, a \fBsf::Music\fP has almost the same features as the \fBsf::SoundBuffer\fP / \fBsf::Sound\fP pair: you can play/pause/stop it, request its parameters (channels, sample rate), change the way it is played (pitch, volume, 3D position, \&.\&.\&.), etc\&.
.PP
As a sound stream, a music is played in its own thread in order not to block the rest of the program\&. This means that you can leave the music alone after calling \fBplay()\fP, it will manage itself very well\&.
.PP
Usage example: 
.PP
.nf
// Declare a new music
sf::Music music;

// Open it from an audio file
if (!music\&.openFromFile("music\&.ogg"))
{
    // error\&.\&.\&.
}

// Change some parameters
music\&.setPosition(0, 1, 10); // change its 3D position
music\&.setPitch(2);           // increase the pitch
music\&.setVolume(50);         // reduce the volume
music\&.setLoop(true);         // make it loop

// Play it
music\&.play();

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Sound\fP, \fBsf::SoundStream\fP 
.RE
.PP

.PP
Definition at line \fB48\fP of file \fBMusic\&.hpp\fP\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBSpan\fP<\fBTime\fP> \fBsf::Music::TimeSpan\fP"

.PP
Definition at line \fB87\fP of file \fBMusic\&.hpp\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "anonymous enum\fR [protected]\fP, \fR [inherited]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINoLoop \fP\fP
'Invalid' endSeeks value, telling us to continue uninterrupted 
.PP
Definition at line \fB183\fP of file \fBSoundStream\&.hpp\fP\&.
.SS "enum \fBsf::SoundSource::Status\fP\fR [inherited]\fP"

.PP
Enumeration of the sound source states\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIStopped \fP\fP
\fBSound\fP is not playing\&. 
.TP
\fB\fIPaused \fP\fP
\fBSound\fP is paused\&. 
.TP
\fB\fIPlaying \fP\fP
\fBSound\fP is playing\&. 
.PP
Definition at line \fB50\fP of file \fBSoundSource\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Music::Music ()"

.PP
Default constructor\&. 
.SS "sf::Music::~Music ()"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "float sf::SoundSource::getAttenuation () const\fR [inherited]\fP"

.PP
Get the attenuation factor of the sound\&. 
.PP
\fBReturns\fP
.RS 4
Attenuation factor of the sound
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetAttenuation\fP, \fBgetMinDistance\fP 
.RE
.PP

.SS "unsigned int sf::SoundStream::getChannelCount () const\fR [inherited]\fP"

.PP
Return the number of channels of the stream\&. 1 channel means a mono sound, 2 means stereo, etc\&.
.PP
\fBReturns\fP
.RS 4
Number of channels 
.RE
.PP

.SS "\fBTime\fP sf::Music::getDuration () const"

.PP
Get the total duration of the music\&. 
.PP
\fBReturns\fP
.RS 4
\fBMusic\fP duration 
.RE
.PP

.SS "bool sf::SoundStream::getLoop () const\fR [inherited]\fP"

.PP
Tell whether or not the stream is in loop mode\&. 
.PP
\fBReturns\fP
.RS 4
True if the stream is looping, false otherwise
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetLoop\fP 
.RE
.PP

.SS "\fBTimeSpan\fP sf::Music::getLoopPoints () const"

.PP
Get the positions of the of the sound's looping sequence\&. 
.PP
\fBReturns\fP
.RS 4
Loop \fBTime\fP position class\&.
.RE
.PP
\fBWarning\fP
.RS 4
Since \fBsetLoopPoints()\fP performs some adjustments on the provided values and rounds them to internal samples, a call to \fBgetLoopPoints()\fP is not guaranteed to return the same times passed into a previous call to \fBsetLoopPoints()\fP\&. However, it is guaranteed to return times that will map to the valid internal samples of this \fBMusic\fP if they are later passed to \fBsetLoopPoints()\fP\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetLoopPoints\fP 
.RE
.PP

.SS "float sf::SoundSource::getMinDistance () const\fR [inherited]\fP"

.PP
Get the minimum distance of the sound\&. 
.PP
\fBReturns\fP
.RS 4
Minimum distance of the sound
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetMinDistance\fP, \fBgetAttenuation\fP 
.RE
.PP

.SS "float sf::SoundSource::getPitch () const\fR [inherited]\fP"

.PP
Get the pitch of the sound\&. 
.PP
\fBReturns\fP
.RS 4
Pitch of the sound
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPitch\fP 
.RE
.PP

.SS "\fBTime\fP sf::SoundStream::getPlayingOffset () const\fR [inherited]\fP"

.PP
Get the current playing position of the stream\&. 
.PP
\fBReturns\fP
.RS 4
Current playing position, from the beginning of the stream
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPlayingOffset\fP 
.RE
.PP

.SS "\fBVector3f\fP sf::SoundSource::getPosition () const\fR [inherited]\fP"

.PP
Get the 3D position of the sound in the audio scene\&. 
.PP
\fBReturns\fP
.RS 4
Position of the sound
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "unsigned int sf::SoundStream::getSampleRate () const\fR [inherited]\fP"

.PP
Get the stream sample rate of the stream\&. The sample rate is the number of audio samples played per second\&. The higher, the better the quality\&.
.PP
\fBReturns\fP
.RS 4
Sample rate, in number of samples per second 
.RE
.PP

.SS "\fBStatus\fP sf::SoundStream::getStatus () const\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Get the current status of the stream (stopped, paused, playing) 
.PP
\fBReturns\fP
.RS 4
Current status 
.RE
.PP

.PP
Reimplemented from \fBsf::SoundSource\fP\&.
.SS "float sf::SoundSource::getVolume () const\fR [inherited]\fP"

.PP
Get the volume of the sound\&. 
.PP
\fBReturns\fP
.RS 4
Volume of the sound, in the range [0, 100]
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetVolume\fP 
.RE
.PP

.SS "void sf::SoundStream::initialize (unsigned int channelCount, unsigned int sampleRate)\fR [protected]\fP, \fR [inherited]\fP"

.PP
Define the audio stream parameters\&. This function must be called by derived classes as soon as they know the audio settings of the stream to play\&. Any attempt to manipulate the stream (\fBplay()\fP, \&.\&.\&.) before calling this function will fail\&. It can be called multiple times if the settings of the audio stream change, but only when the stream is stopped\&.
.PP
\fBParameters\fP
.RS 4
\fIchannelCount\fP Number of channels of the stream 
.br
\fIsampleRate\fP Sample rate, in samples per second 
.RE
.PP

.SS "bool sf::SoundSource::isRelativeToListener () const\fR [inherited]\fP"

.PP
Tell whether the sound's position is relative to the listener or is absolute\&. 
.PP
\fBReturns\fP
.RS 4
True if the position is relative, false if it's absolute
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetRelativeToListener\fP 
.RE
.PP

.SS "virtual bool sf::Music::onGetData (\fBChunk\fP & data)\fR [protected]\fP, \fR [virtual]\fP"

.PP
Request a new chunk of audio samples from the stream source\&. This function fills the chunk from the next samples to read from the audio file\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Chunk of data to fill
.RE
.PP
\fBReturns\fP
.RS 4
True to continue playback, false to stop 
.RE
.PP

.PP
Implements \fBsf::SoundStream\fP\&.
.SS "virtual Int64 sf::Music::onLoop ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Change the current playing position in the stream source to the loop offset\&. This is called by the underlying \fBSoundStream\fP whenever it needs us to reset the seek position for a loop\&. We then determine whether we are looping on a loop point or the end-of-file, perform the seek, and return the new position\&.
.PP
\fBReturns\fP
.RS 4
The seek position after looping (or -1 if there's no loop) 
.RE
.PP

.PP
Reimplemented from \fBsf::SoundStream\fP\&.
.SS "virtual void sf::Music::onSeek (\fBTime\fP timeOffset)\fR [protected]\fP, \fR [virtual]\fP"

.PP
Change the current playing position in the stream source\&. 
.PP
\fBParameters\fP
.RS 4
\fItimeOffset\fP New playing position, from the beginning of the music 
.RE
.PP

.PP
Implements \fBsf::SoundStream\fP\&.
.SS "bool sf::Music::openFromFile (const std::string & filename)"

.PP
Open a music from an audio file\&. This function doesn't start playing the music (call \fBplay()\fP to do so)\&. See the documentation of \fBsf::InputSoundFile\fP for the list of supported formats\&.
.PP
\fBWarning\fP
.RS 4
Since the music is not loaded at once but rather streamed continuously, the file must remain accessible until the \fBsf::Music\fP object loads a new music or is destroyed\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path of the music file to open
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBopenFromMemory\fP, \fBopenFromStream\fP 
.RE
.PP

.SS "bool sf::Music::openFromMemory (const void * data, std::size_t sizeInBytes)"

.PP
Open a music from an audio file in memory\&. This function doesn't start playing the music (call \fBplay()\fP to do so)\&. See the documentation of \fBsf::InputSoundFile\fP for the list of supported formats\&.
.PP
\fBWarning\fP
.RS 4
Since the music is not loaded at once but rather streamed continuously, the \fIdata\fP buffer must remain accessible until the \fBsf::Music\fP object loads a new music or is destroyed\&. That is, you can't deallocate the buffer right after calling this function\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to the file data in memory 
.br
\fIsizeInBytes\fP Size of the data to load, in bytes
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBopenFromFile\fP, \fBopenFromStream\fP 
.RE
.PP

.SS "bool sf::Music::openFromStream (\fBInputStream\fP & stream)"

.PP
Open a music from an audio file in a custom stream\&. This function doesn't start playing the music (call \fBplay()\fP to do so)\&. See the documentation of \fBsf::InputSoundFile\fP for the list of supported formats\&.
.PP
\fBWarning\fP
.RS 4
Since the music is not loaded at once but rather streamed continuously, the \fIstream\fP must remain accessible until the \fBsf::Music\fP object loads a new music or is destroyed\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIstream\fP Source stream to read from
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBopenFromFile\fP, \fBopenFromMemory\fP 
.RE
.PP

.SS "void sf::SoundStream::pause ()\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Pause the audio stream\&. This function pauses the stream if it was playing, otherwise (stream already paused or stopped) it has no effect\&.
.PP
\fBSee also\fP
.RS 4
\fBplay\fP, \fBstop\fP 
.RE
.PP

.PP
Implements \fBsf::SoundSource\fP\&.
.SS "void sf::SoundStream::play ()\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Start or resume playing the audio stream\&. This function starts the stream if it was stopped, resumes it if it was paused, and restarts it from the beginning if it was already playing\&. This function uses its own thread so that it doesn't block the rest of the program while the stream is played\&.
.PP
\fBSee also\fP
.RS 4
\fBpause\fP, \fBstop\fP 
.RE
.PP

.PP
Implements \fBsf::SoundSource\fP\&.
.SS "void sf::SoundSource::setAttenuation (float attenuation)\fR [inherited]\fP"

.PP
Set the attenuation factor of the sound\&. The attenuation is a multiplicative factor which makes the sound more or less loud according to its distance from the listener\&. An attenuation of 0 will produce a non-attenuated sound, i\&.e\&. its volume will always be the same whether it is heard from near or from far\&. On the other hand, an attenuation value such as 100 will make the sound fade out very quickly as it gets further from the listener\&. The default value of the attenuation is 1\&.
.PP
\fBParameters\fP
.RS 4
\fIattenuation\fP New attenuation factor of the sound
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetAttenuation\fP, \fBsetMinDistance\fP 
.RE
.PP

.SS "void sf::SoundStream::setLoop (bool loop)\fR [inherited]\fP"

.PP
Set whether or not the stream should loop after reaching the end\&. If set, the stream will restart from beginning after reaching the end and so on, until it is stopped or setLoop(false) is called\&. The default looping state for streams is false\&.
.PP
\fBParameters\fP
.RS 4
\fIloop\fP True to play in loop, false to play once
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetLoop\fP 
.RE
.PP

.SS "void sf::Music::setLoopPoints (\fBTimeSpan\fP timePoints)"

.PP
Sets the beginning and duration of the sound's looping sequence using \fBsf::Time\fP\&. \fBsetLoopPoints()\fP allows for specifying the beginning offset and the duration of the loop such that, when the music is enabled for looping, it will seamlessly seek to the beginning whenever it encounters the end of the duration\&. Valid ranges for timePoints\&.offset and timePoints\&.length are [0, Dur) and (0, Dur-offset] respectively, where Dur is the value returned by \fBgetDuration()\fP\&. Note that the EOF 'loop point' from the end to the beginning of the stream is still honored, in case the caller seeks to a point after the end of the loop range\&. This function can be safely called at any point after a stream is opened, and will be applied to a playing sound without affecting the current playing offset\&.
.PP
\fBWarning\fP
.RS 4
Setting the loop points while the stream's status is Paused will set its status to Stopped\&. The playing offset will be unaffected\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fItimePoints\fP The definition of the loop\&. Can be any time points within the sound's length
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetLoopPoints\fP 
.RE
.PP

.SS "void sf::SoundSource::setMinDistance (float distance)\fR [inherited]\fP"

.PP
Set the minimum distance of the sound\&. The 'minimum distance' of a sound is the maximum distance at which it is heard at its maximum volume\&. Further than the minimum distance, it will start to fade out according to its attenuation factor\&. A value of 0 ('inside the head
of the listener') is an invalid value and is forbidden\&. The default value of the minimum distance is 1\&.
.PP
\fBParameters\fP
.RS 4
\fIdistance\fP New minimum distance of the sound
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetMinDistance\fP, \fBsetAttenuation\fP 
.RE
.PP

.SS "void sf::SoundSource::setPitch (float pitch)\fR [inherited]\fP"

.PP
Set the pitch of the sound\&. The pitch represents the perceived fundamental frequency of a sound; thus you can make a sound more acute or grave by changing its pitch\&. A side effect of changing the pitch is to modify the playing speed of the sound as well\&. The default value for the pitch is 1\&.
.PP
\fBParameters\fP
.RS 4
\fIpitch\fP New pitch to apply to the sound
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetPitch\fP 
.RE
.PP

.SS "void sf::SoundStream::setPlayingOffset (\fBTime\fP timeOffset)\fR [inherited]\fP"

.PP
Change the current playing position of the stream\&. The playing position can be changed when the stream is either paused or playing\&. Changing the playing position when the stream is stopped has no effect, since playing the stream would reset its position\&.
.PP
\fBParameters\fP
.RS 4
\fItimeOffset\fP New playing position, from the beginning of the stream
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetPlayingOffset\fP 
.RE
.PP

.SS "void sf::SoundSource::setPosition (const \fBVector3f\fP & position)\fR [inherited]\fP"

.PP
Set the 3D position of the sound in the audio scene\&. Only sounds with one channel (mono sounds) can be spatialized\&. The default position of a sound is (0, 0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP Position of the sound in the scene
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetPosition\fP 
.RE
.PP

.SS "void sf::SoundSource::setPosition (float x, float y, float z)\fR [inherited]\fP"

.PP
Set the 3D position of the sound in the audio scene\&. Only sounds with one channel (mono sounds) can be spatialized\&. The default position of a sound is (0, 0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP X coordinate of the position of the sound in the scene 
.br
\fIy\fP Y coordinate of the position of the sound in the scene 
.br
\fIz\fP Z coordinate of the position of the sound in the scene
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetPosition\fP 
.RE
.PP

.SS "void sf::SoundStream::setProcessingInterval (\fBTime\fP interval)\fR [protected]\fP, \fR [inherited]\fP"

.PP
Set the processing interval\&. The processing interval controls the period at which the audio buffers are filled by calls to onGetData\&. A smaller interval may be useful for low-latency streams\&. Note that the given period is only a hint and the actual period may vary\&. The default processing interval is 10 ms\&.
.PP
\fBParameters\fP
.RS 4
\fIinterval\fP Processing interval 
.RE
.PP

.SS "void sf::SoundSource::setRelativeToListener (bool relative)\fR [inherited]\fP"

.PP
Make the sound's position relative to the listener or absolute\&. Making a sound relative to the listener will ensure that it will always be played the same way regardless of the position of the listener\&. This can be useful for non-spatialized sounds, sounds that are produced by the listener, or sounds attached to it\&. The default value is false (position is absolute)\&.
.PP
\fBParameters\fP
.RS 4
\fIrelative\fP True to set the position relative, false to set it absolute
.RE
.PP
\fBSee also\fP
.RS 4
\fBisRelativeToListener\fP 
.RE
.PP

.SS "void sf::SoundSource::setVolume (float volume)\fR [inherited]\fP"

.PP
Set the volume of the sound\&. The volume is a value between 0 (mute) and 100 (full volume)\&. The default value for the volume is 100\&.
.PP
\fBParameters\fP
.RS 4
\fIvolume\fP Volume of the sound
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetVolume\fP 
.RE
.PP

.SS "void sf::SoundStream::stop ()\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Stop playing the audio stream\&. This function stops the stream if it was playing or paused, and does nothing if it was already stopped\&. It also resets the playing position (unlike \fBpause()\fP)\&.
.PP
\fBSee also\fP
.RS 4
\fBplay\fP, \fBpause\fP 
.RE
.PP

.PP
Implements \fBsf::SoundSource\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "unsigned int sf::SoundSource::m_source\fR [protected]\fP, \fR [inherited]\fP"

.PP
OpenAL source identifier\&. 
.PP
Definition at line \fB309\fP of file \fBSoundSource\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
