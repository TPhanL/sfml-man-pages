.TH "sf::Shader" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Shader \- \fBShader\fP class (vertex, geometry and fragment)  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/Shader\&.hpp>\fP
.PP
Inherits \fBsf::GlResource\fP, and \fBsf::NonCopyable\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCurrentTextureType\fP"
.br
.RI "Special type that can be passed to \fBsetUniform()\fP, and that represents the texture of the object being drawn\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBType\fP { \fBVertex\fP, \fBGeometry\fP, \fBFragment\fP }"
.br
.RI "Types of shaders\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBShader\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fB~Shader\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "bool \fBloadFromFile\fP (const std::string &filename, \fBType\fP type)"
.br
.RI "Load the vertex, geometry or fragment shader from a file\&. "
.ti -1c
.RI "bool \fBloadFromFile\fP (const std::string &vertexShaderFilename, const std::string &fragmentShaderFilename)"
.br
.RI "Load both the vertex and fragment shaders from files\&. "
.ti -1c
.RI "bool \fBloadFromFile\fP (const std::string &vertexShaderFilename, const std::string &geometryShaderFilename, const std::string &fragmentShaderFilename)"
.br
.RI "Load the vertex, geometry and fragment shaders from files\&. "
.ti -1c
.RI "bool \fBloadFromMemory\fP (const std::string &shader, \fBType\fP type)"
.br
.RI "Load the vertex, geometry or fragment shader from a source code in memory\&. "
.ti -1c
.RI "bool \fBloadFromMemory\fP (const std::string &vertexShader, const std::string &fragmentShader)"
.br
.RI "Load both the vertex and fragment shaders from source codes in memory\&. "
.ti -1c
.RI "bool \fBloadFromMemory\fP (const std::string &vertexShader, const std::string &geometryShader, const std::string &fragmentShader)"
.br
.RI "Load the vertex, geometry and fragment shaders from source codes in memory\&. "
.ti -1c
.RI "bool \fBloadFromStream\fP (\fBInputStream\fP &stream, \fBType\fP type)"
.br
.RI "Load the vertex, geometry or fragment shader from a custom stream\&. "
.ti -1c
.RI "bool \fBloadFromStream\fP (\fBInputStream\fP &vertexShaderStream, \fBInputStream\fP &fragmentShaderStream)"
.br
.RI "Load both the vertex and fragment shaders from custom streams\&. "
.ti -1c
.RI "bool \fBloadFromStream\fP (\fBInputStream\fP &vertexShaderStream, \fBInputStream\fP &geometryShaderStream, \fBInputStream\fP &fragmentShaderStream)"
.br
.RI "Load the vertex, geometry and fragment shaders from custom streams\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, float x)"
.br
.RI "Specify value for \fRfloat\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Vec2\fP &vector)"
.br
.RI "Specify value for \fRvec2\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Vec3\fP &vector)"
.br
.RI "Specify value for \fRvec3\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Vec4\fP &vector)"
.br
.RI "Specify value for \fRvec4\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, int x)"
.br
.RI "Specify value for \fRint\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Ivec2\fP &vector)"
.br
.RI "Specify value for \fRivec2\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Ivec3\fP &vector)"
.br
.RI "Specify value for \fRivec3\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Ivec4\fP &vector)"
.br
.RI "Specify value for \fRivec4\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, bool x)"
.br
.RI "Specify value for \fRbool\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Bvec2\fP &vector)"
.br
.RI "Specify value for \fRbvec2\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Bvec3\fP &vector)"
.br
.RI "Specify value for \fRbvec3\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Bvec4\fP &vector)"
.br
.RI "Specify value for \fRbvec4\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Mat3\fP &matrix)"
.br
.RI "Specify value for \fRmat3\fP matrix\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBGlsl::Mat4\fP &matrix)"
.br
.RI "Specify value for \fRmat4\fP matrix\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, const \fBTexture\fP &texture)"
.br
.RI "Specify a texture as \fRsampler2D\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniform\fP (const std::string &name, \fBCurrentTextureType\fP)"
.br
.RI "Specify current texture as \fRsampler2D\fP uniform\&. "
.ti -1c
.RI "void \fBsetUniformArray\fP (const std::string &name, const float *scalarArray, std::size_t length)"
.br
.RI "Specify values for \fRfloat\fP[] array uniform\&. "
.ti -1c
.RI "void \fBsetUniformArray\fP (const std::string &name, const \fBGlsl::Vec2\fP *vectorArray, std::size_t length)"
.br
.RI "Specify values for \fRvec2\fP[] array uniform\&. "
.ti -1c
.RI "void \fBsetUniformArray\fP (const std::string &name, const \fBGlsl::Vec3\fP *vectorArray, std::size_t length)"
.br
.RI "Specify values for \fRvec3\fP[] array uniform\&. "
.ti -1c
.RI "void \fBsetUniformArray\fP (const std::string &name, const \fBGlsl::Vec4\fP *vectorArray, std::size_t length)"
.br
.RI "Specify values for \fRvec4\fP[] array uniform\&. "
.ti -1c
.RI "void \fBsetUniformArray\fP (const std::string &name, const \fBGlsl::Mat3\fP *matrixArray, std::size_t length)"
.br
.RI "Specify values for \fRmat3\fP[] array uniform\&. "
.ti -1c
.RI "void \fBsetUniformArray\fP (const std::string &name, const \fBGlsl::Mat4\fP *matrixArray, std::size_t length)"
.br
.RI "Specify values for \fRmat4\fP[] array uniform\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, float x)"
.br
.RI "Change a float parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, float x, float y)"
.br
.RI "Change a 2-components vector parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, float x, float y, float z)"
.br
.RI "Change a 3-components vector parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, float x, float y, float z, float w)"
.br
.RI "Change a 4-components vector parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, const \fBVector2f\fP &vector)"
.br
.RI "Change a 2-components vector parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, const \fBVector3f\fP &vector)"
.br
.RI "Change a 3-components vector parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, const \fBColor\fP &color)"
.br
.RI "Change a color parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, const \fBTransform\fP &transform)"
.br
.RI "Change a matrix parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, const \fBTexture\fP &texture)"
.br
.RI "Change a texture parameter of the shader\&. "
.ti -1c
.RI "void \fBsetParameter\fP (const std::string &name, \fBCurrentTextureType\fP)"
.br
.RI "Change a texture parameter of the shader\&. "
.ti -1c
.RI "unsigned int \fBgetNativeHandle\fP () const"
.br
.RI "Get the underlying OpenGL handle of the shader\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBbind\fP (const \fBShader\fP *shader)"
.br
.RI "Bind a shader for rendering\&. "
.ti -1c
.RI "static bool \fBisAvailable\fP ()"
.br
.RI "Tell whether or not the system supports shaders\&. "
.ti -1c
.RI "static bool \fBisGeometryAvailable\fP ()"
.br
.RI "Tell whether or not the system supports geometry shaders\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static \fBCurrentTextureType\fP \fBCurrentTexture\fP"
.br
.RI "Represents the texture of the object being drawn\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBShader\fP class (vertex, geometry and fragment) 

Shaders are programs written using a specific language, executed directly by the graphics card and allowing to apply real-time operations to the rendered entities\&.
.PP
There are three kinds of shaders: 
.PD 0
.IP "\(bu" 1
Vertex shaders, that process vertices 
.IP "\(bu" 1
Geometry shaders, that process primitives 
.IP "\(bu" 1
Fragment (pixel) shaders, that process pixels
.PP
A \fBsf::Shader\fP can be composed of either a vertex shader alone, a geometry shader alone, a fragment shader alone, or any combination of them\&. (see the variants of the load functions)\&.
.PP
Shaders are written in GLSL, which is a C-like language dedicated to OpenGL shaders\&. You'll probably need to learn its basics before writing your own shaders for SFML\&.
.PP
Like any C/C++ program, a GLSL shader has its own variables called \fIuniforms\fP that you can set from your C++ application\&. \fBsf::Shader\fP handles different types of uniforms: 
.PD 0
.IP "\(bu" 1
scalars: \fRfloat\fP, \fRint\fP, \fRbool\fP 
.IP "\(bu" 1
vectors (2, 3 or 4 components) 
.IP "\(bu" 1
matrices (3x3 or 4x4) 
.IP "\(bu" 1
samplers (textures)
.PP
Some SFML-specific types can be converted: 
.PD 0
.IP "\(bu" 1
\fBsf::Color\fP as a 4D vector (\fRvec4\fP) 
.IP "\(bu" 1
\fBsf::Transform\fP as matrices (\fRmat3\fP or \fRmat4\fP)
.PP
Every uniform variable in a shader can be set through one of the \fBsetUniform()\fP or \fBsetUniformArray()\fP overloads\&. For example, if you have a shader with the following uniforms: 
.PP
.nf
uniform float offset;
uniform vec3 point;
uniform vec4 color;
uniform mat4 matrix;
uniform sampler2D overlay;
uniform sampler2D current;

.fi
.PP
 You can set their values from C++ code as follows, using the types defined in the \fBsf::Glsl\fP namespace: 
.PP
.nf
shader\&.setUniform("offset", 2\&.f);
shader\&.setUniform("point", sf::Vector3f(0\&.5f, 0\&.8f, 0\&.3f));
shader\&.setUniform("color", sf::Glsl::Vec4(color));          // color is a sf::Color
shader\&.setUniform("matrix", sf::Glsl::Mat4(transform));     // transform is a sf::Transform
shader\&.setUniform("overlay", texture);                      // texture is a sf::Texture
shader\&.setUniform("current", sf::Shader::CurrentTexture);

.fi
.PP
.PP
The old \fBsetParameter()\fP overloads are deprecated and will be removed in a future version\&. You should use their \fBsetUniform()\fP equivalents instead\&.
.PP
The special \fBShader::CurrentTexture\fP argument maps the given \fRsampler2D\fP uniform to the current texture of the object being drawn (which cannot be known in advance)\&.
.PP
To apply a shader to a drawable, you must pass it as an additional parameter to the \fBRenderWindow::draw\fP function: 
.PP
.nf
window\&.draw(sprite, &shader);

.fi
.PP
.PP
\&.\&.\&. which is in fact just a shortcut for this: 
.PP
.nf
sf::RenderStates states;
states\&.shader = &shader;
window\&.draw(sprite, states);

.fi
.PP
.PP
In the code above we pass a pointer to the shader, because it may be null (which means 'no shader')\&.
.PP
Shaders can be used on any drawable, but some combinations are not interesting\&. For example, using a vertex shader on a \fBsf::Sprite\fP is limited because there are only 4 vertices, the sprite would have to be subdivided in order to apply wave effects\&. Another bad example is a fragment shader with \fBsf::Text\fP: the texture of the text is not the actual text that you see on screen, it is a big texture containing all the characters of the font in an arbitrary order; thus, texture lookups on pixels other than the current one may not give you the expected result\&.
.PP
Shaders can also be used to apply global post-effects to the current contents of the target (like the old sf::PostFx class in SFML 1)\&. This can be done in two different ways: 
.PD 0
.IP "\(bu" 1
draw everything to a \fBsf::RenderTexture\fP, then draw it to the main target using the shader 
.IP "\(bu" 1
draw everything directly to the main target, then use sf::Texture::update(Window&) to copy its contents to a texture and draw it to the main target using the shader
.PP
The first technique is more optimized because it doesn't involve retrieving the target's pixels to system memory, but the second one doesn't impact the rendering process and can be easily inserted anywhere without impacting all the code\&.
.PP
Like \fBsf::Texture\fP that can be used as a raw OpenGL texture, \fBsf::Shader\fP can also be used directly as a raw shader for custom OpenGL geometry\&. 
.PP
.nf
sf::Shader::bind(&shader);
\&.\&.\&. render OpenGL geometry \&.\&.\&.
sf::Shader::bind(NULL);

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Glsl\fP 
.RE
.PP

.PP
Definition at line \fB52\fP of file \fBShader\&.hpp\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBsf::Shader::Type\fP"

.PP
Types of shaders\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIVertex \fP\fP
Vertex shader 
.TP
\fB\fIGeometry \fP\fP
Geometry shader\&. 
.TP
\fB\fIFragment \fP\fP
Fragment (pixel) shader\&. 
.PP
Definition at line \fB60\fP of file \fBShader\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Shader::Shader ()"

.PP
Default constructor\&. This constructor creates an invalid shader\&. 
.SS "sf::Shader::~Shader ()"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "static void sf::Shader::bind (const \fBShader\fP * shader)\fR [static]\fP"

.PP
Bind a shader for rendering\&. This function is not part of the graphics API, it mustn't be used when drawing SFML entities\&. It must be used only if you mix \fBsf::Shader\fP with OpenGL code\&.
.PP
.PP
.nf
sf::Shader s1, s2;
\&.\&.\&.
sf::Shader::bind(&s1);
// draw OpenGL stuff that use s1\&.\&.\&.
sf::Shader::bind(&s2);
// draw OpenGL stuff that use s2\&.\&.\&.
sf::Shader::bind(NULL);
// draw OpenGL stuff that use no shader\&.\&.\&.
.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIshader\fP \fBShader\fP to bind, can be null to use no shader 
.RE
.PP

.SS "unsigned int sf::Shader::getNativeHandle () const"

.PP
Get the underlying OpenGL handle of the shader\&. You shouldn't need to use this function, unless you have very specific stuff to implement that SFML doesn't support, or implement a temporary workaround until a bug is fixed\&.
.PP
\fBReturns\fP
.RS 4
OpenGL handle of the shader or 0 if not yet loaded 
.RE
.PP

.SS "static bool sf::Shader::isAvailable ()\fR [static]\fP"

.PP
Tell whether or not the system supports shaders\&. This function should always be called before using the shader features\&. If it returns false, then any attempt to use \fBsf::Shader\fP will fail\&.
.PP
\fBReturns\fP
.RS 4
True if shaders are supported, false otherwise 
.RE
.PP

.SS "static bool sf::Shader::isGeometryAvailable ()\fR [static]\fP"

.PP
Tell whether or not the system supports geometry shaders\&. This function should always be called before using the geometry shader features\&. If it returns false, then any attempt to use \fBsf::Shader\fP geometry shader features will fail\&.
.PP
This function can only return true if \fBisAvailable()\fP would also return true, since shaders in general have to be supported in order for geometry shaders to be supported as well\&.
.PP
Note: The first call to this function, whether by your code or SFML will result in a context switch\&.
.PP
\fBReturns\fP
.RS 4
True if geometry shaders are supported, false otherwise 
.RE
.PP

.SS "bool sf::Shader::loadFromFile (const std::string & filename, \fBType\fP type)"

.PP
Load the vertex, geometry or fragment shader from a file\&. This function loads a single shader, vertex, geometry or fragment, identified by the second argument\&. The source must be a text file containing a valid shader in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path of the vertex, geometry or fragment shader file to load 
.br
\fItype\fP Type of shader (vertex, geometry or fragment)
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromMemory\fP, \fBloadFromStream\fP 
.RE
.PP

.SS "bool sf::Shader::loadFromFile (const std::string & vertexShaderFilename, const std::string & fragmentShaderFilename)"

.PP
Load both the vertex and fragment shaders from files\&. This function loads both the vertex and the fragment shaders\&. If one of them fails to load, the shader is left empty (the valid shader is unloaded)\&. The sources must be text files containing valid shaders in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIvertexShaderFilename\fP Path of the vertex shader file to load 
.br
\fIfragmentShaderFilename\fP Path of the fragment shader file to load
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromMemory\fP, \fBloadFromStream\fP 
.RE
.PP

.SS "bool sf::Shader::loadFromFile (const std::string & vertexShaderFilename, const std::string & geometryShaderFilename, const std::string & fragmentShaderFilename)"

.PP
Load the vertex, geometry and fragment shaders from files\&. This function loads the vertex, geometry and fragment shaders\&. If one of them fails to load, the shader is left empty (the valid shader is unloaded)\&. The sources must be text files containing valid shaders in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIvertexShaderFilename\fP Path of the vertex shader file to load 
.br
\fIgeometryShaderFilename\fP Path of the geometry shader file to load 
.br
\fIfragmentShaderFilename\fP Path of the fragment shader file to load
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromMemory\fP, \fBloadFromStream\fP 
.RE
.PP

.SS "bool sf::Shader::loadFromMemory (const std::string & shader, \fBType\fP type)"

.PP
Load the vertex, geometry or fragment shader from a source code in memory\&. This function loads a single shader, vertex, geometry or fragment, identified by the second argument\&. The source code must be a valid shader in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIshader\fP \fBString\fP containing the source code of the shader 
.br
\fItype\fP Type of shader (vertex, geometry or fragment)
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromStream\fP 
.RE
.PP

.SS "bool sf::Shader::loadFromMemory (const std::string & vertexShader, const std::string & fragmentShader)"

.PP
Load both the vertex and fragment shaders from source codes in memory\&. This function loads both the vertex and the fragment shaders\&. If one of them fails to load, the shader is left empty (the valid shader is unloaded)\&. The sources must be valid shaders in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIvertexShader\fP \fBString\fP containing the source code of the vertex shader 
.br
\fIfragmentShader\fP \fBString\fP containing the source code of the fragment shader
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromStream\fP 
.RE
.PP

.SS "bool sf::Shader::loadFromMemory (const std::string & vertexShader, const std::string & geometryShader, const std::string & fragmentShader)"

.PP
Load the vertex, geometry and fragment shaders from source codes in memory\&. This function loads the vertex, geometry and fragment shaders\&. If one of them fails to load, the shader is left empty (the valid shader is unloaded)\&. The sources must be valid shaders in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIvertexShader\fP \fBString\fP containing the source code of the vertex shader 
.br
\fIgeometryShader\fP \fBString\fP containing the source code of the geometry shader 
.br
\fIfragmentShader\fP \fBString\fP containing the source code of the fragment shader
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromStream\fP 
.RE
.PP

.SS "bool sf::Shader::loadFromStream (\fBInputStream\fP & stream, \fBType\fP type)"

.PP
Load the vertex, geometry or fragment shader from a custom stream\&. This function loads a single shader, vertex, geometry or fragment, identified by the second argument\&. The source code must be a valid shader in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIstream\fP Source stream to read from 
.br
\fItype\fP Type of shader (vertex, geometry or fragment)
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromMemory\fP 
.RE
.PP

.SS "bool sf::Shader::loadFromStream (\fBInputStream\fP & vertexShaderStream, \fBInputStream\fP & fragmentShaderStream)"

.PP
Load both the vertex and fragment shaders from custom streams\&. This function loads both the vertex and the fragment shaders\&. If one of them fails to load, the shader is left empty (the valid shader is unloaded)\&. The source codes must be valid shaders in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIvertexShaderStream\fP Source stream to read the vertex shader from 
.br
\fIfragmentShaderStream\fP Source stream to read the fragment shader from
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromMemory\fP 
.RE
.PP

.SS "bool sf::Shader::loadFromStream (\fBInputStream\fP & vertexShaderStream, \fBInputStream\fP & geometryShaderStream, \fBInputStream\fP & fragmentShaderStream)"

.PP
Load the vertex, geometry and fragment shaders from custom streams\&. This function loads the vertex, geometry and fragment shaders\&. If one of them fails to load, the shader is left empty (the valid shader is unloaded)\&. The source codes must be valid shaders in GLSL language\&. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders\&.
.PP
\fBParameters\fP
.RS 4
\fIvertexShaderStream\fP Source stream to read the vertex shader from 
.br
\fIgeometryShaderStream\fP Source stream to read the geometry shader from 
.br
\fIfragmentShaderStream\fP Source stream to read the fragment shader from
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromMemory\fP 
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, const \fBColor\fP & color)"

.PP
Change a color parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, const Glsl::Vec4&)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, const \fBTexture\fP & texture)"

.PP
Change a texture parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, const Texture&)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, const \fBTransform\fP & transform)"

.PP
Change a matrix parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, const Glsl::Mat4&)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, const \fBVector2f\fP & vector)"

.PP
Change a 2-components vector parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, const Glsl::Vec2&)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, const \fBVector3f\fP & vector)"

.PP
Change a 3-components vector parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, const Glsl::Vec3&)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, \fBCurrentTextureType\fP)"

.PP
Change a texture parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, CurrentTextureType)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, float x)"

.PP
Change a float parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, float)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, float x, float y)"

.PP
Change a 2-components vector parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, const Glsl::Vec2&)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, float x, float y, float z)"

.PP
Change a 3-components vector parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, const Glsl::Vec3&)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setParameter (const std::string & name, float x, float y, float z, float w)"

.PP
Change a 4-components vector parameter of the shader\&. 
.PP
\fBDeprecated\fP
.RS 4
Use \fBsetUniform(const std::string&, const Glsl::Vec4&)\fP instead\&.
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, bool x)"

.PP
Specify value for \fRbool\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIx\fP Value of the bool scalar 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Bvec2\fP & vector)"

.PP
Specify value for \fRbvec2\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the bvec2 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Bvec3\fP & vector)"

.PP
Specify value for \fRbvec3\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the bvec3 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Bvec4\fP & vector)"

.PP
Specify value for \fRbvec4\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the bvec4 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Ivec2\fP & vector)"

.PP
Specify value for \fRivec2\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the ivec2 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Ivec3\fP & vector)"

.PP
Specify value for \fRivec3\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the ivec3 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Ivec4\fP & vector)"

.PP
Specify value for \fRivec4\fP uniform\&. This overload can also be called with \fBsf::Color\fP objects that are converted to \fBsf::Glsl::Ivec4\fP\&.
.PP
If color conversions are used, the ivec4 uniform in GLSL will hold the same values as the original \fBsf::Color\fP instance\&. For example, \fBsf::Color(255, 127, 0, 255)\fP is mapped to ivec4(255, 127, 0, 255)\&.
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the ivec4 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Mat3\fP & matrix)"

.PP
Specify value for \fRmat3\fP matrix\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fImatrix\fP Value of the mat3 matrix 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Mat4\fP & matrix)"

.PP
Specify value for \fRmat4\fP matrix\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fImatrix\fP Value of the mat4 matrix 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Vec2\fP & vector)"

.PP
Specify value for \fRvec2\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the vec2 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Vec3\fP & vector)"

.PP
Specify value for \fRvec3\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the vec3 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBGlsl::Vec4\fP & vector)"

.PP
Specify value for \fRvec4\fP uniform\&. This overload can also be called with \fBsf::Color\fP objects that are converted to \fBsf::Glsl::Vec4\fP\&.
.PP
It is important to note that the components of the color are normalized before being passed to the shader\&. Therefore, they are converted from range [0 \&.\&. 255] to range [0 \&.\&. 1]\&. For example, a \fBsf::Color(255, 127, 0, 255)\fP will be transformed to a vec4(1\&.0, 0\&.5, 0\&.0, 1\&.0) in the shader\&.
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvector\fP Value of the vec4 vector 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, const \fBTexture\fP & texture)"

.PP
Specify a texture as \fRsampler2D\fP uniform\&. \fIname\fP is the name of the variable to change in the shader\&. The corresponding parameter in the shader must be a 2D texture (\fRsampler2D\fP GLSL type)\&.
.PP
Example: 
.PP
.nf
uniform sampler2D the_texture; // this is the variable in the shader

.fi
.PP
 
.PP
.nf
sf::Texture texture;
\&.\&.\&.
shader\&.setUniform("the_texture", texture);

.fi
.PP
 It is important to note that \fItexture\fP must remain alive as long as the shader uses it, no copy is made internally\&.
.PP
To use the texture of the object being drawn, which cannot be known in advance, you can pass the special value \fBsf::Shader::CurrentTexture\fP: 
.PP
.nf
shader\&.setUniform("the_texture", sf::Shader::CurrentTexture)\&.

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the texture in the shader 
.br
\fItexture\fP \fBTexture\fP to assign 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, \fBCurrentTextureType\fP)"

.PP
Specify current texture as \fRsampler2D\fP uniform\&. This overload maps a shader texture variable to the texture of the object being drawn, which cannot be known in advance\&. The second argument must be \fBsf::Shader::CurrentTexture\fP\&. The corresponding parameter in the shader must be a 2D texture (\fRsampler2D\fP GLSL type)\&.
.PP
Example: 
.PP
.nf
uniform sampler2D current; // this is the variable in the shader

.fi
.PP
 
.PP
.nf
shader\&.setUniform("current", sf::Shader::CurrentTexture);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the texture in the shader 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, float x)"

.PP
Specify value for \fRfloat\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIx\fP Value of the float scalar 
.RE
.PP

.SS "void sf::Shader::setUniform (const std::string & name, int x)"

.PP
Specify value for \fRint\fP uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIx\fP Value of the int scalar 
.RE
.PP

.SS "void sf::Shader::setUniformArray (const std::string & name, const float * scalarArray, std::size_t length)"

.PP
Specify values for \fRfloat\fP[] array uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIscalarArray\fP pointer to array of \fRfloat\fP values 
.br
\fIlength\fP Number of elements in the array 
.RE
.PP

.SS "void sf::Shader::setUniformArray (const std::string & name, const \fBGlsl::Mat3\fP * matrixArray, std::size_t length)"

.PP
Specify values for \fRmat3\fP[] array uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fImatrixArray\fP pointer to array of \fRmat3\fP values 
.br
\fIlength\fP Number of elements in the array 
.RE
.PP

.SS "void sf::Shader::setUniformArray (const std::string & name, const \fBGlsl::Mat4\fP * matrixArray, std::size_t length)"

.PP
Specify values for \fRmat4\fP[] array uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fImatrixArray\fP pointer to array of \fRmat4\fP values 
.br
\fIlength\fP Number of elements in the array 
.RE
.PP

.SS "void sf::Shader::setUniformArray (const std::string & name, const \fBGlsl::Vec2\fP * vectorArray, std::size_t length)"

.PP
Specify values for \fRvec2\fP[] array uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvectorArray\fP pointer to array of \fRvec2\fP values 
.br
\fIlength\fP Number of elements in the array 
.RE
.PP

.SS "void sf::Shader::setUniformArray (const std::string & name, const \fBGlsl::Vec3\fP * vectorArray, std::size_t length)"

.PP
Specify values for \fRvec3\fP[] array uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvectorArray\fP pointer to array of \fRvec3\fP values 
.br
\fIlength\fP Number of elements in the array 
.RE
.PP

.SS "void sf::Shader::setUniformArray (const std::string & name, const \fBGlsl::Vec4\fP * vectorArray, std::size_t length)"

.PP
Specify values for \fRvec4\fP[] array uniform\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP Name of the uniform variable in GLSL 
.br
\fIvectorArray\fP pointer to array of \fRvec4\fP values 
.br
\fIlength\fP Number of elements in the array 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "\fBCurrentTextureType\fP sf::Shader::CurrentTexture\fR [static]\fP"

.PP
Represents the texture of the object being drawn\&. 
.PP
\fBSee also\fP
.RS 4
\fBsetUniform(const std::string&, CurrentTextureType)\fP 
.RE
.PP

.PP
Definition at line \fB82\fP of file \fBShader\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
