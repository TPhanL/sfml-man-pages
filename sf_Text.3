.TH "sf::Text" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Text \- Graphical text that can be drawn to a render target\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/Text\&.hpp>\fP
.PP
Inherits \fBsf::Drawable\fP, and \fBsf::Transformable\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBStyle\fP { \fBRegular\fP = 0, \fBBold\fP = 1 << 0, \fBItalic\fP = 1 << 1, \fBUnderlined\fP = 1 << 2, \fBStrikeThrough\fP = 1 << 3 }"
.br
.RI "Enumeration of the string drawing styles\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBText\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBText\fP (const \fBString\fP &string, const \fBFont\fP &font, unsigned int characterSize=30)"
.br
.RI "Construct the text from a string, font and size\&. "
.ti -1c
.RI "void \fBsetString\fP (const \fBString\fP &string)"
.br
.RI "Set the text's string\&. "
.ti -1c
.RI "void \fBsetFont\fP (const \fBFont\fP &font)"
.br
.RI "Set the text's font\&. "
.ti -1c
.RI "void \fBsetCharacterSize\fP (unsigned int size)"
.br
.RI "Set the character size\&. "
.ti -1c
.RI "void \fBsetLineSpacing\fP (float spacingFactor)"
.br
.RI "Set the line spacing factor\&. "
.ti -1c
.RI "void \fBsetLetterSpacing\fP (float spacingFactor)"
.br
.RI "Set the letter spacing factor\&. "
.ti -1c
.RI "void \fBsetStyle\fP (Uint32 style)"
.br
.RI "Set the text's style\&. "
.ti -1c
.RI "void \fBsetColor\fP (const \fBColor\fP &color)"
.br
.RI "Set the fill color of the text\&. "
.ti -1c
.RI "void \fBsetFillColor\fP (const \fBColor\fP &color)"
.br
.RI "Set the fill color of the text\&. "
.ti -1c
.RI "void \fBsetOutlineColor\fP (const \fBColor\fP &color)"
.br
.RI "Set the outline color of the text\&. "
.ti -1c
.RI "void \fBsetOutlineThickness\fP (float thickness)"
.br
.RI "Set the thickness of the text's outline\&. "
.ti -1c
.RI "const \fBString\fP & \fBgetString\fP () const"
.br
.RI "Get the text's string\&. "
.ti -1c
.RI "const \fBFont\fP * \fBgetFont\fP () const"
.br
.RI "Get the text's font\&. "
.ti -1c
.RI "unsigned int \fBgetCharacterSize\fP () const"
.br
.RI "Get the character size\&. "
.ti -1c
.RI "float \fBgetLetterSpacing\fP () const"
.br
.RI "Get the size of the letter spacing factor\&. "
.ti -1c
.RI "float \fBgetLineSpacing\fP () const"
.br
.RI "Get the size of the line spacing factor\&. "
.ti -1c
.RI "Uint32 \fBgetStyle\fP () const"
.br
.RI "Get the text's style\&. "
.ti -1c
.RI "const \fBColor\fP & \fBgetColor\fP () const"
.br
.RI "Get the fill color of the text\&. "
.ti -1c
.RI "const \fBColor\fP & \fBgetFillColor\fP () const"
.br
.RI "Get the fill color of the text\&. "
.ti -1c
.RI "const \fBColor\fP & \fBgetOutlineColor\fP () const"
.br
.RI "Get the outline color of the text\&. "
.ti -1c
.RI "float \fBgetOutlineThickness\fP () const"
.br
.RI "Get the outline thickness of the text\&. "
.ti -1c
.RI "\fBVector2f\fP \fBfindCharacterPos\fP (std::size_t index) const"
.br
.RI "Return the position of the \fIindex-th\fP character\&. "
.ti -1c
.RI "\fBFloatRect\fP \fBgetLocalBounds\fP () const"
.br
.RI "Get the local bounding rectangle of the entity\&. "
.ti -1c
.RI "\fBFloatRect\fP \fBgetGlobalBounds\fP () const"
.br
.RI "Get the global bounding rectangle of the entity\&. "
.ti -1c
.RI "void \fBsetPosition\fP (float x, float y)"
.br
.RI "set the position of the object "
.ti -1c
.RI "void \fBsetPosition\fP (const \fBVector2f\fP &position)"
.br
.RI "set the position of the object "
.ti -1c
.RI "void \fBsetRotation\fP (float angle)"
.br
.RI "set the orientation of the object "
.ti -1c
.RI "void \fBsetScale\fP (float factorX, float factorY)"
.br
.RI "set the scale factors of the object "
.ti -1c
.RI "void \fBsetScale\fP (const \fBVector2f\fP &factors)"
.br
.RI "set the scale factors of the object "
.ti -1c
.RI "void \fBsetOrigin\fP (float x, float y)"
.br
.RI "set the local origin of the object "
.ti -1c
.RI "void \fBsetOrigin\fP (const \fBVector2f\fP &origin)"
.br
.RI "set the local origin of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetPosition\fP () const"
.br
.RI "get the position of the object "
.ti -1c
.RI "float \fBgetRotation\fP () const"
.br
.RI "get the orientation of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetScale\fP () const"
.br
.RI "get the current scale of the object "
.ti -1c
.RI "const \fBVector2f\fP & \fBgetOrigin\fP () const"
.br
.RI "get the local origin of the object "
.ti -1c
.RI "void \fBmove\fP (float offsetX, float offsetY)"
.br
.RI "Move the object by a given offset\&. "
.ti -1c
.RI "void \fBmove\fP (const \fBVector2f\fP &offset)"
.br
.RI "Move the object by a given offset\&. "
.ti -1c
.RI "void \fBrotate\fP (float angle)"
.br
.RI "Rotate the object\&. "
.ti -1c
.RI "void \fBscale\fP (float factorX, float factorY)"
.br
.RI "Scale the object\&. "
.ti -1c
.RI "void \fBscale\fP (const \fBVector2f\fP &factor)"
.br
.RI "Scale the object\&. "
.ti -1c
.RI "const \fBTransform\fP & \fBgetTransform\fP () const"
.br
.RI "get the combined transform of the object "
.ti -1c
.RI "const \fBTransform\fP & \fBgetInverseTransform\fP () const"
.br
.RI "get the inverse of the combined transform of the object "
.in -1c
.SH "Detailed Description"
.PP 
Graphical text that can be drawn to a render target\&. 

\fBsf::Text\fP is a drawable class that allows to easily display some text with custom style and color on a render target\&.
.PP
It inherits all the functions from \fBsf::Transformable\fP: position, rotation, scale, origin\&. It also adds text-specific properties such as the font to use, the character size, the font style (bold, italic, underlined and strike through), the text color, the outline thickness, the outline color, the character spacing, the line spacing and the text to display of course\&. It also provides convenience functions to calculate the graphical size of the text, or to get the global position of a given character\&.
.PP
\fBsf::Text\fP works in combination with the \fBsf::Font\fP class, which loads and provides the glyphs (visual characters) of a given font\&.
.PP
The separation of \fBsf::Font\fP and \fBsf::Text\fP allows more flexibility and better performances: indeed a \fBsf::Font\fP is a heavy resource, and any operation on it is slow (often too slow for real-time applications)\&. On the other side, a \fBsf::Text\fP is a lightweight object which can combine the glyphs data and metrics of a \fBsf::Font\fP to display any text on a render target\&.
.PP
It is important to note that the \fBsf::Text\fP instance doesn't copy the font that it uses, it only keeps a reference to it\&. Thus, a \fBsf::Font\fP must not be destructed while it is used by a \fBsf::Text\fP (i\&.e\&. never write a function that uses a local \fBsf::Font\fP instance for creating a text)\&.
.PP
See also the note on coordinates and undistorted rendering in \fBsf::Transformable\fP\&.
.PP
Usage example: 
.PP
.nf
// Declare and load a font
sf::Font font;
font\&.loadFromFile("arial\&.ttf");

// Create a text
sf::Text text("hello", font);
text\&.setCharacterSize(30);
text\&.setStyle(sf::Text::Bold);
text\&.setFillColor(sf::Color::Red);

// Draw it
window\&.draw(text);

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Font\fP, \fBsf::Transformable\fP 
.RE
.PP

.PP
Definition at line \fB48\fP of file \fBText\&.hpp\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBsf::Text::Style\fP"

.PP
Enumeration of the string drawing styles\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRegular \fP\fP
Regular characters, no style\&. 
.TP
\fB\fIBold \fP\fP
Bold characters\&. 
.TP
\fB\fIItalic \fP\fP
Italic characters\&. 
.TP
\fB\fIUnderlined \fP\fP
Underlined characters\&. 
.TP
\fB\fIStrikeThrough \fP\fP
Strike through characters\&. 
.PP
Definition at line \fB56\fP of file \fBText\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Text::Text ()"

.PP
Default constructor\&. Creates an empty text\&. 
.SS "sf::Text::Text (const \fBString\fP & string, const \fBFont\fP & font, unsigned int characterSize = \fR30\fP)"

.PP
Construct the text from a string, font and size\&. Note that if the used font is a bitmap font, it is not scalable, thus not all requested sizes will be available to use\&. This needs to be taken into consideration when setting the character size\&. If you need to display text of a certain size, make sure the corresponding bitmap font that supports that size is used\&.
.PP
\fBParameters\fP
.RS 4
\fIstring\fP \fBText\fP assigned to the string 
.br
\fIfont\fP \fBFont\fP used to draw the string 
.br
\fIcharacterSize\fP Base size of characters, in pixels 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBVector2f\fP sf::Text::findCharacterPos (std::size_t index) const"

.PP
Return the position of the \fIindex-th\fP character\&. This function computes the visual position of a character from its index in the string\&. The returned position is in global coordinates (translation, rotation, scale and origin are applied)\&. If \fIindex\fP is out of range, the position of the end of the string is returned\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the character
.RE
.PP
\fBReturns\fP
.RS 4
Position of the character 
.RE
.PP

.SS "unsigned int sf::Text::getCharacterSize () const"

.PP
Get the character size\&. 
.PP
\fBReturns\fP
.RS 4
Size of the characters, in pixels
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetCharacterSize\fP 
.RE
.PP

.SS "const \fBColor\fP & sf::Text::getColor () const"

.PP
Get the fill color of the text\&. 
.PP
\fBReturns\fP
.RS 4
Fill color of the text
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetFillColor\fP
.RE
.PP
\fBDeprecated\fP
.RS 4
There is now fill and outline colors instead of a single global color\&. Use \fBgetFillColor()\fP or \fBgetOutlineColor()\fP instead\&.
.RE
.PP

.SS "const \fBColor\fP & sf::Text::getFillColor () const"

.PP
Get the fill color of the text\&. 
.PP
\fBReturns\fP
.RS 4
Fill color of the text
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetFillColor\fP 
.RE
.PP

.SS "const \fBFont\fP * sf::Text::getFont () const"

.PP
Get the text's font\&. If the text has no font attached, a NULL pointer is returned\&. The returned pointer is const, which means that you cannot modify the font when you get it from this function\&.
.PP
\fBReturns\fP
.RS 4
Pointer to the text's font
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetFont\fP 
.RE
.PP

.SS "\fBFloatRect\fP sf::Text::getGlobalBounds () const"

.PP
Get the global bounding rectangle of the entity\&. The returned rectangle is in global coordinates, which means that it takes into account the transformations (translation, rotation, scale, \&.\&.\&.) that are applied to the entity\&. In other words, this function returns the bounds of the text in the global 2D world's coordinate system\&.
.PP
\fBReturns\fP
.RS 4
Global bounding rectangle of the entity 
.RE
.PP

.SS "const \fBTransform\fP & sf::Transformable::getInverseTransform () const\fR [inherited]\fP"

.PP
get the inverse of the combined transform of the object 
.PP
\fBReturns\fP
.RS 4
Inverse of the combined transformations applied to the object
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetTransform\fP 
.RE
.PP

.SS "float sf::Text::getLetterSpacing () const"

.PP
Get the size of the letter spacing factor\&. 
.PP
\fBReturns\fP
.RS 4
Size of the letter spacing factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetLetterSpacing\fP 
.RE
.PP

.SS "float sf::Text::getLineSpacing () const"

.PP
Get the size of the line spacing factor\&. 
.PP
\fBReturns\fP
.RS 4
Size of the line spacing factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetLineSpacing\fP 
.RE
.PP

.SS "\fBFloatRect\fP sf::Text::getLocalBounds () const"

.PP
Get the local bounding rectangle of the entity\&. The returned rectangle is in local coordinates, which means that it ignores the transformations (translation, rotation, scale, \&.\&.\&.) that are applied to the entity\&. In other words, this function returns the bounds of the entity in the entity's coordinate system\&.
.PP
\fBReturns\fP
.RS 4
Local bounding rectangle of the entity 
.RE
.PP

.SS "const \fBVector2f\fP & sf::Transformable::getOrigin () const\fR [inherited]\fP"

.PP
get the local origin of the object 
.PP
\fBReturns\fP
.RS 4
Current origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetOrigin\fP 
.RE
.PP

.SS "const \fBColor\fP & sf::Text::getOutlineColor () const"

.PP
Get the outline color of the text\&. 
.PP
\fBReturns\fP
.RS 4
Outline color of the text
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetOutlineColor\fP 
.RE
.PP

.SS "float sf::Text::getOutlineThickness () const"

.PP
Get the outline thickness of the text\&. 
.PP
\fBReturns\fP
.RS 4
Outline thickness of the text, in pixels
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetOutlineThickness\fP 
.RE
.PP

.SS "const \fBVector2f\fP & sf::Transformable::getPosition () const\fR [inherited]\fP"

.PP
get the position of the object 
.PP
\fBReturns\fP
.RS 4
Current position
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "float sf::Transformable::getRotation () const\fR [inherited]\fP"

.PP
get the orientation of the object The rotation is always in the range [0, 360]\&.
.PP
\fBReturns\fP
.RS 4
Current rotation, in degrees
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetRotation\fP 
.RE
.PP

.SS "const \fBVector2f\fP & sf::Transformable::getScale () const\fR [inherited]\fP"

.PP
get the current scale of the object 
.PP
\fBReturns\fP
.RS 4
Current scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "const \fBString\fP & sf::Text::getString () const"

.PP
Get the text's string\&. The returned string is a \fBsf::String\fP, which can automatically be converted to standard string types\&. So, the following lines of code are all valid: 
.PP
.nf
sf::String   s1 = text\&.getString();
std::string  s2 = text\&.getString();
std::wstring s3 = text\&.getString();

.fi
.PP
.PP
\fBReturns\fP
.RS 4
\fBText\fP's string
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetString\fP 
.RE
.PP

.SS "Uint32 sf::Text::getStyle () const"

.PP
Get the text's style\&. 
.PP
\fBReturns\fP
.RS 4
\fBText\fP's style
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetStyle\fP 
.RE
.PP

.SS "const \fBTransform\fP & sf::Transformable::getTransform () const\fR [inherited]\fP"

.PP
get the combined transform of the object 
.PP
\fBReturns\fP
.RS 4
\fBTransform\fP combining the position/rotation/scale/origin of the object
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetInverseTransform\fP 
.RE
.PP

.SS "void sf::Transformable::move (const \fBVector2f\fP & offset)\fR [inherited]\fP"

.PP
Move the object by a given offset\&. This function adds to the current position of the object, unlike setPosition which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
object\&.setPosition(object\&.getPosition() + offset);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIoffset\fP Offset
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::move (float offsetX, float offsetY)\fR [inherited]\fP"

.PP
Move the object by a given offset\&. This function adds to the current position of the object, unlike setPosition which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f pos = object\&.getPosition();
object\&.setPosition(pos\&.x + offsetX, pos\&.y + offsetY);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIoffsetX\fP X offset 
.br
\fIoffsetY\fP Y offset
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::rotate (float angle)\fR [inherited]\fP"

.PP
Rotate the object\&. This function adds to the current rotation of the object, unlike setRotation which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
object\&.setRotation(object\&.getRotation() + angle);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIangle\fP Angle of rotation, in degrees 
.RE
.PP

.SS "void sf::Transformable::scale (const \fBVector2f\fP & factor)\fR [inherited]\fP"

.PP
Scale the object\&. This function multiplies the current scale of the object, unlike setScale which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f scale = object\&.getScale();
object\&.setScale(scale\&.x * factor\&.x, scale\&.y * factor\&.y);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIfactor\fP Scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "void sf::Transformable::scale (float factorX, float factorY)\fR [inherited]\fP"

.PP
Scale the object\&. This function multiplies the current scale of the object, unlike setScale which overwrites it\&. Thus, it is equivalent to the following code: 
.PP
.nf
sf::Vector2f scale = object\&.getScale();
object\&.setScale(scale\&.x * factorX, scale\&.y * factorY);

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIfactorX\fP Horizontal scale factor 
.br
\fIfactorY\fP Vertical scale factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetScale\fP 
.RE
.PP

.SS "void sf::Text::setCharacterSize (unsigned int size)"

.PP
Set the character size\&. The default size is 30\&.
.PP
Note that if the used font is a bitmap font, it is not scalable, thus not all requested sizes will be available to use\&. This needs to be taken into consideration when setting the character size\&. If you need to display text of a certain size, make sure the corresponding bitmap font that supports that size is used\&.
.PP
\fBParameters\fP
.RS 4
\fIsize\fP New character size, in pixels
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetCharacterSize\fP 
.RE
.PP

.SS "void sf::Text::setColor (const \fBColor\fP & color)"

.PP
Set the fill color of the text\&. By default, the text's fill color is opaque white\&. Setting the fill color to a transparent color with an outline will cause the outline to be displayed in the fill area of the text\&.
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP New fill color of the text
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetFillColor\fP
.RE
.PP
\fBDeprecated\fP
.RS 4
There is now fill and outline colors instead of a single global color\&. Use \fBsetFillColor()\fP or \fBsetOutlineColor()\fP instead\&.
.RE
.PP

.SS "void sf::Text::setFillColor (const \fBColor\fP & color)"

.PP
Set the fill color of the text\&. By default, the text's fill color is opaque white\&. Setting the fill color to a transparent color with an outline will cause the outline to be displayed in the fill area of the text\&.
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP New fill color of the text
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetFillColor\fP 
.RE
.PP

.SS "void sf::Text::setFont (const \fBFont\fP & font)"

.PP
Set the text's font\&. The \fIfont\fP argument refers to a font that must exist as long as the text uses it\&. Indeed, the text doesn't store its own copy of the font, but rather keeps a pointer to the one that you passed to this function\&. If the font is destroyed and the text tries to use it, the behavior is undefined\&.
.PP
\fBParameters\fP
.RS 4
\fIfont\fP New font
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetFont\fP 
.RE
.PP

.SS "void sf::Text::setLetterSpacing (float spacingFactor)"

.PP
Set the letter spacing factor\&. The default spacing between letters is defined by the font\&. This factor doesn't directly apply to the existing spacing between each character, it rather adds a fixed space between them which is calculated from the font metrics and the character size\&. Note that factors below 1 (including negative numbers) bring characters closer to each other\&. By default the letter spacing factor is 1\&.
.PP
\fBParameters\fP
.RS 4
\fIspacingFactor\fP New letter spacing factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetLetterSpacing\fP 
.RE
.PP

.SS "void sf::Text::setLineSpacing (float spacingFactor)"

.PP
Set the line spacing factor\&. The default spacing between lines is defined by the font\&. This method enables you to set a factor for the spacing between lines\&. By default the line spacing factor is 1\&.
.PP
\fBParameters\fP
.RS 4
\fIspacingFactor\fP New line spacing factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetLineSpacing\fP 
.RE
.PP

.SS "void sf::Transformable::setOrigin (const \fBVector2f\fP & origin)\fR [inherited]\fP"

.PP
set the local origin of the object The origin of an object defines the center point for all transformations (position, scale, rotation)\&. The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation)\&. The default origin of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIorigin\fP New origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOrigin\fP 
.RE
.PP

.SS "void sf::Transformable::setOrigin (float x, float y)\fR [inherited]\fP"

.PP
set the local origin of the object The origin of an object defines the center point for all transformations (position, scale, rotation)\&. The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation)\&. The default origin of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP X coordinate of the new origin 
.br
\fIy\fP Y coordinate of the new origin
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOrigin\fP 
.RE
.PP

.SS "void sf::Text::setOutlineColor (const \fBColor\fP & color)"

.PP
Set the outline color of the text\&. By default, the text's outline color is opaque black\&.
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP New outline color of the text
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOutlineColor\fP 
.RE
.PP

.SS "void sf::Text::setOutlineThickness (float thickness)"

.PP
Set the thickness of the text's outline\&. By default, the outline thickness is 0\&.
.PP
Be aware that using a negative value for the outline thickness will cause distorted rendering\&.
.PP
\fBParameters\fP
.RS 4
\fIthickness\fP New outline thickness, in pixels
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetOutlineThickness\fP 
.RE
.PP

.SS "void sf::Transformable::setPosition (const \fBVector2f\fP & position)\fR [inherited]\fP"

.PP
set the position of the object This function completely overwrites the previous position\&. See the move function to apply an offset based on the previous position instead\&. The default position of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP New position
.RE
.PP
\fBSee also\fP
.RS 4
\fBmove\fP, \fBgetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::setPosition (float x, float y)\fR [inherited]\fP"

.PP
set the position of the object This function completely overwrites the previous position\&. See the move function to apply an offset based on the previous position instead\&. The default position of a transformable object is (0, 0)\&.
.PP
\fBParameters\fP
.RS 4
\fIx\fP X coordinate of the new position 
.br
\fIy\fP Y coordinate of the new position
.RE
.PP
\fBSee also\fP
.RS 4
\fBmove\fP, \fBgetPosition\fP 
.RE
.PP

.SS "void sf::Transformable::setRotation (float angle)\fR [inherited]\fP"

.PP
set the orientation of the object This function completely overwrites the previous rotation\&. See the rotate function to add an angle based on the previous rotation instead\&. The default rotation of a transformable object is 0\&.
.PP
\fBParameters\fP
.RS 4
\fIangle\fP New rotation, in degrees
.RE
.PP
\fBSee also\fP
.RS 4
\fBrotate\fP, \fBgetRotation\fP 
.RE
.PP

.SS "void sf::Transformable::setScale (const \fBVector2f\fP & factors)\fR [inherited]\fP"

.PP
set the scale factors of the object This function completely overwrites the previous scale\&. See the scale function to add a factor based on the previous scale instead\&. The default scale of a transformable object is (1, 1)\&.
.PP
\fBParameters\fP
.RS 4
\fIfactors\fP New scale factors
.RE
.PP
\fBSee also\fP
.RS 4
\fBscale\fP, \fBgetScale\fP 
.RE
.PP

.SS "void sf::Transformable::setScale (float factorX, float factorY)\fR [inherited]\fP"

.PP
set the scale factors of the object This function completely overwrites the previous scale\&. See the scale function to add a factor based on the previous scale instead\&. The default scale of a transformable object is (1, 1)\&.
.PP
\fBParameters\fP
.RS 4
\fIfactorX\fP New horizontal scale factor 
.br
\fIfactorY\fP New vertical scale factor
.RE
.PP
\fBSee also\fP
.RS 4
\fBscale\fP, \fBgetScale\fP 
.RE
.PP

.SS "void sf::Text::setString (const \fBString\fP & string)"

.PP
Set the text's string\&. The \fIstring\fP argument is a \fBsf::String\fP, which can automatically be constructed from standard string types\&. So, the following calls are all valid: 
.PP
.nf
text\&.setString("hello");
text\&.setString(L"hello");
text\&.setString(std::string("hello"));
text\&.setString(std::wstring(L"hello"));

.fi
.PP
 A text's string is empty by default\&.
.PP
\fBParameters\fP
.RS 4
\fIstring\fP New string
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetString\fP 
.RE
.PP

.SS "void sf::Text::setStyle (Uint32 style)"

.PP
Set the text's style\&. You can pass a combination of one or more styles, for example \fBsf::Text::Bold\fP | \fBsf::Text::Italic\fP\&. The default style is \fBsf::Text::Regular\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIstyle\fP New style
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetStyle\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
