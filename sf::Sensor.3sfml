.TH "sf::Sensor" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Sensor \- Give access to the real-time state of the sensors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Window/Sensor\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBType\fP { \fBAccelerometer\fP, \fBGyroscope\fP, \fBMagnetometer\fP, \fBGravity\fP, \fBUserAcceleration\fP, \fBOrientation\fP, \fBCount\fP }"
.br
.RI "\fBSensor\fP type\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static bool \fBisAvailable\fP (\fBType\fP sensor)"
.br
.RI "Check if a sensor is available on the underlying platform\&. "
.ti -1c
.RI "static void \fBsetEnabled\fP (\fBType\fP sensor, bool enabled)"
.br
.RI "Enable or disable a sensor\&. "
.ti -1c
.RI "static \fBVector3f\fP \fBgetValue\fP (\fBType\fP sensor)"
.br
.RI "Get the current sensor value\&. "
.in -1c
.SH "Detailed Description"
.PP 
Give access to the real-time state of the sensors\&. 

\fBsf::Sensor\fP provides an interface to the state of the various sensors that a device provides\&.
.PP
It only contains static functions, so it's not meant to be instantiated\&.
.PP
This class allows users to query the sensors values at any time and directly, without having to deal with a window and its events\&. Compared to the SensorChanged event, \fBsf::Sensor\fP can retrieve the state of a sensor at any time (you don't need to store and update its current value on your side)\&.
.PP
Depending on the OS and hardware of the device (phone, tablet, \&.\&.\&.), some sensor types may not be available\&. You should always check the availability of a sensor before trying to read it, with the \fBsf::Sensor::isAvailable\fP function\&.
.PP
You may wonder why some sensor types look so similar, for example Accelerometer and Gravity / UserAcceleration\&. The first one is the raw measurement of the acceleration, and takes into account both the earth gravity and the user movement\&. The others are more precise: they provide these components separately, which is usually more useful\&. In fact they are not direct sensors, they are computed internally based on the raw acceleration and other sensors\&. This is exactly the same for Gyroscope vs Orientation\&.
.PP
Because sensors consume a non-negligible amount of current, they are all disabled by default\&. You must call \fBsf::Sensor::setEnabled\fP for each sensor in which you are interested\&.
.PP
Usage example: 
.PP
.nf
if (sf::Sensor::isAvailable(sf::Sensor::Gravity))
{
    // gravity sensor is available
}

// enable the gravity sensor
sf::Sensor::setEnabled(sf::Sensor::Gravity, true);

// get the current value of gravity
sf::Vector3f gravity = sf::Sensor::getValue(sf::Sensor::Gravity);

.fi
.PP
 
.PP
Definition at line \fB42\fP of file \fBSensor\&.hpp\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBsf::Sensor::Type\fP"

.PP
\fBSensor\fP type\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAccelerometer \fP\fP
Measures the raw acceleration (m/s^2) 
.TP
\fB\fIGyroscope \fP\fP
Measures the raw rotation rates (degrees/s) 
.TP
\fB\fIMagnetometer \fP\fP
Measures the ambient magnetic field (micro-teslas) 
.TP
\fB\fIGravity \fP\fP
Measures the direction and intensity of gravity, independent of device acceleration (m/s^2) 
.TP
\fB\fIUserAcceleration \fP\fP
Measures the direction and intensity of device acceleration, independent of the gravity (m/s^2) 
.TP
\fB\fIOrientation \fP\fP
Measures the absolute 3D orientation (degrees) 
.TP
\fB\fICount \fP\fP
Keep last -- the total number of sensor types\&. 
.PP
Definition at line \fB50\fP of file \fBSensor\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "static \fBVector3f\fP sf::Sensor::getValue (\fBType\fP sensor)\fR [static]\fP"

.PP
Get the current sensor value\&. 
.PP
\fBParameters\fP
.RS 4
\fIsensor\fP \fBSensor\fP to read
.RE
.PP
\fBReturns\fP
.RS 4
The current sensor value 
.RE
.PP

.SS "static bool sf::Sensor::isAvailable (\fBType\fP sensor)\fR [static]\fP"

.PP
Check if a sensor is available on the underlying platform\&. 
.PP
\fBParameters\fP
.RS 4
\fIsensor\fP \fBSensor\fP to check
.RE
.PP
\fBReturns\fP
.RS 4
True if the sensor is available, false otherwise 
.RE
.PP

.SS "static void sf::Sensor::setEnabled (\fBType\fP sensor, bool enabled)\fR [static]\fP"

.PP
Enable or disable a sensor\&. All sensors are disabled by default, to avoid consuming too much battery power\&. Once a sensor is enabled, it starts sending events of the corresponding type\&.
.PP
This function does nothing if the sensor is unavailable\&.
.PP
\fBParameters\fP
.RS 4
\fIsensor\fP \fBSensor\fP to enable 
.br
\fIenabled\fP True to enable, false to disable 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
