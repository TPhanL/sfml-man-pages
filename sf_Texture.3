.TH "sf::Texture" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Texture \- \fBImage\fP living on the graphics card that can be used for drawing\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/Texture\&.hpp>\fP
.PP
Inherits \fBsf::GlResource\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBCoordinateType\fP { \fBNormalized\fP, \fBPixels\fP }"
.br
.RI "Types of texture coordinates that can be used for rendering\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTexture\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBTexture\fP (const \fBTexture\fP &copy)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fB~Texture\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "bool \fBcreate\fP (unsigned int width, unsigned int height)"
.br
.RI "Create the texture\&. "
.ti -1c
.RI "bool \fBloadFromFile\fP (const std::string &filename, const \fBIntRect\fP &area=\fBIntRect\fP())"
.br
.RI "Load the texture from a file on disk\&. "
.ti -1c
.RI "bool \fBloadFromMemory\fP (const void *data, std::size_t size, const \fBIntRect\fP &area=\fBIntRect\fP())"
.br
.RI "Load the texture from a file in memory\&. "
.ti -1c
.RI "bool \fBloadFromStream\fP (\fBInputStream\fP &stream, const \fBIntRect\fP &area=\fBIntRect\fP())"
.br
.RI "Load the texture from a custom stream\&. "
.ti -1c
.RI "bool \fBloadFromImage\fP (const \fBImage\fP &image, const \fBIntRect\fP &area=\fBIntRect\fP())"
.br
.RI "Load the texture from an image\&. "
.ti -1c
.RI "\fBVector2u\fP \fBgetSize\fP () const"
.br
.RI "Return the size of the texture\&. "
.ti -1c
.RI "\fBImage\fP \fBcopyToImage\fP () const"
.br
.RI "Copy the texture pixels to an image\&. "
.ti -1c
.RI "void \fBupdate\fP (const Uint8 *pixels)"
.br
.RI "Update the whole texture from an array of pixels\&. "
.ti -1c
.RI "void \fBupdate\fP (const Uint8 *pixels, unsigned int width, unsigned int height, unsigned int x, unsigned int y)"
.br
.RI "Update a part of the texture from an array of pixels\&. "
.ti -1c
.RI "void \fBupdate\fP (const \fBTexture\fP &texture)"
.br
.RI "Update a part of this texture from another texture\&. "
.ti -1c
.RI "void \fBupdate\fP (const \fBTexture\fP &texture, unsigned int x, unsigned int y)"
.br
.RI "Update a part of this texture from another texture\&. "
.ti -1c
.RI "void \fBupdate\fP (const \fBImage\fP &image)"
.br
.RI "Update the texture from an image\&. "
.ti -1c
.RI "void \fBupdate\fP (const \fBImage\fP &image, unsigned int x, unsigned int y)"
.br
.RI "Update a part of the texture from an image\&. "
.ti -1c
.RI "void \fBupdate\fP (const \fBWindow\fP &window)"
.br
.RI "Update the texture from the contents of a window\&. "
.ti -1c
.RI "void \fBupdate\fP (const \fBWindow\fP &window, unsigned int x, unsigned int y)"
.br
.RI "Update a part of the texture from the contents of a window\&. "
.ti -1c
.RI "void \fBsetSmooth\fP (bool smooth)"
.br
.RI "Enable or disable the smooth filter\&. "
.ti -1c
.RI "bool \fBisSmooth\fP () const"
.br
.RI "Tell whether the smooth filter is enabled or not\&. "
.ti -1c
.RI "void \fBsetSrgb\fP (bool sRgb)"
.br
.RI "Enable or disable conversion from sRGB\&. "
.ti -1c
.RI "bool \fBisSrgb\fP () const"
.br
.RI "Tell whether the texture source is converted from sRGB or not\&. "
.ti -1c
.RI "void \fBsetRepeated\fP (bool repeated)"
.br
.RI "Enable or disable repeating\&. "
.ti -1c
.RI "bool \fBisRepeated\fP () const"
.br
.RI "Tell whether the texture is repeated or not\&. "
.ti -1c
.RI "bool \fBgenerateMipmap\fP ()"
.br
.RI "Generate a mipmap using the current texture data\&. "
.ti -1c
.RI "\fBTexture\fP & \fBoperator=\fP (const \fBTexture\fP &right)"
.br
.RI "Overload of assignment operator\&. "
.ti -1c
.RI "void \fBswap\fP (\fBTexture\fP &right)"
.br
.RI "Swap the contents of this texture with those of another\&. "
.ti -1c
.RI "unsigned int \fBgetNativeHandle\fP () const"
.br
.RI "Get the underlying OpenGL handle of the texture\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBbind\fP (const \fBTexture\fP *texture, \fBCoordinateType\fP coordinateType=\fBNormalized\fP)"
.br
.RI "Bind a texture for rendering\&. "
.ti -1c
.RI "static unsigned int \fBgetMaximumSize\fP ()"
.br
.RI "Get the maximum texture size allowed\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBText\fP"
.br
.ti -1c
.RI "class \fBRenderTexture\fP"
.br
.ti -1c
.RI "class \fBRenderTarget\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBImage\fP living on the graphics card that can be used for drawing\&. 

\fBsf::Texture\fP stores pixels that can be drawn, with a sprite for example\&.
.PP
A texture lives in the graphics card memory, therefore it is very fast to draw a texture to a render target, or copy a render target to a texture (the graphics card can access both directly)\&.
.PP
Being stored in the graphics card memory has some drawbacks\&. A texture cannot be manipulated as freely as a \fBsf::Image\fP, you need to prepare the pixels first and then upload them to the texture in a single operation (see \fBTexture::update\fP)\&.
.PP
\fBsf::Texture\fP makes it easy to convert from/to \fBsf::Image\fP, but keep in mind that these calls require transfers between the graphics card and the central memory, therefore they are slow operations\&.
.PP
A texture can be loaded from an image, but also directly from a file/memory/stream\&. The necessary shortcuts are defined so that you don't need an image first for the most common cases\&. However, if you want to perform some modifications on the pixels before creating the final texture, you can load your file to a \fBsf::Image\fP, do whatever you need with the pixels, and then call \fBTexture::loadFromImage\fP\&.
.PP
Since they live in the graphics card memory, the pixels of a texture cannot be accessed without a slow copy first\&. And they cannot be accessed individually\&. Therefore, if you need to read the texture's pixels (like for pixel-perfect collisions), it is recommended to store the collision information separately, for example in an array of booleans\&.
.PP
Like \fBsf::Image\fP, \fBsf::Texture\fP can handle a unique internal representation of pixels, which is RGBA 32 bits\&. This means that a pixel must be composed of 8 bits red, green, blue and alpha channels -- just like a \fBsf::Color\fP\&.
.PP
Usage example: 
.PP
.nf
// This example shows the most common use of sf::Texture:
// drawing a sprite

// Load a texture from a file
sf::Texture texture;
if (!texture\&.loadFromFile("texture\&.png"))
    return \-1;

// Assign it to a sprite
sf::Sprite sprite;
sprite\&.setTexture(texture);

// Draw the textured sprite
window\&.draw(sprite);

.fi
.PP
.PP
.PP
.nf
// This example shows another common use of sf::Texture:
// streaming real\-time data, like video frames

// Create an empty texture
sf::Texture texture;
if (!texture\&.create(640, 480))
    return \-1;

// Create a sprite that will display the texture
sf::Sprite sprite(texture);

while (\&.\&.\&.) // the main loop
{
    \&.\&.\&.

    // update the texture
    sf::Uint8* pixels = \&.\&.\&.; // get a fresh chunk of pixels (the next frame of a movie, for example)
    texture\&.update(pixels);

    // draw it
    window\&.draw(sprite);

    \&.\&.\&.
}
.fi
.PP
.PP
Like \fBsf::Shader\fP that can be used as a raw OpenGL shader, \fBsf::Texture\fP can also be used directly as a raw texture for custom OpenGL geometry\&. 
.PP
.nf
sf::Texture::bind(&texture);
\&.\&.\&. render OpenGL geometry \&.\&.\&.
sf::Texture::bind(NULL);

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Sprite\fP, \fBsf::Image\fP, \fBsf::RenderTexture\fP 
.RE
.PP

.PP
Definition at line \fB48\fP of file \fBTexture\&.hpp\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBsf::Texture::CoordinateType\fP"

.PP
Types of texture coordinates that can be used for rendering\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINormalized \fP\fP
\fBTexture\fP coordinates in range [0 \&.\&. 1]\&. 
.TP
\fB\fIPixels \fP\fP
\fBTexture\fP coordinates in range [0 \&.\&. size]\&. 
.PP
Definition at line \fB56\fP of file \fBTexture\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Texture::Texture ()"

.PP
Default constructor\&. Creates an empty texture\&. 
.SS "sf::Texture::Texture (const \fBTexture\fP & copy)"

.PP
Copy constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIcopy\fP instance to copy 
.RE
.PP

.SS "sf::Texture::~Texture ()"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "static void sf::Texture::bind (const \fBTexture\fP * texture, \fBCoordinateType\fP coordinateType = \fR\fBNormalized\fP\fP)\fR [static]\fP"

.PP
Bind a texture for rendering\&. This function is not part of the graphics API, it mustn't be used when drawing SFML entities\&. It must be used only if you mix \fBsf::Texture\fP with OpenGL code\&.
.PP
.PP
.nf
sf::Texture t1, t2;
\&.\&.\&.
sf::Texture::bind(&t1);
// draw OpenGL stuff that use t1\&.\&.\&.
sf::Texture::bind(&t2);
// draw OpenGL stuff that use t2\&.\&.\&.
sf::Texture::bind(NULL);
// draw OpenGL stuff that use no texture\&.\&.\&.
.fi
.PP
.PP
The \fIcoordinateType\fP argument controls how texture coordinates will be interpreted\&. If Normalized (the default), they must be in range [0 \&.\&. 1], which is the default way of handling texture coordinates with OpenGL\&. If Pixels, they must be given in pixels (range [0 \&.\&. size])\&. This mode is used internally by the graphics classes of SFML, it makes the definition of texture coordinates more intuitive for the high-level API, users don't need to compute normalized values\&.
.PP
\fBParameters\fP
.RS 4
\fItexture\fP Pointer to the texture to bind, can be null to use no texture 
.br
\fIcoordinateType\fP Type of texture coordinates to use 
.RE
.PP

.SS "\fBImage\fP sf::Texture::copyToImage () const"

.PP
Copy the texture pixels to an image\&. This function performs a slow operation that downloads the texture's pixels from the graphics card and copies them to a new image, potentially applying transformations to pixels if necessary (texture may be padded or flipped)\&.
.PP
\fBReturns\fP
.RS 4
\fBImage\fP containing the texture's pixels
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromImage\fP 
.RE
.PP

.SS "bool sf::Texture::create (unsigned int width, unsigned int height)"

.PP
Create the texture\&. If this function fails, the texture is left unchanged\&.
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP Width of the texture 
.br
\fIheight\fP Height of the texture
.RE
.PP
\fBReturns\fP
.RS 4
True if creation was successful 
.RE
.PP

.SS "bool sf::Texture::generateMipmap ()"

.PP
Generate a mipmap using the current texture data\&. Mipmaps are pre-computed chains of optimized textures\&. Each level of texture in a mipmap is generated by halving each of the previous level's dimensions\&. This is done until the final level has the size of 1x1\&. The textures generated in this process may make use of more advanced filters which might improve the visual quality of textures when they are applied to objects much smaller than they are\&. This is known as minification\&. Because fewer texels (texture elements) have to be sampled from when heavily minified, usage of mipmaps can also improve rendering performance in certain scenarios\&.
.PP
Mipmap generation relies on the necessary OpenGL extension being available\&. If it is unavailable or generation fails due to another reason, this function will return false\&. Mipmap data is only valid from the time it is generated until the next time the base level image is modified, at which point this function will have to be called again to regenerate it\&.
.PP
\fBReturns\fP
.RS 4
True if mipmap generation was successful, false if unsuccessful 
.RE
.PP

.SS "static unsigned int sf::Texture::getMaximumSize ()\fR [static]\fP"

.PP
Get the maximum texture size allowed\&. This maximum size is defined by the graphics driver\&. You can expect a value of 512 pixels for low-end graphics card, and up to 8192 pixels or more for newer hardware\&.
.PP
\fBReturns\fP
.RS 4
Maximum size allowed for textures, in pixels 
.RE
.PP

.SS "unsigned int sf::Texture::getNativeHandle () const"

.PP
Get the underlying OpenGL handle of the texture\&. You shouldn't need to use this function, unless you have very specific stuff to implement that SFML doesn't support, or implement a temporary workaround until a bug is fixed\&.
.PP
\fBReturns\fP
.RS 4
OpenGL handle of the texture or 0 if not yet created 
.RE
.PP

.SS "\fBVector2u\fP sf::Texture::getSize () const"

.PP
Return the size of the texture\&. 
.PP
\fBReturns\fP
.RS 4
Size in pixels 
.RE
.PP

.SS "bool sf::Texture::isRepeated () const"

.PP
Tell whether the texture is repeated or not\&. 
.PP
\fBReturns\fP
.RS 4
True if repeat mode is enabled, false if it is disabled
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetRepeated\fP 
.RE
.PP

.SS "bool sf::Texture::isSmooth () const"

.PP
Tell whether the smooth filter is enabled or not\&. 
.PP
\fBReturns\fP
.RS 4
True if smoothing is enabled, false if it is disabled
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSmooth\fP 
.RE
.PP

.SS "bool sf::Texture::isSrgb () const"

.PP
Tell whether the texture source is converted from sRGB or not\&. 
.PP
\fBReturns\fP
.RS 4
True if the texture source is converted from sRGB, false if not
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSrgb\fP 
.RE
.PP

.SS "bool sf::Texture::loadFromFile (const std::string & filename, const \fBIntRect\fP & area = \fR\fBIntRect\fP()\fP)"

.PP
Load the texture from a file on disk\&. This function is a shortcut for the following code: 
.PP
.nf
sf::Image image;
image\&.loadFromFile(filename);
texture\&.loadFromImage(image, area);

.fi
.PP
.PP
The \fIarea\fP argument can be used to load only a sub-rectangle of the whole image\&. If you want the entire image then leave the default value (which is an empty IntRect)\&. If the \fIarea\fP rectangle crosses the bounds of the image, it is adjusted to fit the image size\&.
.PP
The maximum size for a texture depends on the graphics driver and can be retrieved with the getMaximumSize function\&.
.PP
If this function fails, the texture is left unchanged\&.
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path of the image file to load 
.br
\fIarea\fP Area of the image to load
.RE
.PP
\fBReturns\fP
.RS 4
True if loading was successful
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromMemory\fP, \fBloadFromStream\fP, \fBloadFromImage\fP 
.RE
.PP

.SS "bool sf::Texture::loadFromImage (const \fBImage\fP & image, const \fBIntRect\fP & area = \fR\fBIntRect\fP()\fP)"

.PP
Load the texture from an image\&. The \fIarea\fP argument can be used to load only a sub-rectangle of the whole image\&. If you want the entire image then leave the default value (which is an empty IntRect)\&. If the \fIarea\fP rectangle crosses the bounds of the image, it is adjusted to fit the image size\&.
.PP
The maximum size for a texture depends on the graphics driver and can be retrieved with the getMaximumSize function\&.
.PP
If this function fails, the texture is left unchanged\&.
.PP
\fBParameters\fP
.RS 4
\fIimage\fP \fBImage\fP to load into the texture 
.br
\fIarea\fP Area of the image to load
.RE
.PP
\fBReturns\fP
.RS 4
True if loading was successful
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromMemory\fP 
.RE
.PP

.SS "bool sf::Texture::loadFromMemory (const void * data, std::size_t size, const \fBIntRect\fP & area = \fR\fBIntRect\fP()\fP)"

.PP
Load the texture from a file in memory\&. This function is a shortcut for the following code: 
.PP
.nf
sf::Image image;
image\&.loadFromMemory(data, size);
texture\&.loadFromImage(image, area);

.fi
.PP
.PP
The \fIarea\fP argument can be used to load only a sub-rectangle of the whole image\&. If you want the entire image then leave the default value (which is an empty IntRect)\&. If the \fIarea\fP rectangle crosses the bounds of the image, it is adjusted to fit the image size\&.
.PP
The maximum size for a texture depends on the graphics driver and can be retrieved with the getMaximumSize function\&.
.PP
If this function fails, the texture is left unchanged\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to the file data in memory 
.br
\fIsize\fP Size of the data to load, in bytes 
.br
\fIarea\fP Area of the image to load
.RE
.PP
\fBReturns\fP
.RS 4
True if loading was successful
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromStream\fP, \fBloadFromImage\fP 
.RE
.PP

.SS "bool sf::Texture::loadFromStream (\fBInputStream\fP & stream, const \fBIntRect\fP & area = \fR\fBIntRect\fP()\fP)"

.PP
Load the texture from a custom stream\&. This function is a shortcut for the following code: 
.PP
.nf
sf::Image image;
image\&.loadFromStream(stream);
texture\&.loadFromImage(image, area);

.fi
.PP
.PP
The \fIarea\fP argument can be used to load only a sub-rectangle of the whole image\&. If you want the entire image then leave the default value (which is an empty IntRect)\&. If the \fIarea\fP rectangle crosses the bounds of the image, it is adjusted to fit the image size\&.
.PP
The maximum size for a texture depends on the graphics driver and can be retrieved with the getMaximumSize function\&.
.PP
If this function fails, the texture is left unchanged\&.
.PP
\fBParameters\fP
.RS 4
\fIstream\fP Source stream to read from 
.br
\fIarea\fP Area of the image to load
.RE
.PP
\fBReturns\fP
.RS 4
True if loading was successful
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromMemory\fP, \fBloadFromImage\fP 
.RE
.PP

.SS "\fBTexture\fP & sf::Texture::operator= (const \fBTexture\fP & right)"

.PP
Overload of assignment operator\&. 
.PP
\fBParameters\fP
.RS 4
\fIright\fP Instance to assign
.RE
.PP
\fBReturns\fP
.RS 4
Reference to self 
.RE
.PP

.SS "void sf::Texture::setRepeated (bool repeated)"

.PP
Enable or disable repeating\&. Repeating is involved when using texture coordinates outside the texture rectangle [0, 0, width, height]\&. In this case, if repeat mode is enabled, the whole texture will be repeated as many times as needed to reach the coordinate (for example, if the X texture coordinate is 3 * width, the texture will be repeated 3 times)\&. If repeat mode is disabled, the 'extra space' will instead be filled with border pixels\&. Warning: on very old graphics cards, white pixels may appear when the texture is repeated\&. With such cards, repeat mode can be used reliably only if the texture has power-of-two dimensions (such as 256x128)\&. Repeating is disabled by default\&.
.PP
\fBParameters\fP
.RS 4
\fIrepeated\fP True to repeat the texture, false to disable repeating
.RE
.PP
\fBSee also\fP
.RS 4
\fBisRepeated\fP 
.RE
.PP

.SS "void sf::Texture::setSmooth (bool smooth)"

.PP
Enable or disable the smooth filter\&. When the filter is activated, the texture appears smoother so that pixels are less noticeable\&. However if you want the texture to look exactly the same as its source file, you should leave it disabled\&. The smooth filter is disabled by default\&.
.PP
\fBParameters\fP
.RS 4
\fIsmooth\fP True to enable smoothing, false to disable it
.RE
.PP
\fBSee also\fP
.RS 4
\fBisSmooth\fP 
.RE
.PP

.SS "void sf::Texture::setSrgb (bool sRgb)"

.PP
Enable or disable conversion from sRGB\&. When providing texture data from an image file or memory, it can either be stored in a linear color space or an sRGB color space\&. Most digital images account for gamma correction already, so they would need to be 'uncorrected' back to linear color space before being processed by the hardware\&. The hardware can automatically convert it from the sRGB color space to a linear color space when it gets sampled\&. When the rendered image gets output to the final framebuffer, it gets converted back to sRGB\&.
.PP
After enabling or disabling sRGB conversion, make sure to reload the texture data in order for the setting to take effect\&.
.PP
This option is only useful in conjunction with an sRGB capable framebuffer\&. This can be requested during window creation\&.
.PP
\fBParameters\fP
.RS 4
\fIsRgb\fP True to enable sRGB conversion, false to disable it
.RE
.PP
\fBSee also\fP
.RS 4
\fBisSrgb\fP 
.RE
.PP

.SS "void sf::Texture::swap (\fBTexture\fP & right)"

.PP
Swap the contents of this texture with those of another\&. 
.PP
\fBParameters\fP
.RS 4
\fIright\fP Instance to swap with 
.RE
.PP

.SS "void sf::Texture::update (const \fBImage\fP & image)"

.PP
Update the texture from an image\&. Although the source image can be smaller than the texture, this function is usually used for updating the whole texture\&. The other overload, which has (x, y) additional arguments, is more convenient for updating a sub-area of the texture\&.
.PP
No additional check is performed on the size of the image, passing an image bigger than the texture will lead to an undefined behavior\&.
.PP
This function does nothing if the texture was not previously created\&.
.PP
\fBParameters\fP
.RS 4
\fIimage\fP \fBImage\fP to copy to the texture 
.RE
.PP

.SS "void sf::Texture::update (const \fBImage\fP & image, unsigned int x, unsigned int y)"

.PP
Update a part of the texture from an image\&. No additional check is performed on the size of the image, passing an invalid combination of image size and offset will lead to an undefined behavior\&.
.PP
This function does nothing if the texture was not previously created\&.
.PP
\fBParameters\fP
.RS 4
\fIimage\fP \fBImage\fP to copy to the texture 
.br
\fIx\fP X offset in the texture where to copy the source image 
.br
\fIy\fP Y offset in the texture where to copy the source image 
.RE
.PP

.SS "void sf::Texture::update (const \fBTexture\fP & texture)"

.PP
Update a part of this texture from another texture\&. Although the source texture can be smaller than this texture, this function is usually used for updating the whole texture\&. The other overload, which has (x, y) additional arguments, is more convenient for updating a sub-area of this texture\&.
.PP
No additional check is performed on the size of the passed texture, passing a texture bigger than this texture will lead to an undefined behavior\&.
.PP
This function does nothing if either texture was not previously created\&.
.PP
\fBParameters\fP
.RS 4
\fItexture\fP Source texture to copy to this texture 
.RE
.PP

.SS "void sf::Texture::update (const \fBTexture\fP & texture, unsigned int x, unsigned int y)"

.PP
Update a part of this texture from another texture\&. No additional check is performed on the size of the texture, passing an invalid combination of texture size and offset will lead to an undefined behavior\&.
.PP
This function does nothing if either texture was not previously created\&.
.PP
\fBParameters\fP
.RS 4
\fItexture\fP Source texture to copy to this texture 
.br
\fIx\fP X offset in this texture where to copy the source texture 
.br
\fIy\fP Y offset in this texture where to copy the source texture 
.RE
.PP

.SS "void sf::Texture::update (const Uint8 * pixels)"

.PP
Update the whole texture from an array of pixels\&. The \fIpixel\fP array is assumed to have the same size as the \fIarea\fP rectangle, and to contain 32-bits RGBA pixels\&.
.PP
No additional check is performed on the size of the pixel array, passing invalid arguments will lead to an undefined behavior\&.
.PP
This function does nothing if \fIpixels\fP is null or if the texture was not previously created\&.
.PP
\fBParameters\fP
.RS 4
\fIpixels\fP Array of pixels to copy to the texture 
.RE
.PP

.SS "void sf::Texture::update (const Uint8 * pixels, unsigned int width, unsigned int height, unsigned int x, unsigned int y)"

.PP
Update a part of the texture from an array of pixels\&. The size of the \fIpixel\fP array must match the \fIwidth\fP and \fIheight\fP arguments, and it must contain 32-bits RGBA pixels\&.
.PP
No additional check is performed on the size of the pixel array or the bounds of the area to update, passing invalid arguments will lead to an undefined behavior\&.
.PP
This function does nothing if \fIpixels\fP is null or if the texture was not previously created\&.
.PP
\fBParameters\fP
.RS 4
\fIpixels\fP Array of pixels to copy to the texture 
.br
\fIwidth\fP Width of the pixel region contained in \fIpixels\fP 
.br
\fIheight\fP Height of the pixel region contained in \fIpixels\fP 
.br
\fIx\fP X offset in the texture where to copy the source pixels 
.br
\fIy\fP Y offset in the texture where to copy the source pixels 
.RE
.PP

.SS "void sf::Texture::update (const \fBWindow\fP & window)"

.PP
Update the texture from the contents of a window\&. Although the source window can be smaller than the texture, this function is usually used for updating the whole texture\&. The other overload, which has (x, y) additional arguments, is more convenient for updating a sub-area of the texture\&.
.PP
No additional check is performed on the size of the window, passing a window bigger than the texture will lead to an undefined behavior\&.
.PP
This function does nothing if either the texture or the window was not previously created\&.
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP \fBWindow\fP to copy to the texture 
.RE
.PP

.SS "void sf::Texture::update (const \fBWindow\fP & window, unsigned int x, unsigned int y)"

.PP
Update a part of the texture from the contents of a window\&. No additional check is performed on the size of the window, passing an invalid combination of window size and offset will lead to an undefined behavior\&.
.PP
This function does nothing if either the texture or the window was not previously created\&.
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP \fBWindow\fP to copy to the texture 
.br
\fIx\fP X offset in the texture where to copy the source window 
.br
\fIy\fP Y offset in the texture where to copy the source window 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "friend class \fBRenderTarget\fP\fR [friend]\fP"

.PP
Definition at line \fB590\fP of file \fBTexture\&.hpp\fP\&.
.SS "friend class \fBRenderTexture\fP\fR [friend]\fP"

.PP
Definition at line \fB589\fP of file \fBTexture\&.hpp\fP\&.
.SS "friend class \fBText\fP\fR [friend]\fP"

.PP
Definition at line \fB588\fP of file \fBTexture\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
