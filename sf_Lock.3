.TH "sf::Lock" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Lock \- Automatic wrapper for locking and unlocking mutexes\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/System/Lock\&.hpp>\fP
.PP
Inherits \fBsf::NonCopyable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLock\fP (\fBMutex\fP &mutex)"
.br
.RI "Construct the lock with a target mutex\&. "
.ti -1c
.RI "\fB~Lock\fP ()"
.br
.RI "Destructor\&. "
.in -1c
.SH "Detailed Description"
.PP 
Automatic wrapper for locking and unlocking mutexes\&. 

\fBsf::Lock\fP is a RAII wrapper for \fBsf::Mutex\fP\&.
.PP
By unlocking it in its destructor, it ensures that the mutex will always be released when the current scope (most likely a function) ends\&. This is even more important when an exception or an early return statement can interrupt the execution flow of the function\&.
.PP
For maximum robustness, \fBsf::Lock\fP should always be used to lock/unlock a mutex\&.
.PP
Usage example: 
.PP
.nf
sf::Mutex mutex;

void function()
{
    sf::Lock lock(mutex); // mutex is now locked

    functionThatMayThrowAnException(); // mutex is unlocked if this function throws

    if (someCondition)
        return; // mutex is unlocked

} // mutex is unlocked

.fi
.PP
.PP
Because the mutex is not explicitly unlocked in the code, it may remain locked longer than needed\&. If the region of the code that needs to be protected by the mutex is not the entire function, a good practice is to create a smaller, inner scope so that the lock is limited to this part of the code\&.
.PP
.PP
.nf
sf::Mutex mutex;

void function()
{
    {
      sf::Lock lock(mutex);
      codeThatRequiresProtection();

    } // mutex is unlocked here

    codeThatDoesntCareAboutTheMutex();
}
.fi
.PP
.PP
Having a mutex locked longer than required is a bad practice which can lead to bad performances\&. Don't forget that when a mutex is locked, other threads may be waiting doing nothing until it is released\&.
.PP
\fBSee also\fP
.RS 4
\fBsf::Mutex\fP 
.RE
.PP

.PP
Definition at line \fB43\fP of file \fBLock\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Lock::Lock (\fBMutex\fP & mutex)\fR [explicit]\fP"

.PP
Construct the lock with a target mutex\&. The mutex passed to \fBsf::Lock\fP is automatically locked\&.
.PP
\fBParameters\fP
.RS 4
\fImutex\fP \fBMutex\fP to lock 
.RE
.PP

.SS "sf::Lock::~Lock ()"

.PP
Destructor\&. The destructor of \fBsf::Lock\fP automatically unlocks its mutex\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
