.TH "sf::SoundFileReader" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::SoundFileReader \- Abstract base class for sound file decoding\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Audio/SoundFileReader\&.hpp>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBInfo\fP"
.br
.RI "Structure holding the audio properties of a sound file\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~SoundFileReader\fP ()"
.br
.RI "Virtual destructor\&. "
.ti -1c
.RI "virtual bool \fBopen\fP (\fBInputStream\fP &stream, \fBInfo\fP &info)=0"
.br
.RI "Open a sound file for reading\&. "
.ti -1c
.RI "virtual void \fBseek\fP (Uint64 sampleOffset)=0"
.br
.RI "Change the current read position to the given sample offset\&. "
.ti -1c
.RI "virtual Uint64 \fBread\fP (Int16 *samples, Uint64 maxCount)=0"
.br
.RI "Read audio samples from the open file\&. "
.in -1c
.SH "Detailed Description"
.PP 
Abstract base class for sound file decoding\&. 

This class allows users to read audio file formats not natively supported by SFML, and thus extend the set of supported readable audio formats\&.
.PP
A valid sound file reader must override the open, seek and write functions, as well as providing a static check function; the latter is used by SFML to find a suitable writer for a given input file\&.
.PP
To register a new reader, use the \fBsf::SoundFileFactory::registerReader\fP template function\&.
.PP
Usage example: 
.PP
.nf
class MySoundFileReader : public sf::SoundFileReader
{
public:

    static bool check(sf::InputStream& stream)
    {
        // typically, read the first few header bytes and check fields that identify the format
        // return true if the reader can handle the format
    }

    virtual bool open(sf::InputStream& stream, Info& info)
    {
        // read the sound file header and fill the sound attributes
        // (channel count, sample count and sample rate)
        // return true on success
    }

    virtual void seek(sf::Uint64 sampleOffset)
    {
        // advance to the sampleOffset\-th sample from the beginning of the sound
    }

    virtual sf::Uint64 read(sf::Int16* samples, sf::Uint64 maxCount)
    {
        // read up to 'maxCount' samples into the 'samples' array,
        // convert them (for example from normalized float) if they are not stored
        // as 16\-bits signed integers in the file
        // return the actual number of samples read
    }
};

sf::SoundFileFactory::registerReader<MySoundFileReader>();

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::InputSoundFile\fP, \fBsf::SoundFileFactory\fP, \fBsf::SoundFileWriter\fP 
.RE
.PP

.PP
Definition at line \fB43\fP of file \fBSoundFileReader\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual sf::SoundFileReader::~SoundFileReader ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Virtual destructor\&. 
.PP
Definition at line \fB62\fP of file \fBSoundFileReader\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual bool sf::SoundFileReader::open (\fBInputStream\fP & stream, \fBInfo\fP & info)\fR [pure virtual]\fP"

.PP
Open a sound file for reading\&. The provided stream reference is valid as long as the \fBSoundFileReader\fP is alive, so it is safe to use/store it during the whole lifetime of the reader\&.
.PP
\fBParameters\fP
.RS 4
\fIstream\fP Source stream to read from 
.br
\fIinfo\fP Structure to fill with the properties of the loaded sound
.RE
.PP
\fBReturns\fP
.RS 4
True if the file was successfully opened 
.RE
.PP

.SS "virtual Uint64 sf::SoundFileReader::read (Int16 * samples, Uint64 maxCount)\fR [pure virtual]\fP"

.PP
Read audio samples from the open file\&. 
.PP
\fBParameters\fP
.RS 4
\fIsamples\fP Pointer to the sample array to fill 
.br
\fImaxCount\fP Maximum number of samples to read
.RE
.PP
\fBReturns\fP
.RS 4
Number of samples actually read (may be less than \fImaxCount\fP) 
.RE
.PP

.SS "virtual void sf::SoundFileReader::seek (Uint64 sampleOffset)\fR [pure virtual]\fP"

.PP
Change the current read position to the given sample offset\&. The sample offset takes the channels into account\&. If you have a time offset instead, you can easily find the corresponding sample offset with the following formula: \fRtimeInSeconds * sampleRate * channelCount\fP If the given offset exceeds to total number of samples, this function must jump to the end of the file\&.
.PP
\fBParameters\fP
.RS 4
\fIsampleOffset\fP Index of the sample to jump to, relative to the beginning 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
