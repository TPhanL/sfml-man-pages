.TH "sf::Utf< 32 >" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Utf< 32 > \- Specialization of the \fBUtf\fP template for UTF-32\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/System/Utf\&.hpp>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename In > static In \fBdecode\fP (In begin, In end, Uint32 &output, Uint32 replacement=0)"
.br
.RI "Decode a single UTF-32 character\&. "
.ti -1c
.RI "template<typename Out > static Out \fBencode\fP (Uint32 input, Out output, Uint32 replacement=0)"
.br
.RI "Encode a single UTF-32 character\&. "
.ti -1c
.RI "template<typename In > static In \fBnext\fP (In begin, In end)"
.br
.RI "Advance to the next UTF-32 character\&. "
.ti -1c
.RI "template<typename In > static std::size_t \fBcount\fP (In begin, In end)"
.br
.RI "Count the number of characters of a UTF-32 sequence\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBfromAnsi\fP (In begin, In end, Out output, const std::locale &locale=std::locale())"
.br
.RI "Convert an ANSI characters range to UTF-32\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBfromWide\fP (In begin, In end, Out output)"
.br
.RI "Convert a wide characters range to UTF-32\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBfromLatin1\fP (In begin, In end, Out output)"
.br
.RI "Convert a latin-1 (ISO-5589-1) characters range to UTF-32\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBtoAnsi\fP (In begin, In end, Out output, char replacement=0, const std::locale &locale=std::locale())"
.br
.RI "Convert an UTF-32 characters range to ANSI characters\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBtoWide\fP (In begin, In end, Out output, wchar_t replacement=0)"
.br
.RI "Convert an UTF-32 characters range to wide characters\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBtoLatin1\fP (In begin, In end, Out output, char replacement=0)"
.br
.RI "Convert an UTF-16 characters range to latin-1 (ISO-5589-1) characters\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBtoUtf8\fP (In begin, In end, Out output)"
.br
.RI "Convert a UTF-32 characters range to UTF-8\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBtoUtf16\fP (In begin, In end, Out output)"
.br
.RI "Convert a UTF-32 characters range to UTF-16\&. "
.ti -1c
.RI "template<typename In , typename Out > static Out \fBtoUtf32\fP (In begin, In end, Out output)"
.br
.RI "Convert a UTF-32 characters range to UTF-32\&. "
.ti -1c
.RI "template<typename In > static Uint32 \fBdecodeAnsi\fP (In input, const std::locale &locale=std::locale())"
.br
.RI "Decode a single ANSI character to UTF-32\&. "
.ti -1c
.RI "template<typename In > static Uint32 \fBdecodeWide\fP (In input)"
.br
.RI "Decode a single wide character to UTF-32\&. "
.ti -1c
.RI "template<typename Out > static Out \fBencodeAnsi\fP (Uint32 codepoint, Out output, char replacement=0, const std::locale &locale=std::locale())"
.br
.RI "Encode a single UTF-32 character to ANSI\&. "
.ti -1c
.RI "template<typename Out > static Out \fBencodeWide\fP (Uint32 codepoint, Out output, wchar_t replacement=0)"
.br
.RI "Encode a single UTF-32 character to wide\&. "
.in -1c
.SH "Detailed Description"
.PP 
Specialization of the \fBUtf\fP template for UTF-32\&. 
.PP
Definition at line \fB462\fP of file \fBUtf\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename In > static std::size_t \fBsf::Utf\fP< 32 >::count (In begin, In end)\fR [static]\fP"

.PP
Count the number of characters of a UTF-32 sequence\&. This function is trivial for UTF-32, which can store every character in a single storage element\&.
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence
.RE
.PP
\fBReturns\fP
.RS 4
Iterator pointing to one past the last read element of the input sequence 
.RE
.PP

.SS "template<typename In > static In \fBsf::Utf\fP< 32 >::decode (In begin, In end, Uint32 & output, Uint32 replacement = \fR0\fP)\fR [static]\fP"

.PP
Decode a single UTF-32 character\&. Decoding a character means finding its unique 32-bits code (called the codepoint) in the Unicode standard\&. For UTF-32, the character value is the same as the codepoint\&.
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Codepoint of the decoded UTF-32 character 
.br
\fIreplacement\fP Replacement character to use in case the UTF-8 sequence is invalid
.RE
.PP
\fBReturns\fP
.RS 4
Iterator pointing to one past the last read element of the input sequence 
.RE
.PP

.SS "template<typename In > static Uint32 \fBsf::Utf\fP< 32 >::decodeAnsi (In input, const std::locale & locale = \fRstd::locale()\fP)\fR [static]\fP"

.PP
Decode a single ANSI character to UTF-32\&. This function does not exist in other specializations of sf::Utf<>, it is defined for convenience (it is used by several other conversion functions)\&.
.PP
\fBParameters\fP
.RS 4
\fIinput\fP Input ANSI character 
.br
\fIlocale\fP Locale to use for conversion
.RE
.PP
\fBReturns\fP
.RS 4
Converted character 
.RE
.PP

.SS "template<typename In > static Uint32 \fBsf::Utf\fP< 32 >::decodeWide (In input)\fR [static]\fP"

.PP
Decode a single wide character to UTF-32\&. This function does not exist in other specializations of sf::Utf<>, it is defined for convenience (it is used by several other conversion functions)\&.
.PP
\fBParameters\fP
.RS 4
\fIinput\fP Input wide character
.RE
.PP
\fBReturns\fP
.RS 4
Converted character 
.RE
.PP

.SS "template<typename Out > static Out \fBsf::Utf\fP< 32 >::encode (Uint32 input, Out output, Uint32 replacement = \fR0\fP)\fR [static]\fP"

.PP
Encode a single UTF-32 character\&. Encoding a character means converting a unique 32-bits code (called the codepoint) in the target encoding, UTF-32\&. For UTF-32, the codepoint is the same as the character value\&.
.PP
\fBParameters\fP
.RS 4
\fIinput\fP Codepoint to encode as UTF-32 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence 
.br
\fIreplacement\fP Replacement for characters not convertible to UTF-32 (use 0 to skip them)
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename Out > static Out \fBsf::Utf\fP< 32 >::encodeAnsi (Uint32 codepoint, Out output, char replacement = \fR0\fP, const std::locale & locale = \fRstd::locale()\fP)\fR [static]\fP"

.PP
Encode a single UTF-32 character to ANSI\&. This function does not exist in other specializations of sf::Utf<>, it is defined for convenience (it is used by several other conversion functions)\&.
.PP
\fBParameters\fP
.RS 4
\fIcodepoint\fP Iterator pointing to the beginning of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence 
.br
\fIreplacement\fP Replacement if the input character is not convertible to ANSI (use 0 to skip it) 
.br
\fIlocale\fP Locale to use for conversion
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename Out > static Out \fBsf::Utf\fP< 32 >::encodeWide (Uint32 codepoint, Out output, wchar_t replacement = \fR0\fP)\fR [static]\fP"

.PP
Encode a single UTF-32 character to wide\&. This function does not exist in other specializations of sf::Utf<>, it is defined for convenience (it is used by several other conversion functions)\&.
.PP
\fBParameters\fP
.RS 4
\fIcodepoint\fP Iterator pointing to the beginning of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence 
.br
\fIreplacement\fP Replacement if the input character is not convertible to wide (use 0 to skip it)
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::fromAnsi (In begin, In end, Out output, const std::locale & locale = \fRstd::locale()\fP)\fR [static]\fP"

.PP
Convert an ANSI characters range to UTF-32\&. The current global locale will be used by default, unless you pass a custom one in the \fIlocale\fP parameter\&.
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence 
.br
\fIlocale\fP Locale to use for conversion
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::fromLatin1 (In begin, In end, Out output)\fR [static]\fP"

.PP
Convert a latin-1 (ISO-5589-1) characters range to UTF-32\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::fromWide (In begin, In end, Out output)\fR [static]\fP"

.PP
Convert a wide characters range to UTF-32\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In > static In \fBsf::Utf\fP< 32 >::next (In begin, In end)\fR [static]\fP"

.PP
Advance to the next UTF-32 character\&. This function is trivial for UTF-32, which can store every character in a single storage element\&.
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence
.RE
.PP
\fBReturns\fP
.RS 4
Iterator pointing to one past the last read element of the input sequence 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::toAnsi (In begin, In end, Out output, char replacement = \fR0\fP, const std::locale & locale = \fRstd::locale()\fP)\fR [static]\fP"

.PP
Convert an UTF-32 characters range to ANSI characters\&. The current global locale will be used by default, unless you pass a custom one in the \fIlocale\fP parameter\&.
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence 
.br
\fIreplacement\fP Replacement for characters not convertible to ANSI (use 0 to skip them) 
.br
\fIlocale\fP Locale to use for conversion
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::toLatin1 (In begin, In end, Out output, char replacement = \fR0\fP)\fR [static]\fP"

.PP
Convert an UTF-16 characters range to latin-1 (ISO-5589-1) characters\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence 
.br
\fIreplacement\fP Replacement for characters not convertible to wide (use 0 to skip them)
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::toUtf16 (In begin, In end, Out output)\fR [static]\fP"

.PP
Convert a UTF-32 characters range to UTF-16\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::toUtf32 (In begin, In end, Out output)\fR [static]\fP"

.PP
Convert a UTF-32 characters range to UTF-32\&. This functions does nothing more than a direct copy; it is defined only to provide the same interface as other specializations of the sf::Utf<> template, and allow generic code to be written on top of it\&.
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::toUtf8 (In begin, In end, Out output)\fR [static]\fP"

.PP
Convert a UTF-32 characters range to UTF-8\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP

.SS "template<typename In , typename Out > static Out \fBsf::Utf\fP< 32 >::toWide (In begin, In end, Out output, wchar_t replacement = \fR0\fP)\fR [static]\fP"

.PP
Convert an UTF-32 characters range to wide characters\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Iterator pointing to the beginning of the input sequence 
.br
\fIend\fP Iterator pointing to the end of the input sequence 
.br
\fIoutput\fP Iterator pointing to the beginning of the output sequence 
.br
\fIreplacement\fP Replacement for characters not convertible to wide (use 0 to skip them)
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to the end of the output sequence which has been written 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
