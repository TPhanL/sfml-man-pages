.TH "sf::VertexArray" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::VertexArray \- Define a set of one or more 2D primitives\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/VertexArray\&.hpp>\fP
.PP
Inherits \fBsf::Drawable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVertexArray\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBVertexArray\fP (\fBPrimitiveType\fP type, std::size_t vertexCount=0)"
.br
.RI "Construct the vertex array with a type and an initial number of vertices\&. "
.ti -1c
.RI "std::size_t \fBgetVertexCount\fP () const"
.br
.RI "Return the vertex count\&. "
.ti -1c
.RI "\fBVertex\fP & \fBoperator[]\fP (std::size_t index)"
.br
.RI "Get a read-write access to a vertex by its index\&. "
.ti -1c
.RI "const \fBVertex\fP & \fBoperator[]\fP (std::size_t index) const"
.br
.RI "Get a read-only access to a vertex by its index\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Clear the vertex array\&. "
.ti -1c
.RI "void \fBresize\fP (std::size_t vertexCount)"
.br
.RI "Resize the vertex array\&. "
.ti -1c
.RI "void \fBappend\fP (const \fBVertex\fP &vertex)"
.br
.RI "Add a vertex to the array\&. "
.ti -1c
.RI "void \fBsetPrimitiveType\fP (\fBPrimitiveType\fP type)"
.br
.RI "Set the type of primitives to draw\&. "
.ti -1c
.RI "\fBPrimitiveType\fP \fBgetPrimitiveType\fP () const"
.br
.RI "Get the type of primitives drawn by the vertex array\&. "
.ti -1c
.RI "\fBFloatRect\fP \fBgetBounds\fP () const"
.br
.RI "Compute the bounding rectangle of the vertex array\&. "
.in -1c
.SH "Detailed Description"
.PP 
Define a set of one or more 2D primitives\&. 

\fBsf::VertexArray\fP is a very simple wrapper around a dynamic array of vertices and a primitives type\&.
.PP
It inherits \fBsf::Drawable\fP, but unlike other drawables it is not transformable\&.
.PP
Example: 
.PP
.nf
sf::VertexArray lines(sf::LineStrip, 4);
lines[0]\&.position = sf::Vector2f(10, 0);
lines[1]\&.position = sf::Vector2f(20, 0);
lines[2]\&.position = sf::Vector2f(30, 5);
lines[3]\&.position = sf::Vector2f(40, 2);

window\&.draw(lines);

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Vertex\fP 
.RE
.PP

.PP
Definition at line \fB45\fP of file \fBVertexArray\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::VertexArray::VertexArray ()"

.PP
Default constructor\&. Creates an empty vertex array\&. 
.SS "sf::VertexArray::VertexArray (\fBPrimitiveType\fP type, std::size_t vertexCount = \fR0\fP)\fR [explicit]\fP"

.PP
Construct the vertex array with a type and an initial number of vertices\&. 
.PP
\fBParameters\fP
.RS 4
\fItype\fP Type of primitives 
.br
\fIvertexCount\fP Initial number of vertices in the array 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void sf::VertexArray::append (const \fBVertex\fP & vertex)"

.PP
Add a vertex to the array\&. 
.PP
\fBParameters\fP
.RS 4
\fIvertex\fP \fBVertex\fP to add 
.RE
.PP

.SS "void sf::VertexArray::clear ()"

.PP
Clear the vertex array\&. This function removes all the vertices from the array\&. It doesn't deallocate the corresponding memory, so that adding new vertices after clearing doesn't involve reallocating all the memory\&. 
.SS "\fBFloatRect\fP sf::VertexArray::getBounds () const"

.PP
Compute the bounding rectangle of the vertex array\&. This function returns the minimal axis-aligned rectangle that contains all the vertices of the array\&.
.PP
\fBReturns\fP
.RS 4
Bounding rectangle of the vertex array 
.RE
.PP

.SS "\fBPrimitiveType\fP sf::VertexArray::getPrimitiveType () const"

.PP
Get the type of primitives drawn by the vertex array\&. 
.PP
\fBReturns\fP
.RS 4
Primitive type 
.RE
.PP

.SS "std::size_t sf::VertexArray::getVertexCount () const"

.PP
Return the vertex count\&. 
.PP
\fBReturns\fP
.RS 4
Number of vertices in the array 
.RE
.PP

.SS "\fBVertex\fP & sf::VertexArray::operator[] (std::size_t index)"

.PP
Get a read-write access to a vertex by its index\&. This function doesn't check \fIindex\fP, it must be in range [0, \fBgetVertexCount()\fP - 1]\&. The behavior is undefined otherwise\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the vertex to get
.RE
.PP
\fBReturns\fP
.RS 4
Reference to the index-th vertex
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetVertexCount\fP 
.RE
.PP

.SS "const \fBVertex\fP & sf::VertexArray::operator[] (std::size_t index) const"

.PP
Get a read-only access to a vertex by its index\&. This function doesn't check \fIindex\fP, it must be in range [0, \fBgetVertexCount()\fP - 1]\&. The behavior is undefined otherwise\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the vertex to get
.RE
.PP
\fBReturns\fP
.RS 4
Const reference to the index-th vertex
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetVertexCount\fP 
.RE
.PP

.SS "void sf::VertexArray::resize (std::size_t vertexCount)"

.PP
Resize the vertex array\&. If \fIvertexCount\fP is greater than the current size, the previous vertices are kept and new (default-constructed) vertices are added\&. If \fIvertexCount\fP is less than the current size, existing vertices are removed from the array\&.
.PP
\fBParameters\fP
.RS 4
\fIvertexCount\fP New size of the array (number of vertices) 
.RE
.PP

.SS "void sf::VertexArray::setPrimitiveType (\fBPrimitiveType\fP type)"

.PP
Set the type of primitives to draw\&. This function defines how the vertices must be interpreted when it's time to draw them: 
.PD 0
.IP "\(bu" 1
As points 
.IP "\(bu" 1
As lines 
.IP "\(bu" 1
As triangles 
.IP "\(bu" 1
As quads The default primitive type is \fBsf::Points\fP\&.
.PP
\fBParameters\fP
.RS 4
\fItype\fP Type of primitive 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
