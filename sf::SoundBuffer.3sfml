.TH "sf::SoundBuffer" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::SoundBuffer \- Storage for audio samples defining a sound\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Audio/SoundBuffer\&.hpp>\fP
.PP
Inherits \fBsf::AlResource\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoundBuffer\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBSoundBuffer\fP (const \fBSoundBuffer\fP &copy)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fB~SoundBuffer\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "bool \fBloadFromFile\fP (const std::string &filename)"
.br
.RI "Load the sound buffer from a file\&. "
.ti -1c
.RI "bool \fBloadFromMemory\fP (const void *data, std::size_t sizeInBytes)"
.br
.RI "Load the sound buffer from a file in memory\&. "
.ti -1c
.RI "bool \fBloadFromStream\fP (\fBInputStream\fP &stream)"
.br
.RI "Load the sound buffer from a custom stream\&. "
.ti -1c
.RI "bool \fBloadFromSamples\fP (const Int16 *samples, Uint64 sampleCount, unsigned int channelCount, unsigned int sampleRate)"
.br
.RI "Load the sound buffer from an array of audio samples\&. "
.ti -1c
.RI "bool \fBsaveToFile\fP (const std::string &filename) const"
.br
.RI "Save the sound buffer to an audio file\&. "
.ti -1c
.RI "const Int16 * \fBgetSamples\fP () const"
.br
.RI "Get the array of audio samples stored in the buffer\&. "
.ti -1c
.RI "Uint64 \fBgetSampleCount\fP () const"
.br
.RI "Get the number of samples stored in the buffer\&. "
.ti -1c
.RI "unsigned int \fBgetSampleRate\fP () const"
.br
.RI "Get the sample rate of the sound\&. "
.ti -1c
.RI "unsigned int \fBgetChannelCount\fP () const"
.br
.RI "Get the number of channels used by the sound\&. "
.ti -1c
.RI "\fBTime\fP \fBgetDuration\fP () const"
.br
.RI "Get the total duration of the sound\&. "
.ti -1c
.RI "\fBSoundBuffer\fP & \fBoperator=\fP (const \fBSoundBuffer\fP &right)"
.br
.RI "Overload of assignment operator\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBSound\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Storage for audio samples defining a sound\&. 

A sound buffer holds the data of a sound, which is an array of audio samples\&.
.PP
A sample is a 16 bits signed integer that defines the amplitude of the sound at a given time\&. The sound is then reconstituted by playing these samples at a high rate (for example, 44100 samples per second is the standard rate used for playing CDs)\&. In short, audio samples are like texture pixels, and a \fBsf::SoundBuffer\fP is similar to a \fBsf::Texture\fP\&.
.PP
A sound buffer can be loaded from a file (see \fBloadFromFile()\fP for the complete list of supported formats), from memory, from a custom stream (see \fBsf::InputStream\fP) or directly from an array of samples\&. It can also be saved back to a file\&.
.PP
\fBSound\fP buffers alone are not very useful: they hold the audio data but cannot be played\&. To do so, you need to use the \fBsf::Sound\fP class, which provides functions to play/pause/stop the sound as well as changing the way it is outputted (volume, pitch, 3D position, \&.\&.\&.)\&. This separation allows more flexibility and better performances: indeed a \fBsf::SoundBuffer\fP is a heavy resource, and any operation on it is slow (often too slow for real-time applications)\&. On the other side, a \fBsf::Sound\fP is a lightweight object, which can use the audio data of a sound buffer and change the way it is played without actually modifying that data\&. Note that it is also possible to bind several \fBsf::Sound\fP instances to the same \fBsf::SoundBuffer\fP\&.
.PP
It is important to note that the \fBsf::Sound\fP instance doesn't copy the buffer that it uses, it only keeps a reference to it\&. Thus, a \fBsf::SoundBuffer\fP must not be destructed while it is used by a \fBsf::Sound\fP (i\&.e\&. never write a function that uses a local \fBsf::SoundBuffer\fP instance for loading a sound)\&.
.PP
Usage example: 
.PP
.nf
// Declare a new sound buffer
sf::SoundBuffer buffer;

// Load it from a file
if (!buffer\&.loadFromFile("sound\&.wav"))
{
    // error\&.\&.\&.
}

// Create a sound source and bind it to the buffer
sf::Sound sound1;
sound1\&.setBuffer(buffer);

// Play the sound
sound1\&.play();

// Create another sound source bound to the same buffer
sf::Sound sound2;
sound2\&.setBuffer(buffer);

// Play it with a higher pitch \-\- the first sound remains unchanged
sound2\&.setPitch(2);
sound2\&.play();

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Sound\fP, \fBsf::SoundBufferRecorder\fP 
.RE
.PP

.PP
Definition at line \fB49\fP of file \fBSoundBuffer\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::SoundBuffer::SoundBuffer ()"

.PP
Default constructor\&. 
.SS "sf::SoundBuffer::SoundBuffer (const \fBSoundBuffer\fP & copy)"

.PP
Copy constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIcopy\fP Instance to copy 
.RE
.PP

.SS "sf::SoundBuffer::~SoundBuffer ()"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "unsigned int sf::SoundBuffer::getChannelCount () const"

.PP
Get the number of channels used by the sound\&. If the sound is mono then the number of channels will be 1, 2 for stereo, etc\&.
.PP
\fBReturns\fP
.RS 4
Number of channels
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSampleRate\fP, \fBgetDuration\fP 
.RE
.PP

.SS "\fBTime\fP sf::SoundBuffer::getDuration () const"

.PP
Get the total duration of the sound\&. 
.PP
\fBReturns\fP
.RS 4
\fBSound\fP duration
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSampleRate\fP, \fBgetChannelCount\fP 
.RE
.PP

.SS "Uint64 sf::SoundBuffer::getSampleCount () const"

.PP
Get the number of samples stored in the buffer\&. The array of samples can be accessed with the \fBgetSamples()\fP function\&.
.PP
\fBReturns\fP
.RS 4
Number of samples
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSamples\fP 
.RE
.PP

.SS "unsigned int sf::SoundBuffer::getSampleRate () const"

.PP
Get the sample rate of the sound\&. The sample rate is the number of samples played per second\&. The higher, the better the quality (for example, 44100 samples/s is CD quality)\&.
.PP
\fBReturns\fP
.RS 4
Sample rate (number of samples per second)
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetChannelCount\fP, \fBgetDuration\fP 
.RE
.PP

.SS "const Int16 * sf::SoundBuffer::getSamples () const"

.PP
Get the array of audio samples stored in the buffer\&. The format of the returned samples is 16 bits signed integer (sf::Int16)\&. The total number of samples in this array is given by the \fBgetSampleCount()\fP function\&.
.PP
\fBReturns\fP
.RS 4
Read-only pointer to the array of sound samples
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSampleCount\fP 
.RE
.PP

.SS "bool sf::SoundBuffer::loadFromFile (const std::string & filename)"

.PP
Load the sound buffer from a file\&. See the documentation of \fBsf::InputSoundFile\fP for the list of supported formats\&.
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path of the sound file to load
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromMemory\fP, \fBloadFromStream\fP, \fBloadFromSamples\fP, \fBsaveToFile\fP 
.RE
.PP

.SS "bool sf::SoundBuffer::loadFromMemory (const void * data, std::size_t sizeInBytes)"

.PP
Load the sound buffer from a file in memory\&. See the documentation of \fBsf::InputSoundFile\fP for the list of supported formats\&.
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to the file data in memory 
.br
\fIsizeInBytes\fP Size of the data to load, in bytes
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromStream\fP, \fBloadFromSamples\fP 
.RE
.PP

.SS "bool sf::SoundBuffer::loadFromSamples (const Int16 * samples, Uint64 sampleCount, unsigned int channelCount, unsigned int sampleRate)"

.PP
Load the sound buffer from an array of audio samples\&. The assumed format of the audio samples is 16 bits signed integer (sf::Int16)\&.
.PP
\fBParameters\fP
.RS 4
\fIsamples\fP Pointer to the array of samples in memory 
.br
\fIsampleCount\fP Number of samples in the array 
.br
\fIchannelCount\fP Number of channels (1 = mono, 2 = stereo, \&.\&.\&.) 
.br
\fIsampleRate\fP Sample rate (number of samples to play per second)
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromMemory\fP, \fBsaveToFile\fP 
.RE
.PP

.SS "bool sf::SoundBuffer::loadFromStream (\fBInputStream\fP & stream)"

.PP
Load the sound buffer from a custom stream\&. See the documentation of \fBsf::InputSoundFile\fP for the list of supported formats\&.
.PP
\fBParameters\fP
.RS 4
\fIstream\fP Source stream to read from
.RE
.PP
\fBReturns\fP
.RS 4
True if loading succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromMemory\fP, \fBloadFromSamples\fP 
.RE
.PP

.SS "\fBSoundBuffer\fP & sf::SoundBuffer::operator= (const \fBSoundBuffer\fP & right)"

.PP
Overload of assignment operator\&. 
.PP
\fBParameters\fP
.RS 4
\fIright\fP Instance to assign
.RE
.PP
\fBReturns\fP
.RS 4
Reference to self 
.RE
.PP

.SS "bool sf::SoundBuffer::saveToFile (const std::string & filename) const"

.PP
Save the sound buffer to an audio file\&. See the documentation of \fBsf::OutputSoundFile\fP for the list of supported formats\&.
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path of the sound file to write
.RE
.PP
\fBReturns\fP
.RS 4
True if saving succeeded, false if it failed
.RE
.PP
\fBSee also\fP
.RS 4
\fBloadFromFile\fP, \fBloadFromMemory\fP, \fBloadFromSamples\fP 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "friend class \fBSound\fP\fR [friend]\fP"

.PP
Definition at line \fB228\fP of file \fBSoundBuffer\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
