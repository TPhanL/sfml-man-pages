.TH "sf::SocketSelector" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::SocketSelector \- Multiplexer that allows to read from multiple sockets\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Network/SocketSelector\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSocketSelector\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBSocketSelector\fP (const \fBSocketSelector\fP &copy)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fB~SocketSelector\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBadd\fP (\fBSocket\fP &socket)"
.br
.RI "Add a new socket to the selector\&. "
.ti -1c
.RI "void \fBremove\fP (\fBSocket\fP &socket)"
.br
.RI "Remove a socket from the selector\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Remove all the sockets stored in the selector\&. "
.ti -1c
.RI "bool \fBwait\fP (\fBTime\fP timeout=\fBTime::Zero\fP)"
.br
.RI "Wait until one or more sockets are ready to receive\&. "
.ti -1c
.RI "bool \fBisReady\fP (\fBSocket\fP &socket) const"
.br
.RI "Test a socket to know if it is ready to receive data\&. "
.ti -1c
.RI "\fBSocketSelector\fP & \fBoperator=\fP (const \fBSocketSelector\fP &right)"
.br
.RI "Overload of assignment operator\&. "
.in -1c
.SH "Detailed Description"
.PP 
Multiplexer that allows to read from multiple sockets\&. 

\fBSocket\fP selectors provide a way to wait until some data is available on a set of sockets, instead of just one\&.
.PP
This is convenient when you have multiple sockets that may possibly receive data, but you don't know which one will be ready first\&. In particular, it avoids to use a thread for each socket; with selectors, a single thread can handle all the sockets\&.
.PP
All types of sockets can be used in a selector: 
.PD 0
.IP "\(bu" 1
\fBsf::TcpListener\fP 
.IP "\(bu" 1
\fBsf::TcpSocket\fP 
.IP "\(bu" 1
\fBsf::UdpSocket\fP
.PP
A selector doesn't store its own copies of the sockets (socket classes are not copyable anyway), it simply keeps a reference to the original sockets that you pass to the 'add' function\&. Therefore, you can't use the selector as a socket container, you must store them outside and make sure that they are alive as long as they are used in the selector\&.
.PP
Using a selector is simple: 
.PD 0
.IP "\(bu" 1
populate the selector with all the sockets that you want to observe 
.IP "\(bu" 1
make it wait until there is data available on any of the sockets 
.IP "\(bu" 1
test each socket to find out which ones are ready
.PP
Usage example: 
.PP
.nf
// Create a socket to listen to new connections
sf::TcpListener listener;
listener\&.listen(55001);

// Create a list to store the future clients
std::list<sf::TcpSocket*> clients;

// Create a selector
sf::SocketSelector selector;

// Add the listener to the selector
selector\&.add(listener);

// Endless loop that waits for new connections
while (running)
{
    // Make the selector wait for data on any socket
    if (selector\&.wait())
    {
        // Test the listener
        if (selector\&.isReady(listener))
        {
            // The listener is ready: there is a pending connection
            sf::TcpSocket* client = new sf::TcpSocket;
            if (listener\&.accept(*client) == sf::Socket::Done)
            {
                // Add the new client to the clients list
                clients\&.push_back(client);

                // Add the new client to the selector so that we will
                // be notified when he sends something
                selector\&.add(*client);
            }
            else
            {
                // Error, we won't get a new connection, delete the socket
                delete client;
            }
        }
        else
        {
            // The listener socket is not ready, test all other sockets (the clients)
            for (std::list<sf::TcpSocket*>::iterator it = clients\&.begin(); it != clients\&.end(); ++it)
            {
                sf::TcpSocket& client = **it;
                if (selector\&.isReady(client))
                {
                    // The client has sent some data, we can receive it
                    sf::Packet packet;
                    if (client\&.receive(packet) == sf::Socket::Done)
                    {
                        \&.\&.\&.
                    }
                }
            }
        }
    }
}

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Socket\fP 
.RE
.PP

.PP
Definition at line \fB43\fP of file \fBSocketSelector\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::SocketSelector::SocketSelector ()"

.PP
Default constructor\&. 
.SS "sf::SocketSelector::SocketSelector (const \fBSocketSelector\fP & copy)"

.PP
Copy constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIcopy\fP Instance to copy 
.RE
.PP

.SS "sf::SocketSelector::~SocketSelector ()"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void sf::SocketSelector::add (\fBSocket\fP & socket)"

.PP
Add a new socket to the selector\&. This function keeps a weak reference to the socket, so you have to make sure that the socket is not destroyed while it is stored in the selector\&. This function does nothing if the socket is not valid\&.
.PP
\fBParameters\fP
.RS 4
\fIsocket\fP Reference to the socket to add
.RE
.PP
\fBSee also\fP
.RS 4
\fBremove\fP, \fBclear\fP 
.RE
.PP

.SS "void sf::SocketSelector::clear ()"

.PP
Remove all the sockets stored in the selector\&. This function doesn't destroy any instance, it simply removes all the references that the selector has to external sockets\&.
.PP
\fBSee also\fP
.RS 4
\fBadd\fP, \fBremove\fP 
.RE
.PP

.SS "bool sf::SocketSelector::isReady (\fBSocket\fP & socket) const"

.PP
Test a socket to know if it is ready to receive data\&. This function must be used after a call to Wait, to know which sockets are ready to receive data\&. If a socket is ready, a call to receive will never block because we know that there is data available to read\&. Note that if this function returns true for a \fBTcpListener\fP, this means that it is ready to accept a new connection\&.
.PP
\fBParameters\fP
.RS 4
\fIsocket\fP \fBSocket\fP to test
.RE
.PP
\fBReturns\fP
.RS 4
True if the socket is ready to read, false otherwise
.RE
.PP
\fBSee also\fP
.RS 4
\fBisReady\fP 
.RE
.PP

.SS "\fBSocketSelector\fP & sf::SocketSelector::operator= (const \fBSocketSelector\fP & right)"

.PP
Overload of assignment operator\&. 
.PP
\fBParameters\fP
.RS 4
\fIright\fP Instance to assign
.RE
.PP
\fBReturns\fP
.RS 4
Reference to self 
.RE
.PP

.SS "void sf::SocketSelector::remove (\fBSocket\fP & socket)"

.PP
Remove a socket from the selector\&. This function doesn't destroy the socket, it simply removes the reference that the selector has to it\&.
.PP
\fBParameters\fP
.RS 4
\fIsocket\fP Reference to the socket to remove
.RE
.PP
\fBSee also\fP
.RS 4
\fBadd\fP, \fBclear\fP 
.RE
.PP

.SS "bool sf::SocketSelector::wait (\fBTime\fP timeout = \fR\fBTime::Zero\fP\fP)"

.PP
Wait until one or more sockets are ready to receive\&. This function returns as soon as at least one socket has some data available to be received\&. To know which sockets are ready, use the isReady function\&. If you use a timeout and no socket is ready before the timeout is over, the function returns false\&.
.PP
\fBParameters\fP
.RS 4
\fItimeout\fP Maximum time to wait, (use \fBTime::Zero\fP for infinity)
.RE
.PP
\fBReturns\fP
.RS 4
True if there are sockets ready, false otherwise
.RE
.PP
\fBSee also\fP
.RS 4
\fBisReady\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
