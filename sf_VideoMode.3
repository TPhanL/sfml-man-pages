.TH "sf::VideoMode" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::VideoMode \- \fBVideoMode\fP defines a video mode (width, height, bpp)  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Window/VideoMode\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVideoMode\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBVideoMode\fP (unsigned int modeWidth, unsigned int modeHeight, unsigned int modeBitsPerPixel=32)"
.br
.RI "Construct the video mode with its attributes\&. "
.ti -1c
.RI "bool \fBisValid\fP () const"
.br
.RI "Tell whether or not the video mode is valid\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBVideoMode\fP \fBgetDesktopMode\fP ()"
.br
.RI "Get the current desktop video mode\&. "
.ti -1c
.RI "static const std::vector< \fBVideoMode\fP > & \fBgetFullscreenModes\fP ()"
.br
.RI "Retrieve all the video modes supported in fullscreen mode\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "unsigned int \fBwidth\fP"
.br
.RI "Video mode width, in pixels\&. "
.ti -1c
.RI "unsigned int \fBheight\fP"
.br
.RI "Video mode height, in pixels\&. "
.ti -1c
.RI "unsigned int \fBbitsPerPixel\fP"
.br
.RI "Video mode pixel depth, in bits per pixels\&. "
.in -1c
.SS "Related Symbols"
(Note that these are not member symbols\&.) 
.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (const \fBVideoMode\fP &left, const \fBVideoMode\fP &right)"
.br
.RI "Overload of == operator to compare two video modes\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBVideoMode\fP &left, const \fBVideoMode\fP &right)"
.br
.RI "Overload of != operator to compare two video modes\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBVideoMode\fP &left, const \fBVideoMode\fP &right)"
.br
.RI "Overload of < operator to compare video modes\&. "
.ti -1c
.RI "bool \fBoperator>\fP (const \fBVideoMode\fP &left, const \fBVideoMode\fP &right)"
.br
.RI "Overload of > operator to compare video modes\&. "
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBVideoMode\fP &left, const \fBVideoMode\fP &right)"
.br
.RI "Overload of <= operator to compare video modes\&. "
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBVideoMode\fP &left, const \fBVideoMode\fP &right)"
.br
.RI "Overload of >= operator to compare video modes\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBVideoMode\fP defines a video mode (width, height, bpp) 

A video mode is defined by a width and a height (in pixels) and a depth (in bits per pixel)\&.
.PP
Video modes are used to setup windows (\fBsf::Window\fP) at creation time\&.
.PP
The main usage of video modes is for fullscreen mode: indeed you must use one of the valid video modes allowed by the OS (which are defined by what the monitor and the graphics card support), otherwise your window creation will just fail\&.
.PP
\fBsf::VideoMode\fP provides a static function for retrieving the list of all the video modes supported by the system: \fBgetFullscreenModes()\fP\&.
.PP
A custom video mode can also be checked directly for fullscreen compatibility with its \fBisValid()\fP function\&.
.PP
Additionally, \fBsf::VideoMode\fP provides a static function to get the mode currently used by the desktop: \fBgetDesktopMode()\fP\&. This allows to build windows with the same size or pixel depth as the current resolution\&.
.PP
Usage example: 
.PP
.nf
// Display the list of all the video modes available for fullscreen
std::vector<sf::VideoMode> modes = sf::VideoMode::getFullscreenModes();
for (std::size_t i = 0; i < modes\&.size(); ++i)
{
    sf::VideoMode mode = modes[i];
    std::cout << "Mode #" << i << ": "
              << mode\&.width << "x" << mode\&.height << " \- "
              << mode\&.bitsPerPixel << " bpp" << std::endl;
}

// Create a window with the same pixel depth as the desktop
sf::VideoMode desktop = sf::VideoMode::getDesktopMode();
window\&.create(sf::VideoMode(1024, 768, desktop\&.bitsPerPixel), "SFML window");

.fi
.PP
 
.PP
Definition at line \fB41\fP of file \fBVideoMode\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::VideoMode::VideoMode ()"

.PP
Default constructor\&. This constructors initializes all members to 0\&. 
.SS "sf::VideoMode::VideoMode (unsigned int modeWidth, unsigned int modeHeight, unsigned int modeBitsPerPixel = \fR32\fP)"

.PP
Construct the video mode with its attributes\&. 
.PP
\fBParameters\fP
.RS 4
\fImodeWidth\fP Width in pixels 
.br
\fImodeHeight\fP Height in pixels 
.br
\fImodeBitsPerPixel\fP Pixel depths in bits per pixel 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "static \fBVideoMode\fP sf::VideoMode::getDesktopMode ()\fR [static]\fP"

.PP
Get the current desktop video mode\&. 
.PP
\fBReturns\fP
.RS 4
Current desktop video mode 
.RE
.PP

.SS "static const std::vector< \fBVideoMode\fP > & sf::VideoMode::getFullscreenModes ()\fR [static]\fP"

.PP
Retrieve all the video modes supported in fullscreen mode\&. When creating a fullscreen window, the video mode is restricted to be compatible with what the graphics driver and monitor support\&. This function returns the complete list of all video modes that can be used in fullscreen mode\&. The returned array is sorted from best to worst, so that the first element will always give the best mode (higher width, height and bits-per-pixel)\&.
.PP
\fBReturns\fP
.RS 4
Array containing all the supported fullscreen modes 
.RE
.PP

.SS "bool sf::VideoMode::isValid () const"

.PP
Tell whether or not the video mode is valid\&. The validity of video modes is only relevant when using fullscreen windows; otherwise any video mode can be used with no restriction\&.
.PP
\fBReturns\fP
.RS 4
True if the video mode is valid for fullscreen mode 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "bool operator!= (const \fBVideoMode\fP & left, const \fBVideoMode\fP & right)\fR [related]\fP"

.PP
Overload of != operator to compare two video modes\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a video mode) 
.br
\fIright\fP Right operand (a video mode)
.RE
.PP
\fBReturns\fP
.RS 4
True if modes are different 
.RE
.PP

.SS "bool operator< (const \fBVideoMode\fP & left, const \fBVideoMode\fP & right)\fR [related]\fP"

.PP
Overload of < operator to compare video modes\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a video mode) 
.br
\fIright\fP Right operand (a video mode)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is lesser than \fIright\fP 
.RE
.PP

.SS "bool operator<= (const \fBVideoMode\fP & left, const \fBVideoMode\fP & right)\fR [related]\fP"

.PP
Overload of <= operator to compare video modes\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a video mode) 
.br
\fIright\fP Right operand (a video mode)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is lesser or equal than \fIright\fP 
.RE
.PP

.SS "bool operator== (const \fBVideoMode\fP & left, const \fBVideoMode\fP & right)\fR [related]\fP"

.PP
Overload of == operator to compare two video modes\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a video mode) 
.br
\fIright\fP Right operand (a video mode)
.RE
.PP
\fBReturns\fP
.RS 4
True if modes are equal 
.RE
.PP

.SS "bool operator> (const \fBVideoMode\fP & left, const \fBVideoMode\fP & right)\fR [related]\fP"

.PP
Overload of > operator to compare video modes\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a video mode) 
.br
\fIright\fP Right operand (a video mode)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is greater than \fIright\fP 
.RE
.PP

.SS "bool operator>= (const \fBVideoMode\fP & left, const \fBVideoMode\fP & right)\fR [related]\fP"

.PP
Overload of >= operator to compare video modes\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a video mode) 
.br
\fIright\fP Right operand (a video mode)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is greater or equal than \fIright\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "unsigned int sf::VideoMode::bitsPerPixel"

.PP
Video mode pixel depth, in bits per pixels\&. 
.PP
Definition at line \fB104\fP of file \fBVideoMode\&.hpp\fP\&.
.SS "unsigned int sf::VideoMode::height"

.PP
Video mode height, in pixels\&. 
.PP
Definition at line \fB103\fP of file \fBVideoMode\&.hpp\fP\&.
.SS "unsigned int sf::VideoMode::width"

.PP
Video mode width, in pixels\&. 
.PP
Definition at line \fB102\fP of file \fBVideoMode\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
