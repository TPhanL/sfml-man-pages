.TH "sf::Socket" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Socket \- Base class for all the socket types\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Network/Socket\&.hpp>\fP
.PP
Inherits \fBsf::NonCopyable\fP\&.
.PP
Inherited by \fBsf::TcpListener\fP, \fBsf::TcpSocket\fP, and \fBsf::UdpSocket\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBStatus\fP { \fBDone\fP, \fBNotReady\fP, \fBPartial\fP, \fBDisconnected\fP, \fBError\fP }"
.br
.RI "Status codes that may be returned by socket functions\&. "
.ti -1c
.RI "enum { \fBAnyPort\fP = 0 }"
.br
.RI "Some special values used by sockets\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~Socket\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBsetBlocking\fP (bool blocking)"
.br
.RI "Set the blocking state of the socket\&. "
.ti -1c
.RI "bool \fBisBlocking\fP () const"
.br
.RI "Tell whether the socket is in blocking or non-blocking mode\&. "
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum \fBType\fP { \fBTcp\fP, \fBUdp\fP }"
.br
.RI "Types of protocols that the socket can use\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBSocket\fP (\fBType\fP type)"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "SocketHandle \fBgetHandle\fP () const"
.br
.RI "Return the internal handle of the socket\&. "
.ti -1c
.RI "void \fBcreate\fP ()"
.br
.RI "Create the internal representation of the socket\&. "
.ti -1c
.RI "void \fBcreate\fP (SocketHandle handle)"
.br
.RI "Create the internal representation of the socket from a socket handle\&. "
.ti -1c
.RI "void \fBclose\fP ()"
.br
.RI "Close the socket gracefully\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBSocketSelector\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Base class for all the socket types\&. 

This class mainly defines internal stuff to be used by derived classes\&.
.PP
The only public features that it defines, and which is therefore common to all the socket classes, is the blocking state\&. All sockets can be set as blocking or non-blocking\&.
.PP
In blocking mode, socket functions will hang until the operation completes, which means that the entire program (well, in fact the current thread if you use multiple ones) will be stuck waiting for your socket operation to complete\&.
.PP
In non-blocking mode, all the socket functions will return immediately\&. If the socket is not ready to complete the requested operation, the function simply returns the proper status code (\fBSocket::NotReady\fP)\&.
.PP
The default mode, which is blocking, is the one that is generally used, in combination with threads or selectors\&. The non-blocking mode is rather used in real-time applications that run an endless loop that can poll the socket often enough, and cannot afford blocking this loop\&.
.PP
\fBSee also\fP
.RS 4
\fBsf::TcpListener\fP, \fBsf::TcpSocket\fP, \fBsf::UdpSocket\fP 
.RE
.PP

.PP
Definition at line \fB45\fP of file \fBSocket\&.hpp\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "anonymous enum"

.PP
Some special values used by sockets\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIAnyPort \fP\fP
Special value that tells the system to pick any available port\&. 
.PP
Definition at line \fB66\fP of file \fBSocket\&.hpp\fP\&.
.SS "enum \fBsf::Socket::Status\fP"

.PP
Status codes that may be returned by socket functions\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIDone \fP\fP
The socket has sent / received the data\&. 
.TP
\fB\fINotReady \fP\fP
The socket is not ready to send / receive data yet\&. 
.TP
\fB\fIPartial \fP\fP
The socket sent a part of the data\&. 
.TP
\fB\fIDisconnected \fP\fP
The TCP socket has been disconnected\&. 
.TP
\fB\fIError \fP\fP
An unexpected error happened\&. 
.PP
Definition at line \fB53\fP of file \fBSocket\&.hpp\fP\&.
.SS "enum \fBsf::Socket::Type\fP\fR [protected]\fP"

.PP
Types of protocols that the socket can use\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITcp \fP\fP
TCP protocol\&. 
.TP
\fB\fIUdp \fP\fP
UDP protocol\&. 
.PP
Definition at line \fB114\fP of file \fBSocket\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual sf::Socket::~Socket ()\fR [virtual]\fP"

.PP
Destructor\&. 
.SS "sf::Socket::Socket (\fBType\fP type)\fR [protected]\fP"

.PP
Default constructor\&. This constructor can only be accessed by derived classes\&.
.PP
\fBParameters\fP
.RS 4
\fItype\fP Type of the socket (TCP or UDP) 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void sf::Socket::close ()\fR [protected]\fP"

.PP
Close the socket gracefully\&. This function can only be accessed by derived classes\&. 
.SS "void sf::Socket::create ()\fR [protected]\fP"

.PP
Create the internal representation of the socket\&. This function can only be accessed by derived classes\&. 
.SS "void sf::Socket::create (SocketHandle handle)\fR [protected]\fP"

.PP
Create the internal representation of the socket from a socket handle\&. This function can only be accessed by derived classes\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP OS-specific handle of the socket to wrap 
.RE
.PP

.SS "SocketHandle sf::Socket::getHandle () const\fR [protected]\fP"

.PP
Return the internal handle of the socket\&. The returned handle may be invalid if the socket was not created yet (or already destroyed)\&. This function can only be accessed by derived classes\&.
.PP
\fBReturns\fP
.RS 4
The internal (OS-specific) handle of the socket 
.RE
.PP

.SS "bool sf::Socket::isBlocking () const"

.PP
Tell whether the socket is in blocking or non-blocking mode\&. 
.PP
\fBReturns\fP
.RS 4
True if the socket is blocking, false otherwise
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetBlocking\fP 
.RE
.PP

.SS "void sf::Socket::setBlocking (bool blocking)"

.PP
Set the blocking state of the socket\&. In blocking mode, calls will not return until they have completed their task\&. For example, a call to Receive in blocking mode won't return until some data was actually received\&. In non-blocking mode, calls will always return immediately, using the return code to signal whether there was data available or not\&. By default, all sockets are blocking\&.
.PP
\fBParameters\fP
.RS 4
\fIblocking\fP True to set the socket as blocking, false for non-blocking
.RE
.PP
\fBSee also\fP
.RS 4
\fBisBlocking\fP 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "friend class \fBSocketSelector\fP\fR [friend]\fP"

.PP
Definition at line \fB171\fP of file \fBSocket\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
