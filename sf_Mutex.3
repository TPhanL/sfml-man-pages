.TH "sf::Mutex" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Mutex \- Blocks concurrent access to shared resources from multiple threads\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/System/Mutex\&.hpp>\fP
.PP
Inherits \fBsf::NonCopyable\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMutex\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fB~Mutex\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBlock\fP ()"
.br
.RI "\fBLock\fP the mutex\&. "
.ti -1c
.RI "void \fBunlock\fP ()"
.br
.RI "Unlock the mutex\&. "
.in -1c
.SH "Detailed Description"
.PP 
Blocks concurrent access to shared resources from multiple threads\&. 

\fBMutex\fP stands for 'MUTual EXclusion'\&.
.PP
A mutex is a synchronization object, used when multiple threads are involved\&.
.PP
When you want to protect a part of the code from being accessed simultaneously by multiple threads, you typically use a mutex\&. When a thread is locked by a mutex, any other thread trying to lock it will be blocked until the mutex is released by the thread that locked it\&. This way, you can allow only one thread at a time to access a critical region of your code\&.
.PP
Usage example: 
.PP
.nf
Database database; // this is a critical resource that needs some protection
sf::Mutex mutex;

void thread1()
{
    mutex\&.lock(); // this call will block the thread if the mutex is already locked by thread2
    database\&.write(\&.\&.\&.);
    mutex\&.unlock(); // if thread2 was waiting, it will now be unblocked
}

void thread2()
{
    mutex\&.lock(); // this call will block the thread if the mutex is already locked by thread1
    database\&.write(\&.\&.\&.);
    mutex\&.unlock(); // if thread1 was waiting, it will now be unblocked
}

.fi
.PP
.PP
Be very careful with mutexes\&. A bad usage can lead to bad problems, like deadlocks (two threads are waiting for each other and the application is globally stuck)\&.
.PP
To make the usage of mutexes more robust, particularly in environments where exceptions can be thrown, you should use the helper class \fBsf::Lock\fP to lock/unlock mutexes\&.
.PP
SFML mutexes are recursive, which means that you can lock a mutex multiple times in the same thread without creating a deadlock\&. In this case, the first call to \fBlock()\fP behaves as usual, and the following ones have no effect\&. However, you must call \fBunlock()\fP exactly as many times as you called \fBlock()\fP\&. If you don't, the mutex won't be released\&.
.PP
\fBSee also\fP
.RS 4
\fBsf::Lock\fP 
.RE
.PP

.PP
Definition at line \fB47\fP of file \fBMutex\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::Mutex::Mutex ()"

.PP
Default constructor\&. 
.SS "sf::Mutex::~Mutex ()"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void sf::Mutex::lock ()"

.PP
\fBLock\fP the mutex\&. If the mutex is already locked in another thread, this call will block the execution until the mutex is released\&.
.PP
\fBSee also\fP
.RS 4
\fBunlock\fP 
.RE
.PP

.SS "void sf::Mutex::unlock ()"

.PP
Unlock the mutex\&. 
.PP
\fBSee also\fP
.RS 4
\fBlock\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
