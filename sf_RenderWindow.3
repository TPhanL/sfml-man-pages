.TH "sf::RenderWindow" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::RenderWindow \- \fBWindow\fP that can serve as a target for 2D drawing\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/RenderWindow\&.hpp>\fP
.PP
Inherits \fBsf::Window\fP, and \fBsf::RenderTarget\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRenderWindow\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBRenderWindow\fP (\fBVideoMode\fP mode, const \fBString\fP &title, Uint32 style=\fBStyle::Default\fP, const \fBContextSettings\fP &settings=\fBContextSettings\fP())"
.br
.RI "Construct a new window\&. "
.ti -1c
.RI "\fBRenderWindow\fP (WindowHandle handle, const \fBContextSettings\fP &settings=\fBContextSettings\fP())"
.br
.RI "Construct the window from an existing control\&. "
.ti -1c
.RI "virtual \fB~RenderWindow\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "virtual \fBVector2u\fP \fBgetSize\fP () const"
.br
.RI "Get the size of the rendering region of the window\&. "
.ti -1c
.RI "virtual bool \fBisSrgb\fP () const"
.br
.RI "Tell if the window will use sRGB encoding when drawing on it\&. "
.ti -1c
.RI "bool \fBsetActive\fP (bool active=true)"
.br
.RI "Activate or deactivate the window as the current target for OpenGL rendering\&. "
.ti -1c
.RI "\fBImage\fP \fBcapture\fP () const"
.br
.RI "Copy the current contents of the window to an image\&. "
.ti -1c
.RI "virtual void \fBcreate\fP (\fBVideoMode\fP mode, const \fBString\fP &title, Uint32 style=\fBStyle::Default\fP)"
.br
.RI "Create (or recreate) the window\&. "
.ti -1c
.RI "virtual void \fBcreate\fP (\fBVideoMode\fP mode, const \fBString\fP &title, Uint32 style, const \fBContextSettings\fP &settings)"
.br
.RI "Create (or recreate) the window\&. "
.ti -1c
.RI "virtual void \fBcreate\fP (WindowHandle handle)"
.br
.RI "Create (or recreate) the window from an existing control\&. "
.ti -1c
.RI "virtual void \fBcreate\fP (WindowHandle handle, const \fBContextSettings\fP &settings)"
.br
.RI "Create (or recreate) the window from an existing control\&. "
.ti -1c
.RI "virtual void \fBclose\fP ()"
.br
.RI "Close the window and destroy all the attached resources\&. "
.ti -1c
.RI "const \fBContextSettings\fP & \fBgetSettings\fP () const"
.br
.RI "Get the settings of the OpenGL context of the window\&. "
.ti -1c
.RI "void \fBsetVerticalSyncEnabled\fP (bool enabled)"
.br
.RI "Enable or disable vertical synchronization\&. "
.ti -1c
.RI "void \fBsetFramerateLimit\fP (unsigned int limit)"
.br
.RI "Limit the framerate to a maximum fixed frequency\&. "
.ti -1c
.RI "bool \fBsetActive\fP (bool active=true) const"
.br
.RI "Activate or deactivate the window as the current target for OpenGL rendering\&. "
.ti -1c
.RI "void \fBdisplay\fP ()"
.br
.RI "Display on screen what has been rendered to the window so far\&. "
.ti -1c
.RI "bool \fBisOpen\fP () const"
.br
.RI "Tell whether or not the window is open\&. "
.ti -1c
.RI "bool \fBpollEvent\fP (\fBEvent\fP &event)"
.br
.RI "Pop the event on top of the event queue, if any, and return it\&. "
.ti -1c
.RI "bool \fBwaitEvent\fP (\fBEvent\fP &event)"
.br
.RI "Wait for an event and return it\&. "
.ti -1c
.RI "\fBVector2i\fP \fBgetPosition\fP () const"
.br
.RI "Get the position of the window\&. "
.ti -1c
.RI "void \fBsetPosition\fP (const \fBVector2i\fP &position)"
.br
.RI "Change the position of the window on screen\&. "
.ti -1c
.RI "void \fBsetSize\fP (const \fBVector2u\fP &size)"
.br
.RI "Change the size of the rendering region of the window\&. "
.ti -1c
.RI "void \fBsetTitle\fP (const \fBString\fP &title)"
.br
.RI "Change the title of the window\&. "
.ti -1c
.RI "void \fBsetIcon\fP (unsigned int width, unsigned int height, const Uint8 *pixels)"
.br
.RI "Change the window's icon\&. "
.ti -1c
.RI "void \fBsetVisible\fP (bool visible)"
.br
.RI "Show or hide the window\&. "
.ti -1c
.RI "void \fBsetMouseCursorVisible\fP (bool visible)"
.br
.RI "Show or hide the mouse cursor\&. "
.ti -1c
.RI "void \fBsetMouseCursorGrabbed\fP (bool grabbed)"
.br
.RI "Grab or release the mouse cursor\&. "
.ti -1c
.RI "void \fBsetMouseCursor\fP (const \fBCursor\fP &cursor)"
.br
.RI "Set the displayed cursor to a native system cursor\&. "
.ti -1c
.RI "void \fBsetKeyRepeatEnabled\fP (bool enabled)"
.br
.RI "Enable or disable automatic key-repeat\&. "
.ti -1c
.RI "void \fBsetJoystickThreshold\fP (float threshold)"
.br
.RI "Change the joystick threshold\&. "
.ti -1c
.RI "void \fBrequestFocus\fP ()"
.br
.RI "Request the current window to be made the active foreground window\&. "
.ti -1c
.RI "bool \fBhasFocus\fP () const"
.br
.RI "Check whether the window has the input focus\&. "
.ti -1c
.RI "WindowHandle \fBgetSystemHandle\fP () const"
.br
.RI "Get the OS-specific handle of the window\&. "
.ti -1c
.RI "bool \fBcreateVulkanSurface\fP (const VkInstance &instance, VkSurfaceKHR &surface, const VkAllocationCallbacks *allocator=0)"
.br
.RI "Create a \fBVulkan\fP rendering surface\&. "
.ti -1c
.RI "void \fBclear\fP (const \fBColor\fP &color=\fBColor\fP(0, 0, 0, 255))"
.br
.RI "Clear the entire target with a single color\&. "
.ti -1c
.RI "void \fBsetView\fP (const \fBView\fP &view)"
.br
.RI "Change the current active view\&. "
.ti -1c
.RI "const \fBView\fP & \fBgetView\fP () const"
.br
.RI "Get the view currently in use in the render target\&. "
.ti -1c
.RI "const \fBView\fP & \fBgetDefaultView\fP () const"
.br
.RI "Get the default view of the render target\&. "
.ti -1c
.RI "\fBIntRect\fP \fBgetViewport\fP (const \fBView\fP &view) const"
.br
.RI "Get the viewport of a view, applied to this render target\&. "
.ti -1c
.RI "\fBVector2f\fP \fBmapPixelToCoords\fP (const \fBVector2i\fP &point) const"
.br
.RI "Convert a point from target coordinates to world coordinates, using the current view\&. "
.ti -1c
.RI "\fBVector2f\fP \fBmapPixelToCoords\fP (const \fBVector2i\fP &point, const \fBView\fP &view) const"
.br
.RI "Convert a point from target coordinates to world coordinates\&. "
.ti -1c
.RI "\fBVector2i\fP \fBmapCoordsToPixel\fP (const \fBVector2f\fP &point) const"
.br
.RI "Convert a point from world coordinates to target coordinates, using the current view\&. "
.ti -1c
.RI "\fBVector2i\fP \fBmapCoordsToPixel\fP (const \fBVector2f\fP &point, const \fBView\fP &view) const"
.br
.RI "Convert a point from world coordinates to target coordinates\&. "
.ti -1c
.RI "void \fBdraw\fP (const \fBDrawable\fP &drawable, const \fBRenderStates\fP &states=\fBRenderStates::Default\fP)"
.br
.RI "Draw a drawable object to the render target\&. "
.ti -1c
.RI "void \fBdraw\fP (const \fBVertex\fP *vertices, std::size_t vertexCount, \fBPrimitiveType\fP type, const \fBRenderStates\fP &states=\fBRenderStates::Default\fP)"
.br
.RI "Draw primitives defined by an array of vertices\&. "
.ti -1c
.RI "void \fBdraw\fP (const \fBVertexBuffer\fP &vertexBuffer, const \fBRenderStates\fP &states=\fBRenderStates::Default\fP)"
.br
.RI "Draw primitives defined by a vertex buffer\&. "
.ti -1c
.RI "void \fBdraw\fP (const \fBVertexBuffer\fP &vertexBuffer, std::size_t firstVertex, std::size_t vertexCount, const \fBRenderStates\fP &states=\fBRenderStates::Default\fP)"
.br
.RI "Draw primitives defined by a vertex buffer\&. "
.ti -1c
.RI "void \fBpushGLStates\fP ()"
.br
.RI "Save the current OpenGL render states and matrices\&. "
.ti -1c
.RI "void \fBpopGLStates\fP ()"
.br
.RI "Restore the previously saved OpenGL render states and matrices\&. "
.ti -1c
.RI "void \fBresetGLStates\fP ()"
.br
.RI "Reset the internal OpenGL states so that the target is ready for drawing\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBonCreate\fP ()"
.br
.RI "Function called after the window has been created\&. "
.ti -1c
.RI "virtual void \fBonResize\fP ()"
.br
.RI "Function called after the window has been resized\&. "
.ti -1c
.RI "void \fBinitialize\fP ()"
.br
.RI "Performs the common initialization step after creation\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBWindow\fP that can serve as a target for 2D drawing\&. 

\fBsf::RenderWindow\fP is the main class of the Graphics module\&.
.PP
It defines an OS window that can be painted using the other classes of the graphics module\&.
.PP
\fBsf::RenderWindow\fP is derived from \fBsf::Window\fP, thus it inherits all its features: events, window management, OpenGL rendering, etc\&. See the documentation of \fBsf::Window\fP for a more complete description of all these features, as well as code examples\&.
.PP
On top of that, \fBsf::RenderWindow\fP adds more features related to 2D drawing with the graphics module (see its base class \fBsf::RenderTarget\fP for more details)\&. Here is a typical rendering and event loop with a \fBsf::RenderWindow\fP:
.PP
.PP
.nf
// Declare and create a new render\-window
sf::RenderWindow window(sf::VideoMode(800, 600), "SFML window");

// Limit the framerate to 60 frames per second (this step is optional)
window\&.setFramerateLimit(60);

// The main loop \- ends as soon as the window is closed
while (window\&.isOpen())
{
   // Event processing
   sf::Event event;
   while (window\&.pollEvent(event))
   {
       // Request for closing the window
       if (event\&.type == sf::Event::Closed)
           window\&.close();
   }

   // Clear the whole window before rendering a new frame
   window\&.clear();

   // Draw some graphical entities
   window\&.draw(sprite);
   window\&.draw(circle);
   window\&.draw(text);

   // End the current frame and display its contents on screen
   window\&.display();
}
.fi
.PP
.PP
Like \fBsf::Window\fP, \fBsf::RenderWindow\fP is still able to render direct OpenGL stuff\&. It is even possible to mix together OpenGL calls and regular SFML drawing commands\&.
.PP
.PP
.nf
// Create the render window
sf::RenderWindow window(sf::VideoMode(800, 600), "SFML OpenGL");

// Create a sprite and a text to display
sf::Sprite sprite;
sf::Text text;
\&.\&.\&.

// Perform OpenGL initializations
glMatrixMode(GL_PROJECTION);
\&.\&.\&.

// Start the rendering loop
while (window\&.isOpen())
{
    // Process events
    \&.\&.\&.

    // Draw a background sprite
    window\&.pushGLStates();
    window\&.draw(sprite);
    window\&.popGLStates();

    // Draw a 3D object using OpenGL
    glBegin(GL_QUADS);
        glVertex3f(\&.\&.\&.);
        \&.\&.\&.
    glEnd();

    // Draw text on top of the 3D object
    window\&.pushGLStates();
    window\&.draw(text);
    window\&.popGLStates();

    // Finally, display the rendered frame on screen
    window\&.display();
}
.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::Window\fP, \fBsf::RenderTarget\fP, \fBsf::RenderTexture\fP, \fBsf::View\fP 
.RE
.PP

.PP
Definition at line \fB44\fP of file \fBRenderWindow\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::RenderWindow::RenderWindow ()"

.PP
Default constructor\&. This constructor doesn't actually create the window, use the other constructors or call \fBcreate()\fP to do so\&. 
.SS "sf::RenderWindow::RenderWindow (\fBVideoMode\fP mode, const \fBString\fP & title, Uint32 style = \fR\fBStyle::Default\fP\fP, const \fBContextSettings\fP & settings = \fR\fBContextSettings\fP()\fP)"

.PP
Construct a new window\&. This constructor creates the window with the size and pixel depth defined in \fImode\fP\&. An optional style can be passed to customize the look and behavior of the window (borders, title bar, resizable, closable, \&.\&.\&.)\&.
.PP
The fourth parameter is an optional structure specifying advanced OpenGL context settings such as antialiasing, depth-buffer bits, etc\&. You shouldn't care about these parameters for a regular usage of the graphics module\&.
.PP
\fBParameters\fP
.RS 4
\fImode\fP Video mode to use (defines the width, height and depth of the rendering area of the window) 
.br
\fItitle\fP Title of the window 
.br
\fIstyle\fP Window style, a bitwise OR combination of sf::Style enumerators 
.br
\fIsettings\fP Additional settings for the underlying OpenGL context 
.RE
.PP

.SS "sf::RenderWindow::RenderWindow (WindowHandle handle, const \fBContextSettings\fP & settings = \fR\fBContextSettings\fP()\fP)\fR [explicit]\fP"

.PP
Construct the window from an existing control\&. Use this constructor if you want to create an SFML rendering area into an already existing control\&.
.PP
The second parameter is an optional structure specifying advanced OpenGL context settings such as antialiasing, depth-buffer bits, etc\&. You shouldn't care about these parameters for a regular usage of the graphics module\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP Platform-specific handle of the control (\fIHWND\fP on Windows, \fIWindow\fP on Linux/FreeBSD, \fINSWindow\fP on OS X) 
.br
\fIsettings\fP Additional settings for the underlying OpenGL context 
.RE
.PP

.SS "virtual sf::RenderWindow::~RenderWindow ()\fR [virtual]\fP"

.PP
Destructor\&. Closes the window and frees all the resources attached to it\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBImage\fP sf::RenderWindow::capture () const"

.PP
Copy the current contents of the window to an image\&. 
.PP
\fBDeprecated\fP
.RS 4
Use a \fBsf::Texture\fP and its \fBsf::Texture::update(const Window&)\fP function and copy its contents into an \fBsf::Image\fP instead\&. 
.RE
.PP
.PP
.nf
sf::Vector2u windowSize = window\&.getSize();
sf::Texture texture;
texture\&.create(windowSize\&.x, windowSize\&.y);
texture\&.update(window);
sf::Image screenshot = texture\&.copyToImage();
.fi
.PP
.PP
This is a slow operation, whose main purpose is to make screenshots of the application\&. If you want to update an image with the contents of the window and then use it for drawing, you should rather use a \fBsf::Texture\fP and its update(Window&) function\&. You can also draw things directly to a texture with the \fBsf::RenderTexture\fP class\&.
.PP
\fBReturns\fP
.RS 4
\fBImage\fP containing the captured contents 
.RE
.PP

.SS "void sf::RenderTarget::clear (const \fBColor\fP & color = \fR\fBColor\fP(0, 0, 0, 255)\fP)\fR [inherited]\fP"

.PP
Clear the entire target with a single color\&. This function is usually called once every frame, to clear the previous contents of the target\&.
.PP
\fBParameters\fP
.RS 4
\fIcolor\fP Fill color to use to clear the render target 
.RE
.PP

.SS "virtual void sf::Window::close ()\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Close the window and destroy all the attached resources\&. After calling this function, the \fBsf::Window\fP instance remains valid and you can call \fBcreate()\fP to recreate the window\&. All other functions such as \fBpollEvent()\fP or \fBdisplay()\fP will still work (i\&.e\&. you don't have to test \fBisOpen()\fP every time), and will have no effect on closed windows\&. 
.PP
Reimplemented from \fBsf::WindowBase\fP\&.
.SS "virtual void sf::Window::create (\fBVideoMode\fP mode, const \fBString\fP & title, Uint32 style, const \fBContextSettings\fP & settings)\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Create (or recreate) the window\&. If the window was already created, it closes it first\&. If \fIstyle\fP contains \fBStyle::Fullscreen\fP, then \fImode\fP must be a valid video mode\&.
.PP
The fourth parameter is an optional structure specifying advanced OpenGL context settings such as antialiasing, depth-buffer bits, etc\&.
.PP
\fBParameters\fP
.RS 4
\fImode\fP Video mode to use (defines the width, height and depth of the rendering area of the window) 
.br
\fItitle\fP Title of the window 
.br
\fIstyle\fP Window style, a bitwise OR combination of sf::Style enumerators 
.br
\fIsettings\fP Additional settings for the underlying OpenGL context 
.RE
.PP

.SS "virtual void sf::Window::create (\fBVideoMode\fP mode, const \fBString\fP & title, Uint32 style = \fR\fBStyle::Default\fP\fP)\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Create (or recreate) the window\&. If the window was already created, it closes it first\&. If \fIstyle\fP contains \fBStyle::Fullscreen\fP, then \fImode\fP must be a valid video mode\&.
.PP
\fBParameters\fP
.RS 4
\fImode\fP Video mode to use (defines the width, height and depth of the rendering area of the window) 
.br
\fItitle\fP Title of the window 
.br
\fIstyle\fP Window style, a bitwise OR combination of sf::Style enumerators 
.RE
.PP

.PP
Reimplemented from \fBsf::WindowBase\fP\&.
.SS "virtual void sf::Window::create (WindowHandle handle)\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Create (or recreate) the window from an existing control\&. Use this function if you want to create an OpenGL rendering area into an already existing control\&. If the window was already created, it closes it first\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP Platform-specific handle of the control 
.RE
.PP

.PP
Reimplemented from \fBsf::WindowBase\fP\&.
.SS "virtual void sf::Window::create (WindowHandle handle, const \fBContextSettings\fP & settings)\fR [virtual]\fP, \fR [inherited]\fP"

.PP
Create (or recreate) the window from an existing control\&. Use this function if you want to create an OpenGL rendering area into an already existing control\&. If the window was already created, it closes it first\&.
.PP
The second parameter is an optional structure specifying advanced OpenGL context settings such as antialiasing, depth-buffer bits, etc\&.
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP Platform-specific handle of the control 
.br
\fIsettings\fP Additional settings for the underlying OpenGL context 
.RE
.PP

.SS "bool sf::WindowBase::createVulkanSurface (const VkInstance & instance, VkSurfaceKHR & surface, const VkAllocationCallbacks * allocator = \fR0\fP)\fR [inherited]\fP"

.PP
Create a \fBVulkan\fP rendering surface\&. 
.PP
\fBParameters\fP
.RS 4
\fIinstance\fP \fBVulkan\fP instance 
.br
\fIsurface\fP Created surface 
.br
\fIallocator\fP Allocator to use
.RE
.PP
\fBReturns\fP
.RS 4
True if surface creation was successful, false otherwise 
.RE
.PP

.SS "void sf::Window::display ()\fR [inherited]\fP"

.PP
Display on screen what has been rendered to the window so far\&. This function is typically called after all OpenGL rendering has been done for the current frame, in order to show it on screen\&. 
.SS "void sf::RenderTarget::draw (const \fBDrawable\fP & drawable, const \fBRenderStates\fP & states = \fR\fBRenderStates::Default\fP\fP)\fR [inherited]\fP"

.PP
Draw a drawable object to the render target\&. 
.PP
\fBParameters\fP
.RS 4
\fIdrawable\fP Object to draw 
.br
\fIstates\fP Render states to use for drawing 
.RE
.PP

.SS "void sf::RenderTarget::draw (const \fBVertex\fP * vertices, std::size_t vertexCount, \fBPrimitiveType\fP type, const \fBRenderStates\fP & states = \fR\fBRenderStates::Default\fP\fP)\fR [inherited]\fP"

.PP
Draw primitives defined by an array of vertices\&. 
.PP
\fBParameters\fP
.RS 4
\fIvertices\fP Pointer to the vertices 
.br
\fIvertexCount\fP Number of vertices in the array 
.br
\fItype\fP Type of primitives to draw 
.br
\fIstates\fP Render states to use for drawing 
.RE
.PP

.SS "void sf::RenderTarget::draw (const \fBVertexBuffer\fP & vertexBuffer, const \fBRenderStates\fP & states = \fR\fBRenderStates::Default\fP\fP)\fR [inherited]\fP"

.PP
Draw primitives defined by a vertex buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIvertexBuffer\fP \fBVertex\fP buffer 
.br
\fIstates\fP Render states to use for drawing 
.RE
.PP

.SS "void sf::RenderTarget::draw (const \fBVertexBuffer\fP & vertexBuffer, std::size_t firstVertex, std::size_t vertexCount, const \fBRenderStates\fP & states = \fR\fBRenderStates::Default\fP\fP)\fR [inherited]\fP"

.PP
Draw primitives defined by a vertex buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIvertexBuffer\fP \fBVertex\fP buffer 
.br
\fIfirstVertex\fP Index of the first vertex to render 
.br
\fIvertexCount\fP Number of vertices to render 
.br
\fIstates\fP Render states to use for drawing 
.RE
.PP

.SS "const \fBView\fP & sf::RenderTarget::getDefaultView () const\fR [inherited]\fP"

.PP
Get the default view of the render target\&. The default view has the initial size of the render target, and never changes after the target has been created\&.
.PP
\fBReturns\fP
.RS 4
The default view of the render target
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetView\fP, \fBgetView\fP 
.RE
.PP

.SS "\fBVector2i\fP sf::WindowBase::getPosition () const\fR [inherited]\fP"

.PP
Get the position of the window\&. 
.PP
\fBReturns\fP
.RS 4
Position of the window, in pixels
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetPosition\fP 
.RE
.PP

.SS "const \fBContextSettings\fP & sf::Window::getSettings () const\fR [inherited]\fP"

.PP
Get the settings of the OpenGL context of the window\&. Note that these settings may be different from what was passed to the constructor or the \fBcreate()\fP function, if one or more settings were not supported\&. In this case, SFML chose the closest match\&.
.PP
\fBReturns\fP
.RS 4
Structure containing the OpenGL context settings 
.RE
.PP

.SS "virtual \fBVector2u\fP sf::RenderWindow::getSize () const\fR [virtual]\fP"

.PP
Get the size of the rendering region of the window\&. The size doesn't include the titlebar and borders of the window\&.
.PP
\fBReturns\fP
.RS 4
Size in pixels 
.RE
.PP

.PP
Implements \fBsf::RenderTarget\fP\&.
.SS "WindowHandle sf::WindowBase::getSystemHandle () const\fR [inherited]\fP"

.PP
Get the OS-specific handle of the window\&. The type of the returned handle is sf::WindowHandle, which is a typedef to the handle type defined by the OS\&. You shouldn't need to use this function, unless you have very specific stuff to implement that SFML doesn't support, or implement a temporary workaround until a bug is fixed\&.
.PP
\fBReturns\fP
.RS 4
System handle of the window 
.RE
.PP

.SS "const \fBView\fP & sf::RenderTarget::getView () const\fR [inherited]\fP"

.PP
Get the view currently in use in the render target\&. 
.PP
\fBReturns\fP
.RS 4
The view object that is currently used
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetView\fP, \fBgetDefaultView\fP 
.RE
.PP

.SS "\fBIntRect\fP sf::RenderTarget::getViewport (const \fBView\fP & view) const\fR [inherited]\fP"

.PP
Get the viewport of a view, applied to this render target\&. The viewport is defined in the view as a ratio, this function simply applies this ratio to the current dimensions of the render target to calculate the pixels rectangle that the viewport actually covers in the target\&.
.PP
\fBParameters\fP
.RS 4
\fIview\fP The view for which we want to compute the viewport
.RE
.PP
\fBReturns\fP
.RS 4
Viewport rectangle, expressed in pixels 
.RE
.PP

.SS "bool sf::WindowBase::hasFocus () const\fR [inherited]\fP"

.PP
Check whether the window has the input focus\&. At any given time, only one window may have the input focus to receive input events such as keystrokes or most mouse events\&.
.PP
\fBReturns\fP
.RS 4
True if window has focus, false otherwise 
.RE
.PP
\fBSee also\fP
.RS 4
\fBrequestFocus\fP 
.RE
.PP

.SS "void sf::RenderTarget::initialize ()\fR [protected]\fP, \fR [inherited]\fP"

.PP
Performs the common initialization step after creation\&. The derived classes must call this function after the target is created and ready for drawing\&. 
.SS "bool sf::WindowBase::isOpen () const\fR [inherited]\fP"

.PP
Tell whether or not the window is open\&. This function returns whether or not the window exists\&. Note that a hidden window (setVisible(false)) is open (therefore this function would return true)\&.
.PP
\fBReturns\fP
.RS 4
True if the window is open, false if it has been closed 
.RE
.PP

.SS "virtual bool sf::RenderWindow::isSrgb () const\fR [virtual]\fP"

.PP
Tell if the window will use sRGB encoding when drawing on it\&. You can request sRGB encoding for a window by having the sRgbCapable flag set in the \fBContextSettings\fP
.PP
\fBReturns\fP
.RS 4
True if the window use sRGB encoding, false otherwise 
.RE
.PP

.PP
Reimplemented from \fBsf::RenderTarget\fP\&.
.SS "\fBVector2i\fP sf::RenderTarget::mapCoordsToPixel (const \fBVector2f\fP & point) const\fR [inherited]\fP"

.PP
Convert a point from world coordinates to target coordinates, using the current view\&. This function is an overload of the mapCoordsToPixel function that implicitly uses the current view\&. It is equivalent to: 
.PP
.nf
target\&.mapCoordsToPixel(point, target\&.getView());

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP Point to convert
.RE
.PP
\fBReturns\fP
.RS 4
The converted point, in target coordinates (pixels)
.RE
.PP
\fBSee also\fP
.RS 4
\fBmapPixelToCoords\fP 
.RE
.PP

.SS "\fBVector2i\fP sf::RenderTarget::mapCoordsToPixel (const \fBVector2f\fP & point, const \fBView\fP & view) const\fR [inherited]\fP"

.PP
Convert a point from world coordinates to target coordinates\&. This function finds the pixel of the render target that matches the given 2D point\&. In other words, it goes through the same process as the graphics card, to compute the final position of a rendered point\&.
.PP
Initially, both coordinate systems (world units and target pixels) match perfectly\&. But if you define a custom view or resize your render target, this assertion is not true anymore, i\&.e\&. a point located at (150, 75) in your 2D world may map to the pixel (10, 50) of your render target -- if the view is translated by (140, 25)\&.
.PP
This version uses a custom view for calculations, see the other overload of the function if you want to use the current view of the render target\&.
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP Point to convert 
.br
\fIview\fP The view to use for converting the point
.RE
.PP
\fBReturns\fP
.RS 4
The converted point, in target coordinates (pixels)
.RE
.PP
\fBSee also\fP
.RS 4
\fBmapPixelToCoords\fP 
.RE
.PP

.SS "\fBVector2f\fP sf::RenderTarget::mapPixelToCoords (const \fBVector2i\fP & point) const\fR [inherited]\fP"

.PP
Convert a point from target coordinates to world coordinates, using the current view\&. This function is an overload of the mapPixelToCoords function that implicitly uses the current view\&. It is equivalent to: 
.PP
.nf
target\&.mapPixelToCoords(point, target\&.getView());

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP Pixel to convert
.RE
.PP
\fBReturns\fP
.RS 4
The converted point, in 'world' coordinates
.RE
.PP
\fBSee also\fP
.RS 4
\fBmapCoordsToPixel\fP 
.RE
.PP

.SS "\fBVector2f\fP sf::RenderTarget::mapPixelToCoords (const \fBVector2i\fP & point, const \fBView\fP & view) const\fR [inherited]\fP"

.PP
Convert a point from target coordinates to world coordinates\&. This function finds the 2D position that matches the given pixel of the render target\&. In other words, it does the inverse of what the graphics card does, to find the initial position of a rendered pixel\&.
.PP
Initially, both coordinate systems (world units and target pixels) match perfectly\&. But if you define a custom view or resize your render target, this assertion is not true anymore, i\&.e\&. a point located at (10, 50) in your render target may map to the point (150, 75) in your 2D world -- if the view is translated by (140, 25)\&.
.PP
For render-windows, this function is typically used to find which point (or object) is located below the mouse cursor\&.
.PP
This version uses a custom view for calculations, see the other overload of the function if you want to use the current view of the render target\&.
.PP
\fBParameters\fP
.RS 4
\fIpoint\fP Pixel to convert 
.br
\fIview\fP The view to use for converting the point
.RE
.PP
\fBReturns\fP
.RS 4
The converted point, in 'world' units
.RE
.PP
\fBSee also\fP
.RS 4
\fBmapCoordsToPixel\fP 
.RE
.PP

.SS "virtual void sf::RenderWindow::onCreate ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Function called after the window has been created\&. This function is called so that derived classes can perform their own specific initialization as soon as the window is created\&. 
.PP
Reimplemented from \fBsf::WindowBase\fP\&.
.SS "virtual void sf::RenderWindow::onResize ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Function called after the window has been resized\&. This function is called so that derived classes can perform custom actions when the size of the window changes\&. 
.PP
Reimplemented from \fBsf::WindowBase\fP\&.
.SS "bool sf::WindowBase::pollEvent (\fBEvent\fP & event)\fR [inherited]\fP"

.PP
Pop the event on top of the event queue, if any, and return it\&. This function is not blocking: if there's no pending event then it will return false and leave \fIevent\fP unmodified\&. Note that more than one event may be present in the event queue, thus you should always call this function in a loop to make sure that you process every pending event\&. 
.PP
.nf
sf::Event event;
while (window\&.pollEvent(event))
{
   // process event\&.\&.\&.
}

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIevent\fP \fBEvent\fP to be returned
.RE
.PP
\fBReturns\fP
.RS 4
True if an event was returned, or false if the event queue was empty
.RE
.PP
\fBSee also\fP
.RS 4
\fBwaitEvent\fP 
.RE
.PP

.SS "void sf::RenderTarget::popGLStates ()\fR [inherited]\fP"

.PP
Restore the previously saved OpenGL render states and matrices\&. See the description of pushGLStates to get a detailed description of these functions\&.
.PP
\fBSee also\fP
.RS 4
\fBpushGLStates\fP 
.RE
.PP

.SS "void sf::RenderTarget::pushGLStates ()\fR [inherited]\fP"

.PP
Save the current OpenGL render states and matrices\&. This function can be used when you mix SFML drawing and direct OpenGL rendering\&. Combined with popGLStates, it ensures that: 
.PD 0
.IP "\(bu" 1
SFML's internal states are not messed up by your OpenGL code 
.IP "\(bu" 1
your OpenGL states are not modified by a call to a SFML function
.PP
More specifically, it must be used around code that calls Draw functions\&. Example: 
.PP
.nf
// OpenGL code here\&.\&.\&.
window\&.pushGLStates();
window\&.draw(\&.\&.\&.);
window\&.draw(\&.\&.\&.);
window\&.popGLStates();
// OpenGL code here\&.\&.\&.

.fi
.PP
.PP
Note that this function is quite expensive: it saves all the possible OpenGL states and matrices, even the ones you don't care about\&. Therefore it should be used wisely\&. It is provided for convenience, but the best results will be achieved if you handle OpenGL states yourself (because you know which states have really changed, and need to be saved and restored)\&. Take a look at the resetGLStates function if you do so\&.
.PP
\fBSee also\fP
.RS 4
\fBpopGLStates\fP 
.RE
.PP

.SS "void sf::WindowBase::requestFocus ()\fR [inherited]\fP"

.PP
Request the current window to be made the active foreground window\&. At any given time, only one window may have the input focus to receive input events such as keystrokes or mouse events\&. If a window requests focus, it only hints to the operating system, that it would like to be focused\&. The operating system is free to deny the request\&. This is not to be confused with \fBsetActive()\fP\&.
.PP
\fBSee also\fP
.RS 4
\fBhasFocus\fP 
.RE
.PP

.SS "void sf::RenderTarget::resetGLStates ()\fR [inherited]\fP"

.PP
Reset the internal OpenGL states so that the target is ready for drawing\&. This function can be used when you mix SFML drawing and direct OpenGL rendering, if you choose not to use pushGLStates/popGLStates\&. It makes sure that all OpenGL states needed by SFML are set, so that subsequent \fBdraw()\fP calls will work as expected\&.
.PP
Example: 
.PP
.nf
// OpenGL code here\&.\&.\&.
glPushAttrib(\&.\&.\&.);
window\&.resetGLStates();
window\&.draw(\&.\&.\&.);
window\&.draw(\&.\&.\&.);
glPopAttrib(\&.\&.\&.);
// OpenGL code here\&.\&.\&.

.fi
.PP
 
.SS "bool sf::RenderWindow::setActive (bool active = \fRtrue\fP)\fR [virtual]\fP"

.PP
Activate or deactivate the window as the current target for OpenGL rendering\&. A window is active only on the current thread, if you want to make it active on another thread you have to deactivate it on the previous thread first if it was active\&. Only one window can be active on a thread at a time, thus the window previously active (if any) automatically gets deactivated\&. This is not to be confused with \fBrequestFocus()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIactive\fP True to activate, false to deactivate
.RE
.PP
\fBReturns\fP
.RS 4
True if operation was successful, false otherwise 
.RE
.PP

.PP
Reimplemented from \fBsf::RenderTarget\fP\&.
.SS "bool sf::Window::setActive (bool active = \fRtrue\fP) const\fR [inherited]\fP"

.PP
Activate or deactivate the window as the current target for OpenGL rendering\&. A window is active only on the current thread, if you want to make it active on another thread you have to deactivate it on the previous thread first if it was active\&. Only one window can be active on a thread at a time, thus the window previously active (if any) automatically gets deactivated\&. This is not to be confused with \fBrequestFocus()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIactive\fP True to activate, false to deactivate
.RE
.PP
\fBReturns\fP
.RS 4
True if operation was successful, false otherwise 
.RE
.PP

.SS "void sf::Window::setFramerateLimit (unsigned int limit)\fR [inherited]\fP"

.PP
Limit the framerate to a maximum fixed frequency\&. If a limit is set, the window will use a small delay after each call to \fBdisplay()\fP to ensure that the current frame lasted long enough to match the framerate limit\&. SFML will try to match the given limit as much as it can, but since it internally uses \fBsf::sleep\fP, whose precision depends on the underlying OS, the results may be a little unprecise as well (for example, you can get 65 FPS when requesting 60)\&.
.PP
\fBParameters\fP
.RS 4
\fIlimit\fP Framerate limit, in frames per seconds (use 0 to disable limit) 
.RE
.PP

.SS "void sf::WindowBase::setIcon (unsigned int width, unsigned int height, const Uint8 * pixels)\fR [inherited]\fP"

.PP
Change the window's icon\&. \fIpixels\fP must be an array of \fIwidth\fP x \fIheight\fP pixels in 32-bits RGBA format\&.
.PP
The OS default icon is used by default\&.
.PP
\fBParameters\fP
.RS 4
\fIwidth\fP Icon's width, in pixels 
.br
\fIheight\fP Icon's height, in pixels 
.br
\fIpixels\fP Pointer to the array of pixels in memory\&. The pixels are copied, so you need not keep the source alive after calling this function\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetTitle\fP 
.RE
.PP

.SS "void sf::WindowBase::setJoystickThreshold (float threshold)\fR [inherited]\fP"

.PP
Change the joystick threshold\&. The joystick threshold is the value below which no JoystickMoved event will be generated\&.
.PP
The threshold value is 0\&.1 by default\&.
.PP
\fBParameters\fP
.RS 4
\fIthreshold\fP New threshold, in the range [0, 100] 
.RE
.PP

.SS "void sf::WindowBase::setKeyRepeatEnabled (bool enabled)\fR [inherited]\fP"

.PP
Enable or disable automatic key-repeat\&. If key repeat is enabled, you will receive repeated KeyPressed events while keeping a key pressed\&. If it is disabled, you will only get a single event when the key is pressed\&.
.PP
Key repeat is enabled by default\&.
.PP
\fBParameters\fP
.RS 4
\fIenabled\fP True to enable, false to disable 
.RE
.PP

.SS "void sf::WindowBase::setMouseCursor (const \fBCursor\fP & cursor)\fR [inherited]\fP"

.PP
Set the displayed cursor to a native system cursor\&. Upon window creation, the arrow cursor is used by default\&.
.PP
\fBWarning\fP
.RS 4
The cursor must not be destroyed while in use by the window\&.
.PP
Features related to \fBCursor\fP are not supported on iOS and Android\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIcursor\fP Native system cursor type to display
.RE
.PP
\fBSee also\fP
.RS 4
\fBsf::Cursor::loadFromSystem\fP 
.PP
\fBsf::Cursor::loadFromPixels\fP 
.RE
.PP

.SS "void sf::WindowBase::setMouseCursorGrabbed (bool grabbed)\fR [inherited]\fP"

.PP
Grab or release the mouse cursor\&. If set, grabs the mouse cursor inside this window's client area so it may no longer be moved outside its bounds\&. Note that grabbing is only active while the window has focus\&.
.PP
\fBParameters\fP
.RS 4
\fIgrabbed\fP True to enable, false to disable 
.RE
.PP

.SS "void sf::WindowBase::setMouseCursorVisible (bool visible)\fR [inherited]\fP"

.PP
Show or hide the mouse cursor\&. The mouse cursor is visible by default\&.
.PP
\fBParameters\fP
.RS 4
\fIvisible\fP True to show the mouse cursor, false to hide it 
.RE
.PP

.SS "void sf::WindowBase::setPosition (const \fBVector2i\fP & position)\fR [inherited]\fP"

.PP
Change the position of the window on screen\&. This function only works for top-level windows (i\&.e\&. it will be ignored for windows created from the handle of a child window/control)\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP New position, in pixels
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetPosition\fP 
.RE
.PP

.SS "void sf::WindowBase::setSize (const \fBVector2u\fP & size)\fR [inherited]\fP"

.PP
Change the size of the rendering region of the window\&. 
.PP
\fBParameters\fP
.RS 4
\fIsize\fP New size, in pixels
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSize\fP 
.RE
.PP

.SS "void sf::WindowBase::setTitle (const \fBString\fP & title)\fR [inherited]\fP"

.PP
Change the title of the window\&. 
.PP
\fBParameters\fP
.RS 4
\fItitle\fP New title
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetIcon\fP 
.RE
.PP

.SS "void sf::Window::setVerticalSyncEnabled (bool enabled)\fR [inherited]\fP"

.PP
Enable or disable vertical synchronization\&. Activating vertical synchronization will limit the number of frames displayed to the refresh rate of the monitor\&. This can avoid some visual artifacts, and limit the framerate to a good value (but not constant across different computers)\&.
.PP
Vertical synchronization is disabled by default\&.
.PP
\fBParameters\fP
.RS 4
\fIenabled\fP True to enable v-sync, false to deactivate it 
.RE
.PP

.SS "void sf::RenderTarget::setView (const \fBView\fP & view)\fR [inherited]\fP"

.PP
Change the current active view\&. The view is like a 2D camera, it controls which part of the 2D scene is visible, and how it is viewed in the render target\&. The new view will affect everything that is drawn, until another view is set\&. The render target keeps its own copy of the view object, so it is not necessary to keep the original one alive after calling this function\&. To restore the original view of the target, you can pass the result of \fBgetDefaultView()\fP to this function\&.
.PP
\fBParameters\fP
.RS 4
\fIview\fP New view to use
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetView\fP, \fBgetDefaultView\fP 
.RE
.PP

.SS "void sf::WindowBase::setVisible (bool visible)\fR [inherited]\fP"

.PP
Show or hide the window\&. The window is shown by default\&.
.PP
\fBParameters\fP
.RS 4
\fIvisible\fP True to show the window, false to hide it 
.RE
.PP

.SS "bool sf::WindowBase::waitEvent (\fBEvent\fP & event)\fR [inherited]\fP"

.PP
Wait for an event and return it\&. This function is blocking: if there's no pending event then it will wait until an event is received\&. After this function returns (and no error occurred), the \fIevent\fP object is always valid and filled properly\&. This function is typically used when you have a thread that is dedicated to events handling: you want to make this thread sleep as long as no new event is received\&. 
.PP
.nf
sf::Event event;
if (window\&.waitEvent(event))
{
   // process event\&.\&.\&.
}

.fi
.PP
.PP
\fBParameters\fP
.RS 4
\fIevent\fP \fBEvent\fP to be returned
.RE
.PP
\fBReturns\fP
.RS 4
False if any error occurred
.RE
.PP
\fBSee also\fP
.RS 4
\fBpollEvent\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
