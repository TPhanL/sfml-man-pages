.TH "sf::String" 3sfml "2.6.1" "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::String \- Utility string class that automatically handles conversions between types and encodings\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/System/String\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::basic_string< Uint32 >::iterator \fBIterator\fP"
.br
.RI "Iterator type\&. "
.ti -1c
.RI "typedef std::basic_string< Uint32 >::const_iterator \fBConstIterator\fP"
.br
.RI "Read-only iterator type\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBString\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBString\fP (char ansiChar, const std::locale &locale=std::locale())"
.br
.RI "Construct from a single ANSI character and a locale\&. "
.ti -1c
.RI "\fBString\fP (wchar_t wideChar)"
.br
.RI "Construct from single wide character\&. "
.ti -1c
.RI "\fBString\fP (Uint32 utf32Char)"
.br
.RI "Construct from single UTF-32 character\&. "
.ti -1c
.RI "\fBString\fP (const char *ansiString, const std::locale &locale=std::locale())"
.br
.RI "Construct from a null-terminated C-style ANSI string and a locale\&. "
.ti -1c
.RI "\fBString\fP (const std::string &ansiString, const std::locale &locale=std::locale())"
.br
.RI "Construct from an ANSI string and a locale\&. "
.ti -1c
.RI "\fBString\fP (const wchar_t *wideString)"
.br
.RI "Construct from null-terminated C-style wide string\&. "
.ti -1c
.RI "\fBString\fP (const std::wstring &wideString)"
.br
.RI "Construct from a wide string\&. "
.ti -1c
.RI "\fBString\fP (const Uint32 *utf32String)"
.br
.RI "Construct from a null-terminated C-style UTF-32 string\&. "
.ti -1c
.RI "\fBString\fP (const std::basic_string< Uint32 > &utf32String)"
.br
.RI "Construct from an UTF-32 string\&. "
.ti -1c
.RI "\fBString\fP (const \fBString\fP &copy)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBoperator std::string\fP () const"
.br
.RI "Implicit conversion operator to std::string (ANSI string) "
.ti -1c
.RI "\fBoperator std::wstring\fP () const"
.br
.RI "Implicit conversion operator to std::wstring (wide string) "
.ti -1c
.RI "std::string \fBtoAnsiString\fP (const std::locale &locale=std::locale()) const"
.br
.RI "Convert the Unicode string to an ANSI string\&. "
.ti -1c
.RI "std::wstring \fBtoWideString\fP () const"
.br
.RI "Convert the Unicode string to a wide string\&. "
.ti -1c
.RI "std::basic_string< Uint8 > \fBtoUtf8\fP () const"
.br
.RI "Convert the Unicode string to a UTF-8 string\&. "
.ti -1c
.RI "std::basic_string< Uint16 > \fBtoUtf16\fP () const"
.br
.RI "Convert the Unicode string to a UTF-16 string\&. "
.ti -1c
.RI "std::basic_string< Uint32 > \fBtoUtf32\fP () const"
.br
.RI "Convert the Unicode string to a UTF-32 string\&. "
.ti -1c
.RI "\fBString\fP & \fBoperator=\fP (const \fBString\fP &right)"
.br
.RI "Overload of assignment operator\&. "
.ti -1c
.RI "\fBString\fP & \fBoperator+=\fP (const \fBString\fP &right)"
.br
.RI "Overload of += operator to append an UTF-32 string\&. "
.ti -1c
.RI "Uint32 \fBoperator[]\fP (std::size_t index) const"
.br
.RI "Overload of [] operator to access a character by its position\&. "
.ti -1c
.RI "Uint32 & \fBoperator[]\fP (std::size_t index)"
.br
.RI "Overload of [] operator to access a character by its position\&. "
.ti -1c
.RI "void \fBclear\fP ()"
.br
.RI "Clear the string\&. "
.ti -1c
.RI "std::size_t \fBgetSize\fP () const"
.br
.RI "Get the size of the string\&. "
.ti -1c
.RI "bool \fBisEmpty\fP () const"
.br
.RI "Check whether the string is empty or not\&. "
.ti -1c
.RI "void \fBerase\fP (std::size_t position, std::size_t count=1)"
.br
.RI "Erase one or more characters from the string\&. "
.ti -1c
.RI "void \fBinsert\fP (std::size_t position, const \fBString\fP &str)"
.br
.RI "Insert one or more characters into the string\&. "
.ti -1c
.RI "std::size_t \fBfind\fP (const \fBString\fP &str, std::size_t start=0) const"
.br
.RI "Find a sequence of one or more characters in the string\&. "
.ti -1c
.RI "void \fBreplace\fP (std::size_t position, std::size_t length, const \fBString\fP &replaceWith)"
.br
.RI "Replace a substring with another string\&. "
.ti -1c
.RI "void \fBreplace\fP (const \fBString\fP &searchFor, const \fBString\fP &replaceWith)"
.br
.RI "Replace all occurrences of a substring with a replacement string\&. "
.ti -1c
.RI "\fBString\fP \fBsubstring\fP (std::size_t position, std::size_t length=\fBInvalidPos\fP) const"
.br
.RI "Return a part of the string\&. "
.ti -1c
.RI "const Uint32 * \fBgetData\fP () const"
.br
.RI "Get a pointer to the C-style array of characters\&. "
.ti -1c
.RI "\fBIterator\fP \fBbegin\fP ()"
.br
.RI "Return an iterator to the beginning of the string\&. "
.ti -1c
.RI "\fBConstIterator\fP \fBbegin\fP () const"
.br
.RI "Return an iterator to the beginning of the string\&. "
.ti -1c
.RI "\fBIterator\fP \fBend\fP ()"
.br
.RI "Return an iterator to the end of the string\&. "
.ti -1c
.RI "\fBConstIterator\fP \fBend\fP () const"
.br
.RI "Return an iterator to the end of the string\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename T > static \fBString\fP \fBfromUtf8\fP (T \fBbegin\fP, T \fBend\fP)"
.br
.RI "Create a new \fBsf::String\fP from a UTF-8 encoded string\&. "
.ti -1c
.RI "template<typename T > static \fBString\fP \fBfromUtf16\fP (T \fBbegin\fP, T \fBend\fP)"
.br
.RI "Create a new \fBsf::String\fP from a UTF-16 encoded string\&. "
.ti -1c
.RI "template<typename T > static \fBString\fP \fBfromUtf32\fP (T \fBbegin\fP, T \fBend\fP)"
.br
.RI "Create a new \fBsf::String\fP from a UTF-32 encoded string\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const std::size_t \fBInvalidPos\fP"
.br
.RI "Represents an invalid position in the string\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.in -1c
.SS "Related Symbols"
(Note that these are not member symbols\&.) 
.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.RI "Overload of == operator to compare two UTF-32 strings\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.RI "Overload of != operator to compare two UTF-32 strings\&. "
.ti -1c
.RI "bool \fBoperator<\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.RI "Overload of < operator to compare two UTF-32 strings\&. "
.ti -1c
.RI "bool \fBoperator>\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.RI "Overload of > operator to compare two UTF-32 strings\&. "
.ti -1c
.RI "bool \fBoperator<=\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.RI "Overload of <= operator to compare two UTF-32 strings\&. "
.ti -1c
.RI "bool \fBoperator>=\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.RI "Overload of >= operator to compare two UTF-32 strings\&. "
.ti -1c
.RI "\fBString\fP \fBoperator+\fP (const \fBString\fP &left, const \fBString\fP &right)"
.br
.RI "Overload of binary + operator to concatenate two strings\&. "
.in -1c
.SH "Detailed Description"
.PP 
Utility string class that automatically handles conversions between types and encodings\&. 

\fBsf::String\fP is a utility string class defined mainly for convenience\&.
.PP
It is a Unicode string (implemented using UTF-32), thus it can store any character in the world (European, Chinese, Arabic, Hebrew, etc\&.)\&.
.PP
It automatically handles conversions from/to ANSI and wide strings, so that you can work with standard string classes and still be compatible with functions taking a \fBsf::String\fP\&.
.PP
.PP
.nf
sf::String s;

std::string s1 = s;  // automatically converted to ANSI string
std::wstring s2 = s; // automatically converted to wide string
s = "hello";         // automatically converted from ANSI string
s = L"hello";        // automatically converted from wide string
s += 'a';            // automatically converted from ANSI string
s += L'a';           // automatically converted from wide string
.fi
.PP
.PP
Conversions involving ANSI strings use the default user locale\&. However it is possible to use a custom locale if necessary: 
.PP
.nf
std::locale locale;
sf::String s;
\&.\&.\&.
std::string s1 = s\&.toAnsiString(locale);
s = sf::String("hello", locale);

.fi
.PP
.PP
\fBsf::String\fP defines the most important functions of the standard std::string class: removing, random access, iterating, appending, comparing, etc\&. However it is a simple class provided for convenience, and you may have to consider using a more optimized class if your program requires complex string handling\&. The automatic conversion functions will then take care of converting your string to \fBsf::String\fP whenever SFML requires it\&.
.PP
Please note that SFML also defines a low-level, generic interface for Unicode handling, see the \fBsf::Utf\fP classes\&. 
.PP
Definition at line \fB45\fP of file \fBString\&.hpp\fP\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::basic_string<Uint32>::const_iterator \fBsf::String::ConstIterator\fP"

.PP
Read-only iterator type\&. 
.PP
Definition at line \fB53\fP of file \fBString\&.hpp\fP\&.
.SS "typedef std::basic_string<Uint32>::iterator \fBsf::String::Iterator\fP"

.PP
Iterator type\&. 
.PP
Definition at line \fB52\fP of file \fBString\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::String::String ()"

.PP
Default constructor\&. This constructor creates an empty string\&. 
.SS "sf::String::String (char ansiChar, const std::locale & locale = \fRstd::locale()\fP)"

.PP
Construct from a single ANSI character and a locale\&. The source character is converted to UTF-32 according to the given locale\&.
.PP
\fBParameters\fP
.RS 4
\fIansiChar\fP ANSI character to convert 
.br
\fIlocale\fP Locale to use for conversion 
.RE
.PP

.SS "sf::String::String (wchar_t wideChar)"

.PP
Construct from single wide character\&. 
.PP
\fBParameters\fP
.RS 4
\fIwideChar\fP Wide character to convert 
.RE
.PP

.SS "sf::String::String (Uint32 utf32Char)"

.PP
Construct from single UTF-32 character\&. 
.PP
\fBParameters\fP
.RS 4
\fIutf32Char\fP UTF-32 character to convert 
.RE
.PP

.SS "sf::String::String (const char * ansiString, const std::locale & locale = \fRstd::locale()\fP)"

.PP
Construct from a null-terminated C-style ANSI string and a locale\&. The source string is converted to UTF-32 according to the given locale\&.
.PP
\fBParameters\fP
.RS 4
\fIansiString\fP ANSI string to convert 
.br
\fIlocale\fP Locale to use for conversion 
.RE
.PP

.SS "sf::String::String (const std::string & ansiString, const std::locale & locale = \fRstd::locale()\fP)"

.PP
Construct from an ANSI string and a locale\&. The source string is converted to UTF-32 according to the given locale\&.
.PP
\fBParameters\fP
.RS 4
\fIansiString\fP ANSI string to convert 
.br
\fIlocale\fP Locale to use for conversion 
.RE
.PP

.SS "sf::String::String (const wchar_t * wideString)"

.PP
Construct from null-terminated C-style wide string\&. 
.PP
\fBParameters\fP
.RS 4
\fIwideString\fP Wide string to convert 
.RE
.PP

.SS "sf::String::String (const std::wstring & wideString)"

.PP
Construct from a wide string\&. 
.PP
\fBParameters\fP
.RS 4
\fIwideString\fP Wide string to convert 
.RE
.PP

.SS "sf::String::String (const Uint32 * utf32String)"

.PP
Construct from a null-terminated C-style UTF-32 string\&. 
.PP
\fBParameters\fP
.RS 4
\fIutf32String\fP UTF-32 string to assign 
.RE
.PP

.SS "sf::String::String (const std::basic_string< Uint32 > & utf32String)"

.PP
Construct from an UTF-32 string\&. 
.PP
\fBParameters\fP
.RS 4
\fIutf32String\fP UTF-32 string to assign 
.RE
.PP

.SS "sf::String::String (const \fBString\fP & copy)"

.PP
Copy constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIcopy\fP Instance to copy 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBIterator\fP sf::String::begin ()"

.PP
Return an iterator to the beginning of the string\&. 
.PP
\fBReturns\fP
.RS 4
Read-write iterator to the beginning of the string characters
.RE
.PP
\fBSee also\fP
.RS 4
\fBend\fP 
.RE
.PP

.SS "\fBConstIterator\fP sf::String::begin () const"

.PP
Return an iterator to the beginning of the string\&. 
.PP
\fBReturns\fP
.RS 4
Read-only iterator to the beginning of the string characters
.RE
.PP
\fBSee also\fP
.RS 4
\fBend\fP 
.RE
.PP

.SS "void sf::String::clear ()"

.PP
Clear the string\&. This function removes all the characters from the string\&.
.PP
\fBSee also\fP
.RS 4
\fBisEmpty\fP, \fBerase\fP 
.RE
.PP

.SS "\fBIterator\fP sf::String::end ()"

.PP
Return an iterator to the end of the string\&. The end iterator refers to 1 position past the last character; thus it represents an invalid character and should never be accessed\&.
.PP
\fBReturns\fP
.RS 4
Read-write iterator to the end of the string characters
.RE
.PP
\fBSee also\fP
.RS 4
\fBbegin\fP 
.RE
.PP

.SS "\fBConstIterator\fP sf::String::end () const"

.PP
Return an iterator to the end of the string\&. The end iterator refers to 1 position past the last character; thus it represents an invalid character and should never be accessed\&.
.PP
\fBReturns\fP
.RS 4
Read-only iterator to the end of the string characters
.RE
.PP
\fBSee also\fP
.RS 4
\fBbegin\fP 
.RE
.PP

.SS "void sf::String::erase (std::size_t position, std::size_t count = \fR1\fP)"

.PP
Erase one or more characters from the string\&. This function removes a sequence of \fIcount\fP characters starting from \fIposition\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP Position of the first character to erase 
.br
\fIcount\fP Number of characters to erase 
.RE
.PP

.SS "std::size_t sf::String::find (const \fBString\fP & str, std::size_t start = \fR0\fP) const"

.PP
Find a sequence of one or more characters in the string\&. This function searches for the characters of \fIstr\fP in the string, starting from \fIstart\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIstr\fP Characters to find 
.br
\fIstart\fP Where to begin searching
.RE
.PP
\fBReturns\fP
.RS 4
Position of \fIstr\fP in the string, or \fBString::InvalidPos\fP if not found 
.RE
.PP

.SS "template<typename T > static \fBString\fP sf::String::fromUtf16 (T begin, T end)\fR [static]\fP"

.PP
Create a new \fBsf::String\fP from a UTF-16 encoded string\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Forward iterator to the beginning of the UTF-16 sequence 
.br
\fIend\fP Forward iterator to the end of the UTF-16 sequence
.RE
.PP
\fBReturns\fP
.RS 4
A \fBsf::String\fP containing the source string
.RE
.PP
\fBSee also\fP
.RS 4
\fBfromUtf8\fP, \fBfromUtf32\fP 
.RE
.PP

.SS "template<typename T > static \fBString\fP sf::String::fromUtf32 (T begin, T end)\fR [static]\fP"

.PP
Create a new \fBsf::String\fP from a UTF-32 encoded string\&. This function is provided for consistency, it is equivalent to using the constructors that takes a const sf::Uint32* or a std::basic_string<sf::Uint32>\&.
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Forward iterator to the beginning of the UTF-32 sequence 
.br
\fIend\fP Forward iterator to the end of the UTF-32 sequence
.RE
.PP
\fBReturns\fP
.RS 4
A \fBsf::String\fP containing the source string
.RE
.PP
\fBSee also\fP
.RS 4
\fBfromUtf8\fP, \fBfromUtf16\fP 
.RE
.PP

.SS "template<typename T > static \fBString\fP sf::String::fromUtf8 (T begin, T end)\fR [static]\fP"

.PP
Create a new \fBsf::String\fP from a UTF-8 encoded string\&. 
.PP
\fBParameters\fP
.RS 4
\fIbegin\fP Forward iterator to the beginning of the UTF-8 sequence 
.br
\fIend\fP Forward iterator to the end of the UTF-8 sequence
.RE
.PP
\fBReturns\fP
.RS 4
A \fBsf::String\fP containing the source string
.RE
.PP
\fBSee also\fP
.RS 4
\fBfromUtf16\fP, \fBfromUtf32\fP 
.RE
.PP

.SS "const Uint32 * sf::String::getData () const"

.PP
Get a pointer to the C-style array of characters\&. This functions provides a read-only access to a null-terminated C-style representation of the string\&. The returned pointer is temporary and is meant only for immediate use, thus it is not recommended to store it\&.
.PP
\fBReturns\fP
.RS 4
Read-only pointer to the array of characters 
.RE
.PP

.SS "std::size_t sf::String::getSize () const"

.PP
Get the size of the string\&. 
.PP
\fBReturns\fP
.RS 4
Number of characters in the string
.RE
.PP
\fBSee also\fP
.RS 4
\fBisEmpty\fP 
.RE
.PP

.SS "void sf::String::insert (std::size_t position, const \fBString\fP & str)"

.PP
Insert one or more characters into the string\&. This function inserts the characters of \fIstr\fP into the string, starting from \fIposition\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP Position of insertion 
.br
\fIstr\fP Characters to insert 
.RE
.PP

.SS "bool sf::String::isEmpty () const"

.PP
Check whether the string is empty or not\&. 
.PP
\fBReturns\fP
.RS 4
True if the string is empty (i\&.e\&. contains no character)
.RE
.PP
\fBSee also\fP
.RS 4
\fBclear\fP, \fBgetSize\fP 
.RE
.PP

.SS "sf::String::operator std::string () const"

.PP
Implicit conversion operator to std::string (ANSI string) The current global locale is used for conversion\&. If you want to explicitly specify a locale, see toAnsiString\&. Characters that do not fit in the target encoding are discarded from the returned string\&. This operator is defined for convenience, and is equivalent to calling \fBtoAnsiString()\fP\&.
.PP
\fBReturns\fP
.RS 4
Converted ANSI string
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoAnsiString\fP, operator std::wstring 
.RE
.PP

.SS "sf::String::operator std::wstring () const"

.PP
Implicit conversion operator to std::wstring (wide string) Characters that do not fit in the target encoding are discarded from the returned string\&. This operator is defined for convenience, and is equivalent to calling \fBtoWideString()\fP\&.
.PP
\fBReturns\fP
.RS 4
Converted wide string
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoWideString\fP, operator std::string 
.RE
.PP

.SS "\fBString\fP & sf::String::operator+= (const \fBString\fP & right)"

.PP
Overload of += operator to append an UTF-32 string\&. 
.PP
\fBParameters\fP
.RS 4
\fIright\fP \fBString\fP to append
.RE
.PP
\fBReturns\fP
.RS 4
Reference to self 
.RE
.PP

.SS "\fBString\fP & sf::String::operator= (const \fBString\fP & right)"

.PP
Overload of assignment operator\&. 
.PP
\fBParameters\fP
.RS 4
\fIright\fP Instance to assign
.RE
.PP
\fBReturns\fP
.RS 4
Reference to self 
.RE
.PP

.SS "Uint32 & sf::String::operator[] (std::size_t index)"

.PP
Overload of [] operator to access a character by its position\&. This function provides read and write access to characters\&. Note: the behavior is undefined if \fIindex\fP is out of range\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the character to get
.RE
.PP
\fBReturns\fP
.RS 4
Reference to the character at position \fIindex\fP 
.RE
.PP

.SS "Uint32 sf::String::operator[] (std::size_t index) const"

.PP
Overload of [] operator to access a character by its position\&. This function provides read-only access to characters\&. Note: the behavior is undefined if \fIindex\fP is out of range\&.
.PP
\fBParameters\fP
.RS 4
\fIindex\fP Index of the character to get
.RE
.PP
\fBReturns\fP
.RS 4
Character at position \fIindex\fP 
.RE
.PP

.SS "void sf::String::replace (const \fBString\fP & searchFor, const \fBString\fP & replaceWith)"

.PP
Replace all occurrences of a substring with a replacement string\&. This function replaces all occurrences of \fIsearchFor\fP in this string with the string \fIreplaceWith\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIsearchFor\fP The value being searched for 
.br
\fIreplaceWith\fP The value that replaces found \fIsearchFor\fP values 
.RE
.PP

.SS "void sf::String::replace (std::size_t position, std::size_t length, const \fBString\fP & replaceWith)"

.PP
Replace a substring with another string\&. This function replaces the substring that starts at index \fIposition\fP and spans \fIlength\fP characters with the string \fIreplaceWith\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP Index of the first character to be replaced 
.br
\fIlength\fP Number of characters to replace\&. You can pass InvalidPos to replace all characters until the end of the string\&. 
.br
\fIreplaceWith\fP \fBString\fP that replaces the given substring\&. 
.RE
.PP

.SS "\fBString\fP sf::String::substring (std::size_t position, std::size_t length = \fR\fBInvalidPos\fP\fP) const"

.PP
Return a part of the string\&. This function returns the substring that starts at index \fIposition\fP and spans \fIlength\fP characters\&.
.PP
\fBParameters\fP
.RS 4
\fIposition\fP Index of the first character 
.br
\fIlength\fP Number of characters to include in the substring (if the string is shorter, as many characters as possible are included)\&. \fBInvalidPos\fP can be used to include all characters until the end of the string\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fBString\fP object containing a substring of this object 
.RE
.PP

.SS "std::string sf::String::toAnsiString (const std::locale & locale = \fRstd::locale()\fP) const"

.PP
Convert the Unicode string to an ANSI string\&. The UTF-32 string is converted to an ANSI string in the encoding defined by \fIlocale\fP\&. Characters that do not fit in the target encoding are discarded from the returned string\&.
.PP
\fBParameters\fP
.RS 4
\fIlocale\fP Locale to use for conversion
.RE
.PP
\fBReturns\fP
.RS 4
Converted ANSI string
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoWideString\fP, operator std::string 
.RE
.PP

.SS "std::basic_string< Uint16 > sf::String::toUtf16 () const"

.PP
Convert the Unicode string to a UTF-16 string\&. 
.PP
\fBReturns\fP
.RS 4
Converted UTF-16 string
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoUtf8\fP, \fBtoUtf32\fP 
.RE
.PP

.SS "std::basic_string< Uint32 > sf::String::toUtf32 () const"

.PP
Convert the Unicode string to a UTF-32 string\&. This function doesn't perform any conversion, since the string is already stored as UTF-32 internally\&.
.PP
\fBReturns\fP
.RS 4
Converted UTF-32 string
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoUtf8\fP, \fBtoUtf16\fP 
.RE
.PP

.SS "std::basic_string< Uint8 > sf::String::toUtf8 () const"

.PP
Convert the Unicode string to a UTF-8 string\&. 
.PP
\fBReturns\fP
.RS 4
Converted UTF-8 string
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoUtf16\fP, \fBtoUtf32\fP 
.RE
.PP

.SS "std::wstring sf::String::toWideString () const"

.PP
Convert the Unicode string to a wide string\&. Characters that do not fit in the target encoding are discarded from the returned string\&.
.PP
\fBReturns\fP
.RS 4
Converted wide string
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoAnsiString\fP, operator std::wstring 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "bool operator!= (const \fBString\fP & left, const \fBString\fP & right)\fR [related]\fP"

.PP
Overload of != operator to compare two UTF-32 strings\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a string) 
.br
\fIright\fP Right operand (a string)
.RE
.PP
\fBReturns\fP
.RS 4
True if both strings are different 
.RE
.PP

.SS "\fBString\fP operator+ (const \fBString\fP & left, const \fBString\fP & right)\fR [related]\fP"

.PP
Overload of binary + operator to concatenate two strings\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a string) 
.br
\fIright\fP Right operand (a string)
.RE
.PP
\fBReturns\fP
.RS 4
Concatenated string 
.RE
.PP

.SS "bool operator< (const \fBString\fP & left, const \fBString\fP & right)\fR [related]\fP"

.PP
Overload of < operator to compare two UTF-32 strings\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a string) 
.br
\fIright\fP Right operand (a string)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is lexicographically before \fIright\fP 
.RE
.PP

.SS "bool operator<= (const \fBString\fP & left, const \fBString\fP & right)\fR [related]\fP"

.PP
Overload of <= operator to compare two UTF-32 strings\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a string) 
.br
\fIright\fP Right operand (a string)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is lexicographically before or equivalent to \fIright\fP 
.RE
.PP

.SS "bool operator== (const \fBString\fP & left, const \fBString\fP & right)\fR [related]\fP"

.PP
Overload of == operator to compare two UTF-32 strings\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a string) 
.br
\fIright\fP Right operand (a string)
.RE
.PP
\fBReturns\fP
.RS 4
True if both strings are equal 
.RE
.PP

.SS "bool operator> (const \fBString\fP & left, const \fBString\fP & right)\fR [related]\fP"

.PP
Overload of > operator to compare two UTF-32 strings\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a string) 
.br
\fIright\fP Right operand (a string)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is lexicographically after \fIright\fP 
.RE
.PP

.SS "bool operator>= (const \fBString\fP & left, const \fBString\fP & right)\fR [related]\fP"

.PP
Overload of >= operator to compare two UTF-32 strings\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a string) 
.br
\fIright\fP Right operand (a string)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is lexicographically after or equivalent to \fIright\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "const std::size_t sf::String::InvalidPos\fR [static]\fP"

.PP
Represents an invalid position in the string\&. 
.PP
Definition at line \fB58\fP of file \fBString\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
