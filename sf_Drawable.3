.TH "sf::Drawable" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::Drawable \- Abstract base class for objects that can be drawn to a render target\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Graphics/Drawable\&.hpp>\fP
.PP
Inherited by \fBsf::Shape\fP, \fBsf::Sprite\fP, \fBsf::Text\fP, \fBsf::VertexArray\fP, and \fBsf::VertexBuffer\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~Drawable\fP ()"
.br
.RI "Virtual destructor\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBdraw\fP (\fBRenderTarget\fP &target, \fBRenderStates\fP states) const =0"
.br
.RI "Draw the object to a render target\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBRenderTarget\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Abstract base class for objects that can be drawn to a render target\&. 

\fBsf::Drawable\fP is a very simple base class that allows objects of derived classes to be drawn to a \fBsf::RenderTarget\fP\&.
.PP
All you have to do in your derived class is to override the draw virtual function\&.
.PP
Note that inheriting from \fBsf::Drawable\fP is not mandatory, but it allows this nice syntax 'window\&.draw(object)' rather than 'object\&.draw(window)', which is more consistent with other SFML classes\&.
.PP
Example: 
.PP
.nf
class MyDrawable : public sf::Drawable
{
public:

   \&.\&.\&.

private:

    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const
    {
        // You can draw other high\-level objects
        target\&.draw(m_sprite, states);

        // \&.\&.\&. or use the low\-level API
        states\&.texture = &m_texture;
        target\&.draw(m_vertices, states);

        // \&.\&.\&. or draw with OpenGL directly
        glBegin(GL_QUADS);
        \&.\&.\&.
        glEnd();
    }

    sf::Sprite m_sprite;
    sf::Texture m_texture;
    sf::VertexArray m_vertices;
};

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::RenderTarget\fP 
.RE
.PP

.PP
Definition at line \fB44\fP of file \fBDrawable\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "virtual sf::Drawable::~Drawable ()\fR [inline]\fP, \fR [virtual]\fP"

.PP
Virtual destructor\&. 
.PP
Definition at line \fB52\fP of file \fBDrawable\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void sf::Drawable::draw (\fBRenderTarget\fP & target, \fBRenderStates\fP states) const\fR [protected]\fP, \fR [pure virtual]\fP"

.PP
Draw the object to a render target\&. This is a pure virtual function that has to be implemented by the derived class to define how the drawable should be drawn\&.
.PP
\fBParameters\fP
.RS 4
\fItarget\fP Render target to draw to 
.br
\fIstates\fP Current render states 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "friend class \fBRenderTarget\fP\fR [friend]\fP"

.PP
Definition at line \fB56\fP of file \fBDrawable\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
