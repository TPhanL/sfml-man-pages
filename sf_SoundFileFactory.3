.TH "sf::SoundFileFactory" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::SoundFileFactory \- Manages and instantiates sound file readers and writers\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Audio/SoundFileFactory\&.hpp>\fP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename T > static void \fBregisterReader\fP ()"
.br
.RI "Register a new reader\&. "
.ti -1c
.RI "template<typename T > static void \fBunregisterReader\fP ()"
.br
.RI "Unregister a reader\&. "
.ti -1c
.RI "template<typename T > static void \fBregisterWriter\fP ()"
.br
.RI "Register a new writer\&. "
.ti -1c
.RI "template<typename T > static void \fBunregisterWriter\fP ()"
.br
.RI "Unregister a writer\&. "
.ti -1c
.RI "static \fBSoundFileReader\fP * \fBcreateReaderFromFilename\fP (const std::string &filename)"
.br
.RI "Instantiate the right reader for the given file on disk\&. "
.ti -1c
.RI "static \fBSoundFileReader\fP * \fBcreateReaderFromMemory\fP (const void *data, std::size_t sizeInBytes)"
.br
.RI "Instantiate the right codec for the given file in memory\&. "
.ti -1c
.RI "static \fBSoundFileReader\fP * \fBcreateReaderFromStream\fP (\fBInputStream\fP &stream)"
.br
.RI "Instantiate the right codec for the given file in stream\&. "
.ti -1c
.RI "static \fBSoundFileWriter\fP * \fBcreateWriterFromFilename\fP (const std::string &filename)"
.br
.RI "Instantiate the right writer for the given file on disk\&. "
.in -1c
.SH "Detailed Description"
.PP 
Manages and instantiates sound file readers and writers\&. 

This class is where all the sound file readers and writers are registered\&.
.PP
You should normally only need to use its registration and unregistration functions; readers/writers creation and manipulation are wrapped into the higher-level classes \fBsf::InputSoundFile\fP and \fBsf::OutputSoundFile\fP\&.
.PP
To register a new reader (writer) use the \fBsf::SoundFileFactory::registerReader\fP (registerWriter) static function\&. You don't have to call the unregisterReader (unregisterWriter) function, unless you want to unregister a format before your application ends (typically, when a plugin is unloaded)\&.
.PP
Usage example: 
.PP
.nf
sf::SoundFileFactory::registerReader<MySoundFileReader>();
sf::SoundFileFactory::registerWriter<MySoundFileWriter>();

.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBsf::InputSoundFile\fP, \fBsf::OutputSoundFile\fP, \fBsf::SoundFileReader\fP, \fBsf::SoundFileWriter\fP 
.RE
.PP

.PP
Definition at line \fB46\fP of file \fBSoundFileFactory\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBstatic\fP \fBSoundFileReader\fP * sf::SoundFileFactory::createReaderFromFilename (\fBconst\fP std::string & filename)\fR [static]\fP"

.PP
Instantiate the right reader for the given file on disk\&. It's up to the caller to release the returned reader
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path of the sound file
.RE
.PP
\fBReturns\fP
.RS 4
A new sound file reader that can read the given file, or null if no reader can handle it
.RE
.PP
\fBSee also\fP
.RS 4
\fBcreateReaderFromMemory\fP, \fBcreateReaderFromStream\fP 
.RE
.PP

.SS "\fBstatic\fP \fBSoundFileReader\fP * sf::SoundFileFactory::createReaderFromMemory (\fBconst\fP \fBvoid\fP * data, std::size_t sizeInBytes)\fR [static]\fP"

.PP
Instantiate the right codec for the given file in memory\&. It's up to the caller to release the returned reader
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Pointer to the file data in memory 
.br
\fIsizeInBytes\fP Total size of the file data, in bytes
.RE
.PP
\fBReturns\fP
.RS 4
A new sound file codec that can read the given file, or null if no codec can handle it
.RE
.PP
\fBSee also\fP
.RS 4
\fBcreateReaderFromFilename\fP, \fBcreateReaderFromStream\fP 
.RE
.PP

.SS "\fBstatic\fP \fBSoundFileReader\fP * sf::SoundFileFactory::createReaderFromStream (\fBInputStream\fP & stream)\fR [static]\fP"

.PP
Instantiate the right codec for the given file in stream\&. It's up to the caller to release the returned reader
.PP
\fBParameters\fP
.RS 4
\fIstream\fP Source stream to read from
.RE
.PP
\fBReturns\fP
.RS 4
A new sound file codec that can read the given file, or null if no codec can handle it
.RE
.PP
\fBSee also\fP
.RS 4
\fBcreateReaderFromFilename\fP, \fBcreateReaderFromMemory\fP 
.RE
.PP

.SS "\fBstatic\fP \fBSoundFileWriter\fP * sf::SoundFileFactory::createWriterFromFilename (\fBconst\fP std::string & filename)\fR [static]\fP"

.PP
Instantiate the right writer for the given file on disk\&. It's up to the caller to release the returned writer
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path of the sound file
.RE
.PP
\fBReturns\fP
.RS 4
A new sound file writer that can write given file, or null if no writer can handle it 
.RE
.PP

.SS "template<typename T > static void sf::SoundFileFactory::registerReader ()\fR [static]\fP"

.PP
Register a new reader\&. 
.PP
\fBSee also\fP
.RS 4
\fBunregisterReader\fP 
.RE
.PP

.SS "template<\fBtypename\fP T > \fBstatic\fP \fBvoid\fP sf::SoundFileFactory::registerWriter ()\fR [static]\fP"

.PP
Register a new writer\&. 
.PP
\fBSee also\fP
.RS 4
\fBunregisterWriter\fP 
.RE
.PP

.SS "template<\fBtypename\fP T > \fBstatic\fP \fBvoid\fP sf::SoundFileFactory::unregisterReader ()\fR [static]\fP"

.PP
Unregister a reader\&. 
.PP
\fBSee also\fP
.RS 4
\fBregisterReader\fP 
.RE
.PP

.SS "template<\fBtypename\fP T > \fBstatic\fP \fBvoid\fP sf::SoundFileFactory::unregisterWriter ()\fR [static]\fP"

.PP
Unregister a writer\&. 
.PP
\fBSee also\fP
.RS 4
\fBregisterWriter\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
