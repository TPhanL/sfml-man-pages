.TH "sf::IpAddress" 3 "Version .." "SFML" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sf::IpAddress \- Encapsulate an IPv4 network address\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <SFML/Network/IpAddress\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIpAddress\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBIpAddress\fP (const std::string &address)"
.br
.RI "Construct the address from a string\&. "
.ti -1c
.RI "\fBIpAddress\fP (const char *address)"
.br
.RI "Construct the address from a string\&. "
.ti -1c
.RI "\fBIpAddress\fP (Uint8 byte0, Uint8 byte1, Uint8 byte2, Uint8 byte3)"
.br
.RI "Construct the address from 4 bytes\&. "
.ti -1c
.RI "\fBIpAddress\fP (Uint32 address)"
.br
.RI "Construct the address from a 32-bits integer\&. "
.ti -1c
.RI "std::string \fBtoString\fP () const"
.br
.RI "Get a string representation of the address\&. "
.ti -1c
.RI "Uint32 \fBtoInteger\fP () const"
.br
.RI "Get an integer representation of the address\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBIpAddress\fP \fBgetLocalAddress\fP ()"
.br
.RI "Get the computer's local address\&. "
.ti -1c
.RI "static \fBIpAddress\fP \fBgetPublicAddress\fP (\fBTime\fP timeout=\fBTime::Zero\fP)"
.br
.RI "Get the computer's public address\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const \fBIpAddress\fP \fBNone\fP"
.br
.RI "Value representing an empty/invalid address\&. "
.ti -1c
.RI "static const \fBIpAddress\fP \fBAny\fP"
.br
.RI "Value representing any address (0\&.0\&.0\&.0) "
.ti -1c
.RI "static const \fBIpAddress\fP \fBLocalHost\fP"
.br
.RI "The 'localhost' address (for connecting a computer to itself locally) "
.ti -1c
.RI "static const \fBIpAddress\fP \fBBroadcast\fP"
.br
.RI "The 'broadcast' address (for sending UDP messages to everyone on a local network) "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "bool \fBoperator<\fP (const \fBIpAddress\fP &left, const \fBIpAddress\fP &right)"
.br
.RI "Overload of < operator to compare two IP addresses\&. "
.in -1c
.SH "Detailed Description"
.PP 
Encapsulate an IPv4 network address\&. 

\fBsf::IpAddress\fP is a utility class for manipulating network addresses\&.
.PP
It provides a set a implicit constructors and conversion functions to easily build or transform an IP address from/to various representations\&.
.PP
Usage example: 
.PP
.nf
sf::IpAddress a0;                                     // an invalid address
sf::IpAddress a1 = sf::IpAddress::None;               // an invalid address (same as a0)
sf::IpAddress a2("127\&.0\&.0\&.1");                        // the local host address
sf::IpAddress a3 = sf::IpAddress::Broadcast;          // the broadcast address
sf::IpAddress a4(192, 168, 1, 56);                    // a local address
sf::IpAddress a5("my_computer");                      // a local address created from a network name
sf::IpAddress a6("89\&.54\&.1\&.169");                      // a distant address
sf::IpAddress a7("www\&.google\&.com");                   // a distant address created from a network name
sf::IpAddress a8 = sf::IpAddress::getLocalAddress();  // my address on the local network
sf::IpAddress a9 = sf::IpAddress::getPublicAddress(); // my address on the internet

.fi
.PP
.PP
Note that \fBsf::IpAddress\fP currently doesn't support IPv6 nor other types of network addresses\&. 
.PP
Definition at line \fB44\fP of file \fBIpAddress\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "sf::IpAddress::IpAddress ()"

.PP
Default constructor\&. This constructor creates an empty (invalid) address 
.SS "sf::IpAddress::IpAddress (const std::string & address)"

.PP
Construct the address from a string\&. Here \fIaddress\fP can be either a decimal address (ex: '192\&.168\&.1\&.56') or a network name (ex: 'localhost')\&.
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP IP address or network name 
.RE
.PP

.SS "sf::IpAddress::IpAddress (const char * address)"

.PP
Construct the address from a string\&. Here \fIaddress\fP can be either a decimal address (ex: '192\&.168\&.1\&.56') or a network name (ex: 'localhost')\&. This is equivalent to the constructor taking a std::string parameter, it is defined for convenience so that the implicit conversions from literal strings to \fBIpAddress\fP work\&.
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP IP address or network name 
.RE
.PP

.SS "sf::IpAddress::IpAddress (Uint8 byte0, Uint8 byte1, Uint8 byte2, Uint8 byte3)"

.PP
Construct the address from 4 bytes\&. Calling IpAddress(a, b, c, d) is equivalent to calling \fBIpAddress\fP('a\&.b\&.c\&.d'), but safer as it doesn't have to parse a string to get the address components\&.
.PP
\fBParameters\fP
.RS 4
\fIbyte0\fP First byte of the address 
.br
\fIbyte1\fP Second byte of the address 
.br
\fIbyte2\fP Third byte of the address 
.br
\fIbyte3\fP Fourth byte of the address 
.RE
.PP

.SS "sf::IpAddress::IpAddress (Uint32 address)\fR [explicit]\fP"

.PP
Construct the address from a 32-bits integer\&. This constructor uses the internal representation of the address directly\&. It should be used for optimization purposes, and only if you got that representation from \fBIpAddress::toInteger()\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIaddress\fP 4 bytes of the address packed into a 32-bits integer
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoInteger\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "static \fBIpAddress\fP sf::IpAddress::getLocalAddress ()\fR [static]\fP"

.PP
Get the computer's local address\&. The local address is the address of the computer from the LAN point of view, i\&.e\&. something like 192\&.168\&.1\&.56\&. It is meaningful only for communications over the local network\&. Unlike getPublicAddress, this function is fast and may be used safely anywhere\&.
.PP
\fBReturns\fP
.RS 4
Local IP address of the computer
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetPublicAddress\fP 
.RE
.PP

.SS "static \fBIpAddress\fP sf::IpAddress::getPublicAddress (\fBTime\fP timeout = \fR\fBTime::Zero\fP\fP)\fR [static]\fP"

.PP
Get the computer's public address\&. The public address is the address of the computer from the internet point of view, i\&.e\&. something like 89\&.54\&.1\&.169\&. It is necessary for communications over the world wide web\&. The only way to get a public address is to ask it to a distant website; as a consequence, this function depends on both your network connection and the server, and may be very slow\&. You should use it as few as possible\&. Because this function depends on the network connection and on a distant server, you may use a time limit if you don't want your program to be possibly stuck waiting in case there is a problem; this limit is deactivated by default\&.
.PP
\fBParameters\fP
.RS 4
\fItimeout\fP Maximum time to wait
.RE
.PP
\fBReturns\fP
.RS 4
Public IP address of the computer
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetLocalAddress\fP 
.RE
.PP

.SS "Uint32 sf::IpAddress::toInteger () const"

.PP
Get an integer representation of the address\&. The returned number is the internal representation of the address, and should be used for optimization purposes only (like sending the address through a socket)\&. The integer produced by this function can then be converted back to a \fBsf::IpAddress\fP with the proper constructor\&.
.PP
\fBReturns\fP
.RS 4
32-bits unsigned integer representation of the address
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoString\fP 
.RE
.PP

.SS "std::string sf::IpAddress::toString () const"

.PP
Get a string representation of the address\&. The returned string is the decimal representation of the IP address (like '192\&.168\&.1\&.56'), even if it was constructed from a host name\&.
.PP
\fBReturns\fP
.RS 4
\fBString\fP representation of the address
.RE
.PP
\fBSee also\fP
.RS 4
\fBtoInteger\fP 
.RE
.PP

.SH "Friends And Related Symbol Documentation"
.PP 
.SS "bool operator< (const \fBIpAddress\fP & left, const \fBIpAddress\fP & right)\fR [friend]\fP"

.PP
Overload of < operator to compare two IP addresses\&. 
.PP
\fBParameters\fP
.RS 4
\fIleft\fP Left operand (a IP address) 
.br
\fIright\fP Right operand (a IP address)
.RE
.PP
\fBReturns\fP
.RS 4
True if \fIleft\fP is lesser than \fIright\fP 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "const \fBIpAddress\fP sf::IpAddress::Any\fR [static]\fP"

.PP
Value representing any address (0\&.0\&.0\&.0) 
.PP
Definition at line \fB185\fP of file \fBIpAddress\&.hpp\fP\&.
.SS "const \fBIpAddress\fP sf::IpAddress::Broadcast\fR [static]\fP"

.PP
The 'broadcast' address (for sending UDP messages to everyone on a local network) 
.PP
Definition at line \fB187\fP of file \fBIpAddress\&.hpp\fP\&.
.SS "const \fBIpAddress\fP sf::IpAddress::LocalHost\fR [static]\fP"

.PP
The 'localhost' address (for connecting a computer to itself locally) 
.PP
Definition at line \fB186\fP of file \fBIpAddress\&.hpp\fP\&.
.SS "const \fBIpAddress\fP sf::IpAddress::None\fR [static]\fP"

.PP
Value representing an empty/invalid address\&. 
.PP
Definition at line \fB184\fP of file \fBIpAddress\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for SFML from the source code\&.
